
camera_bsp_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000103f0  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006bc  080106a0  080106a0  000206a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010d5c  08010d5c  00020d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010d64  08010d64  00020d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010d68  08010d68  00020d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b8  24000000  08010d6c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dc8  240000b8  08010e24  000300b8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000e80  08010e24  00030e80  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027825  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004f3c  00000000  00000000  0005790b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000019f8  00000000  00000000  0005c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000017f0  00000000  00000000  0005e240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038e03  00000000  00000000  0005fa30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002768c  00000000  00000000  00098833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00152a59  00000000  00000000  000bfebf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00212918  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072a4  00000000  00000000  00212968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	240000b8 	.word	0x240000b8
 80002cc:	00000000 	.word	0x00000000
 80002d0:	08010688 	.word	0x08010688

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	240000bc 	.word	0x240000bc
 80002ec:	08010688 	.word	0x08010688

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */
//
  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_DCMI_Init+0x60>)
 800069a:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_DCMI_Init+0x64>)
 800069c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 80006a4:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006a6:	2220      	movs	r2, #32
 80006a8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b2:	2240      	movs	r2, #64	; 0x40
 80006b4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_DCMI_Init+0x60>)
 80006e2:	f003 ffb1 	bl	8004648 <HAL_DCMI_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 ffde 	bl	80016ac <Error_Handler>
//  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
//  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
//  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
  /* USER CODE END DCMI_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	240000d4 	.word	0x240000d4
 80006f8:	48020000 	.word	0x48020000

080006fc <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	; 0x38
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a76      	ldr	r2, [pc, #472]	; (80008f4 <HAL_DCMI_MspInit+0x1f8>)
 800071a:	4293      	cmp	r3, r2
 800071c:	f040 80e5 	bne.w	80008ea <HAL_DCMI_MspInit+0x1ee>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */
//
  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000720:	4b75      	ldr	r3, [pc, #468]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000722:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000726:	4a74      	ldr	r2, [pc, #464]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8000730:	4b71      	ldr	r3, [pc, #452]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000732:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8000736:	f003 0301 	and.w	r3, r3, #1
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000740:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000744:	4a6c      	ldr	r2, [pc, #432]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800074e:	4b6a      	ldr	r3, [pc, #424]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000750:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000754:	f003 0302 	and.w	r3, r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
 800075a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800075c:	4b66      	ldr	r3, [pc, #408]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800075e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000762:	4a65      	ldr	r2, [pc, #404]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800076c:	4b62      	ldr	r3, [pc, #392]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800076e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	4b5f      	ldr	r3, [pc, #380]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800077c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000780:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800078c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000798:	4b57      	ldr	r3, [pc, #348]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 800079a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079e:	4a56      	ldr	r2, [pc, #344]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a8:	4b53      	ldr	r3, [pc, #332]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	613b      	str	r3, [r7, #16]
 80007b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007bc:	4a4e      	ldr	r2, [pc, #312]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007be:	f043 0301 	orr.w	r3, r3, #1
 80007c2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <HAL_DCMI_MspInit+0x1fc>)
 80007c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_7;
 80007d4:	f44f 7360 	mov.w	r3, #896	; 0x380
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007e6:	230d      	movs	r3, #13
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4842      	ldr	r0, [pc, #264]	; (80008fc <HAL_DCMI_MspInit+0x200>)
 80007f2:	f008 f963 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000808:	230d      	movs	r3, #13
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	483b      	ldr	r0, [pc, #236]	; (8000900 <HAL_DCMI_MspInit+0x204>)
 8000814:	f008 f952 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000818:	2308      	movs	r3, #8
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000828:	230d      	movs	r3, #13
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4834      	ldr	r0, [pc, #208]	; (8000904 <HAL_DCMI_MspInit+0x208>)
 8000834:	f008 f942 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_6;
 8000838:	f44f 632c 	mov.w	r3, #2752	; 0xac0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800084a:	230d      	movs	r3, #13
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	482c      	ldr	r0, [pc, #176]	; (8000908 <HAL_DCMI_MspInit+0x20c>)
 8000856:	f008 f931 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800085a:	2350      	movs	r3, #80	; 0x50
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800086a:	230d      	movs	r3, #13
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4825      	ldr	r0, [pc, #148]	; (800090c <HAL_DCMI_MspInit+0x210>)
 8000876:	f008 f921 	bl	8008abc <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800087c:	4a25      	ldr	r2, [pc, #148]	; (8000914 <HAL_DCMI_MspInit+0x218>)
 800087e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000882:	224b      	movs	r2, #75	; 0x4b
 8000884:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000886:	4b22      	ldr	r3, [pc, #136]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000892:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 8000894:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000898:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800089a:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 800089c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a0:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80008a2:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008a8:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80008aa:	4b19      	ldr	r3, [pc, #100]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80008b6:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80008be:	4814      	ldr	r0, [pc, #80]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008c0:	f004 f990 	bl	8004be4 <HAL_DMA_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_DCMI_MspInit+0x1d2>
    {
      Error_Handler();
 80008ca:	f000 feef 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d2:	649a      	str	r2, [r3, #72]	; 0x48
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <HAL_DCMI_MspInit+0x214>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	204e      	movs	r0, #78	; 0x4e
 80008e0:	f003 fe7d 	bl	80045de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 80008e4:	204e      	movs	r0, #78	; 0x4e
 80008e6:	f003 fe94 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */
//
  /* USER CODE END DCMI_MspInit 1 */
  }
}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	48020000 	.word	0x48020000
 80008f8:	58024400 	.word	0x58024400
 80008fc:	58020400 	.word	0x58020400
 8000900:	58021800 	.word	0x58021800
 8000904:	58020c00 	.word	0x58020c00
 8000908:	58020800 	.word	0x58020800
 800090c:	58020000 	.word	0x58020000
 8000910:	24000124 	.word	0x24000124
 8000914:	40020428 	.word	0x40020428

08000918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <MX_DMA_Init+0x3c>)
 8000920:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000924:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000926:	f043 0302 	orr.w	r3, r3, #2
 800092a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2100      	movs	r1, #0
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f003 fe4c 	bl	80045de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f003 fe63 	bl	8004612 <HAL_NVIC_EnableIRQ>

}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	58024400 	.word	0x58024400

08000958 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800095e:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_DMA2D_Init+0x74>)
 8000960:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M_PFC;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000968:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800096a:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800096c:	2201      	movs	r2, #1
 800096e:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000976:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000978:	2200      	movs	r2, #0
 800097a:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800097e:	2201      	movs	r2, #1
 8000980:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000984:	2200      	movs	r2, #0
 8000986:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000988:	4b0f      	ldr	r3, [pc, #60]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800098a:	2200      	movs	r2, #0
 800098c:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000990:	2200      	movs	r2, #0
 8000992:	655a      	str	r2, [r3, #84]	; 0x54
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <MX_DMA2D_Init+0x70>)
 8000996:	2200      	movs	r2, #0
 8000998:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <MX_DMA2D_Init+0x70>)
 800099c:	2200      	movs	r2, #0
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009a2:	f006 ffff 	bl	80079a4 <HAL_DMA2D_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_DMA2D_Init+0x58>
  {
    Error_Handler();
 80009ac:	f000 fe7e 	bl	80016ac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80009b0:	2101      	movs	r1, #1
 80009b2:	4805      	ldr	r0, [pc, #20]	; (80009c8 <MX_DMA2D_Init+0x70>)
 80009b4:	f007 fa7e 	bl	8007eb4 <HAL_DMA2D_ConfigLayer>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_DMA2D_Init+0x6a>
  {
    Error_Handler();
 80009be:	f000 fe75 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	2400019c 	.word	0x2400019c
 80009cc:	52001000 	.word	0x52001000

080009d0 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <HAL_DMA2D_MspInit+0x48>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d116      	bne.n	8000a10 <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_DMA2D_MspInit+0x4c>)
 80009f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	205a      	movs	r0, #90	; 0x5a
 8000a06:	f003 fdea 	bl	80045de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000a0a:	205a      	movs	r0, #90	; 0x5a
 8000a0c:	f003 fe01 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	52001000 	.word	0x52001000
 8000a1c:	58024400 	.word	0x58024400

08000a20 <DMA2D_Convert>:
  }
}

/* USER CODE BEGIN 1 */
void DMA2D_Convert(uint8_t* source, uint32_t* destination)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af02      	add	r7, sp, #8
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  status = HAL_DMA2D_Start(&hdma2d, (uint32_t)source,
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a3a:	f007 f817 	bl	8007a6c <HAL_DMA2D_Start>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	73fb      	strb	r3, [r7, #15]
                        (uint32_t)destination, 480, 272);
  if (status != HAL_OK) {
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <DMA2D_Convert+0x2c>
    Error_Handler();
 8000a48:	f000 fe30 	bl	80016ac <Error_Handler>
  }

  status = HAL_DMA2D_PollForTransfer(&hdma2d, 1000);
 8000a4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a50:	4806      	ldr	r0, [pc, #24]	; (8000a6c <DMA2D_Convert+0x4c>)
 8000a52:	f007 f836 	bl	8007ac2 <HAL_DMA2D_PollForTransfer>
 8000a56:	4603      	mov	r3, r0
 8000a58:	73fb      	strb	r3, [r7, #15]
  if (status != HAL_OK) {
 8000a5a:	7bfb      	ldrb	r3, [r7, #15]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <DMA2D_Convert+0x44>
    Error_Handler();
 8000a60:	f000 fe24 	bl	80016ac <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	2400019c 	.word	0x2400019c

08000a70 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000a8a:	4b3c      	ldr	r3, [pc, #240]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a8c:	4a3c      	ldr	r2, [pc, #240]	; (8000b80 <MX_FMC_Init+0x110>)
 8000a8e:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8000a90:	4b3a      	ldr	r3, [pc, #232]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a9c:	4b37      	ldr	r3, [pc, #220]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000a9e:	2204      	movs	r2, #4
 8000aa0:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000aa2:	4b36      	ldr	r3, [pc, #216]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000aa4:	2210      	movs	r2, #16
 8000aa6:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aa8:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000aaa:	2240      	movs	r2, #64	; 0x40
 8000aac:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000aae:	4b33      	ldr	r3, [pc, #204]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ab0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab4:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab6:	4b31      	ldr	r3, [pc, #196]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ac2:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ac6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aca:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_2;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000ace:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	61bb      	str	r3, [r7, #24]
  SdramTiming.SelfRefreshTime = 5;
 8000adc:	2305      	movs	r3, #5
 8000ade:	61fb      	str	r3, [r7, #28]
  SdramTiming.RowCycleDelay = 6;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	623b      	str	r3, [r7, #32]
  SdramTiming.WriteRecoveryTime = 3;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
  SdramTiming.RPDelay = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  SdramTiming.RCDDelay = 2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000af8:	f00c fc34 	bl	800d364 <HAL_SDRAM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_FMC_Init+0x96>
  {
    Error_Handler( );
 8000b02:	f000 fdd3 	bl	80016ac <Error_Handler>

  /* USER CODE BEGIN FMC_Init 2 */
  FMC_SDRAM_CommandTypeDef Command;
  /* Step 1 and Step 2 already done in HAL_SDRAM_Init() */
  /* Step 3: Configure a clock configuration enable command */
	Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE; /* Set MODE bits to "001" */
 8000b06:	2301      	movs	r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
	Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK2; /* configure the Target Bank bits */
 8000b0a:	2308      	movs	r3, #8
 8000b0c:	60bb      	str	r3, [r7, #8]
	Command.AutoRefreshNumber      = 1;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	60fb      	str	r3, [r7, #12]
	Command.ModeRegisterDefinition = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b20:	f00c fc5c 	bl	800d3dc <HAL_SDRAM_SendCommand>
	HAL_Delay(1); /* Step 4: Insert 100 us minimum delay - Min HAL Delay is 1ms */
 8000b24:	2001      	movs	r0, #1
 8000b26:	f003 fc5b 	bl	80043e0 <HAL_Delay>
	/* Step 5: Configure a PALL (precharge all) command */
	Command.CommandMode            = FMC_SDRAM_CMD_PALL; /* Set MODE bits to "010" */
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b34:	4619      	mov	r1, r3
 8000b36:	4811      	ldr	r0, [pc, #68]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b38:	f00c fc50 	bl	800d3dc <HAL_SDRAM_SendCommand>
	/* Step 6: Configure an Auto Refresh command */
	Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE; /* Set MODE bits to "011" */
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	607b      	str	r3, [r7, #4]
	Command.AutoRefreshNumber      = 2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480b      	ldr	r0, [pc, #44]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b4e:	f00c fc45 	bl	800d3dc <HAL_SDRAM_SendCommand>
	/* Step 7: Program the external memory mode register */
	Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;/*set the MODE bits to "100" */
 8000b52:	2304      	movs	r3, #4
 8000b54:	607b      	str	r3, [r7, #4]
	Command.ModeRegisterDefinition =  (uint32_t)0 | 0<<3 | 2<<4 | 0<<7 | 1<<9;
 8000b56:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000b5a:	613b      	str	r3, [r7, #16]
	HAL_SDRAM_SendCommand(&hsdram2, &Command, 0xfff);
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b66:	f00c fc39 	bl	800d3dc <HAL_SDRAM_SendCommand>
	/* Step 8: Set the refresh rate counter - refer to section SDRAM refresh timer register in RM0455 */
	/* Set the device refresh rate
	* COUNT = [(SDRAM self refresh time / number of row) x  SDRAM CLK] – 20
					= [(64ms/4096) * 200MHz] - 20 ~= 3115 */
	HAL_SDRAM_ProgramRefreshRate(&hsdram2, 3115);
 8000b6a:	f640 412b 	movw	r1, #3115	; 0xc2b
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_FMC_Init+0x10c>)
 8000b70:	f00c fc69 	bl	800d446 <HAL_SDRAM_ProgramRefreshRate>
  /* USER CODE END FMC_Init 2 */
}
 8000b74:	bf00      	nop
 8000b76:	3730      	adds	r7, #48	; 0x30
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	24000204 	.word	0x24000204
 8000b80:	52004140 	.word	0x52004140

08000b84 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b0b8      	sub	sp, #224	; 0xe0
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b8e:	2200      	movs	r2, #0
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	605a      	str	r2, [r3, #4]
 8000b94:	609a      	str	r2, [r3, #8]
 8000b96:	60da      	str	r2, [r3, #12]
 8000b98:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000b9a:	4b58      	ldr	r3, [pc, #352]	; (8000cfc <HAL_FMC_MspInit+0x178>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f040 80a7 	bne.w	8000cf2 <HAL_FMC_MspInit+0x16e>
    return;
  }
  FMC_Initialized = 1;
 8000ba4:	4b55      	ldr	r3, [pc, #340]	; (8000cfc <HAL_FMC_MspInit+0x178>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	22c0      	movs	r2, #192	; 0xc0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f00e fd04 	bl	800f5c0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000bbc:	f04f 0300 	mov.w	r3, #0
 8000bc0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2M = 24;
 8000bc4:	2318      	movs	r3, #24
 8000bc6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2N = 200;
 8000bc8:	23c8      	movs	r3, #200	; 0xc8
 8000bca:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2R = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	4618      	mov	r0, r3
 8000bea:	f00a fcbd 	bl	800b568 <HAL_RCCEx_PeriphCLKConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_FMC_MspInit+0x74>
    {
      Error_Handler();
 8000bf4:	f000 fd5a 	bl	80016ac <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000bf8:	4b41      	ldr	r3, [pc, #260]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000bfa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000bfe:	4a40      	ldr	r2, [pc, #256]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000c00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c04:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
 8000c08:	4b3d      	ldr	r3, [pc, #244]	; (8000d00 <HAL_FMC_MspInit+0x17c>)
 8000c0a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8000c0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  PE8   ------> FMC_D5
  PE11   ------> FMC_D8
  PH7   ------> FMC_SDCKE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A15_Pin|A14_Pin
 8000c16:	f248 1333 	movw	r3, #33075	; 0x8133
 8000c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A11_Pin|A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c30:	230c      	movs	r3, #12
 8000c32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c36:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4831      	ldr	r0, [pc, #196]	; (8000d04 <HAL_FMC_MspInit+0x180>)
 8000c3e:	f007 ff3d 	bl	8008abc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D3_Pin|D2_Pin|D0_Pin|D1_Pin
 8000c42:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000c46:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D13_Pin|D15_Pin|D14_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c56:	2303      	movs	r3, #3
 8000c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c5c:	230c      	movs	r3, #12
 8000c5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c62:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c66:	4619      	mov	r1, r3
 8000c68:	4827      	ldr	r0, [pc, #156]	; (8000d08 <HAL_FMC_MspInit+0x184>)
 8000c6a:	f007 ff27 	bl	8008abc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL0_Pin|FMC_NBL1_Pin|D9_Pin|D4_Pin
 8000c6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |D10_Pin|D11_Pin|D7_Pin|D6_Pin
                          |D12_Pin|D5_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c8e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c92:	4619      	mov	r1, r3
 8000c94:	481d      	ldr	r0, [pc, #116]	; (8000d0c <HAL_FMC_MspInit+0x188>)
 8000c96:	f007 ff11 	bl	8008abc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A1_Pin|A0_Pin|A2_Pin|A4_Pin
 8000c9a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000c9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |A3_Pin|A5_Pin|A7_Pin|SDNRAS_Pin
                          |A9_Pin|A8_Pin|A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cb4:	230c      	movs	r3, #12
 8000cb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4813      	ldr	r0, [pc, #76]	; (8000d10 <HAL_FMC_MspInit+0x18c>)
 8000cc2:	f007 fefb 	bl	8008abc <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNE1_Pin|SDNWE_Pin|SDCKE1_Pin;
 8000cc6:	23e0      	movs	r3, #224	; 0xe0
 8000cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480a      	ldr	r0, [pc, #40]	; (8000d14 <HAL_FMC_MspInit+0x190>)
 8000cec:	f007 fee6 	bl	8008abc <HAL_GPIO_Init>
 8000cf0:	e000      	b.n	8000cf4 <HAL_FMC_MspInit+0x170>
    return;
 8000cf2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000cf4:	37e0      	adds	r7, #224	; 0xe0
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	24000238 	.word	0x24000238
 8000d00:	58024400 	.word	0x58024400
 8000d04:	58021800 	.word	0x58021800
 8000d08:	58020c00 	.word	0x58020c00
 8000d0c:	58021000 	.word	0x58021000
 8000d10:	58021400 	.word	0x58021400
 8000d14:	58021c00 	.word	0x58021c00

08000d18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000d20:	f7ff ff30 	bl	8000b84 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <MX_GPIO_Init>:
     PA0   ------> I2S6_WS
     PA3   ------> I2S6_MCK
     PB2   ------> OCTOSPIM_P1_CLK
*/
void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d42:	4bc0      	ldr	r3, [pc, #768]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d48:	4abe      	ldr	r2, [pc, #760]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d52:	4bbc      	ldr	r3, [pc, #752]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d54:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d60:	4bb8      	ldr	r3, [pc, #736]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d66:	4ab7      	ldr	r2, [pc, #732]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d70:	4bb4      	ldr	r3, [pc, #720]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7e:	4bb1      	ldr	r3, [pc, #708]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d84:	4aaf      	ldr	r2, [pc, #700]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000d8e:	4bad      	ldr	r3, [pc, #692]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d98:	623b      	str	r3, [r7, #32]
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000d9c:	4ba9      	ldr	r3, [pc, #676]	; (8001044 <MX_GPIO_Init+0x318>)
 8000d9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000da2:	4aa8      	ldr	r2, [pc, #672]	; (8001044 <MX_GPIO_Init+0x318>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000da8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dac:	4ba5      	ldr	r3, [pc, #660]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dba:	4ba2      	ldr	r3, [pc, #648]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dc0:	4aa0      	ldr	r2, [pc, #640]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dc2:	f043 0308 	orr.w	r3, r3, #8
 8000dc6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000dca:	4b9e      	ldr	r3, [pc, #632]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dcc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dd0:	f003 0308 	and.w	r3, r3, #8
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd8:	4b9a      	ldr	r3, [pc, #616]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dde:	4a99      	ldr	r2, [pc, #612]	; (8001044 <MX_GPIO_Init+0x318>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000de8:	4b96      	ldr	r3, [pc, #600]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dee:	f003 0304 	and.w	r3, r3, #4
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df6:	4b93      	ldr	r3, [pc, #588]	; (8001044 <MX_GPIO_Init+0x318>)
 8000df8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000dfc:	4a91      	ldr	r2, [pc, #580]	; (8001044 <MX_GPIO_Init+0x318>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e06:	4b8f      	ldr	r3, [pc, #572]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e14:	4b8b      	ldr	r3, [pc, #556]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e16:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e1a:	4a8a      	ldr	r2, [pc, #552]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e20:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e24:	4b87      	ldr	r3, [pc, #540]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e38:	4a82      	ldr	r2, [pc, #520]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e42:	4b80      	ldr	r3, [pc, #512]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e44:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e50:	4b7c      	ldr	r3, [pc, #496]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e56:	4a7b      	ldr	r2, [pc, #492]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e58:	f043 0320 	orr.w	r3, r3, #32
 8000e5c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e60:	4b78      	ldr	r3, [pc, #480]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e62:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e6e:	4b75      	ldr	r3, [pc, #468]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e70:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e74:	4a73      	ldr	r2, [pc, #460]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e7e:	4b71      	ldr	r3, [pc, #452]	; (8001044 <MX_GPIO_Init+0x318>)
 8000e80:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e88:	603b      	str	r3, [r7, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin, GPIO_PIN_RESET);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	210e      	movs	r1, #14
 8000e90:	486d      	ldr	r0, [pc, #436]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000e92:	f008 f8cd 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USER_LED1_Pin|USER_LED2_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f640 0104 	movw	r1, #2052	; 0x804
 8000e9c:	486b      	ldr	r0, [pc, #428]	; (800104c <MX_GPIO_Init+0x320>)
 8000e9e:	f008 f8c7 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ea8:	4869      	ldr	r0, [pc, #420]	; (8001050 <MX_GPIO_Init+0x324>)
 8000eaa:	f008 f8c1 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUDIO_NRST_GPIO_Port, AUDIO_NRST_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4866      	ldr	r0, [pc, #408]	; (800104c <MX_GPIO_Init+0x320>)
 8000eb4:	f008 f8bc 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2106      	movs	r1, #6
 8000ebc:	4864      	ldr	r0, [pc, #400]	; (8001050 <MX_GPIO_Init+0x324>)
 8000ebe:	f008 f8b7 	bl	8009030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_GPIO_Pin|WIFI_DATRDY_Pin;
 8000ec2:	2330      	movs	r3, #48	; 0x30
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	485c      	ldr	r0, [pc, #368]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000ed8:	f007 fdf0 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = I2S6_SDO_Pin|I2S6_SDI_Pin|I2S6_CK_Pin;
 8000edc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8000eee:	2305      	movs	r3, #5
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4854      	ldr	r0, [pc, #336]	; (800104c <MX_GPIO_Init+0x320>)
 8000efa:	f007 fddf 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8000efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8000f10:	2309      	movs	r3, #9
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8000f14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f18:	4619      	mov	r1, r3
 8000f1a:	484c      	ldr	r0, [pc, #304]	; (800104c <MX_GPIO_Init+0x320>)
 8000f1c:	f007 fdce 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO7_Pin;
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8000f30:	230a      	movs	r3, #10
 8000f32:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO7_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4846      	ldr	r0, [pc, #280]	; (8001054 <MX_GPIO_Init+0x328>)
 8000f3c:	f007 fdbe 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 8000f40:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000f52:	230c      	movs	r3, #12
 8000f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	483e      	ldr	r0, [pc, #248]	; (8001058 <MX_GPIO_Init+0x32c>)
 8000f5e:	f007 fdad 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = WIFI_BOOT_Pin|WIFI_WKUP_Pin|WIFI_RST_Pin;
 8000f62:	230e      	movs	r3, #14
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f76:	4619      	mov	r1, r3
 8000f78:	4833      	ldr	r0, [pc, #204]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000f7a:	f007 fd9f 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USER_LED1_Pin|AUDIO_NRST_Pin|USER_LED2_Pin;
 8000f7e:	f640 030c 	movw	r3, #2060	; 0x80c
 8000f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f94:	4619      	mov	r1, r3
 8000f96:	482d      	ldr	r0, [pc, #180]	; (800104c <MX_GPIO_Init+0x320>)
 8000f98:	f007 fd90 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000fac:	230c      	movs	r3, #12
 8000fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <MX_GPIO_Init+0x328>)
 8000fb8:	f007 fd80 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	481d      	ldr	r0, [pc, #116]	; (8001048 <MX_GPIO_Init+0x31c>)
 8000fd4:	f007 fd72 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_SCK_Pin;
 8000fd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000fea:	2305      	movs	r3, #5
 8000fec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000fee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <MX_GPIO_Init+0x324>)
 8000ff6:	f007 fd61 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LCD_BL_CTRL_Pin|LCD_ON_OFF_Pin;
 8000ffa:	f640 0306 	movw	r3, #2054	; 0x806
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001000:	2301      	movs	r3, #1
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001010:	4619      	mov	r1, r3
 8001012:	480f      	ldr	r0, [pc, #60]	; (8001050 <MX_GPIO_Init+0x324>)
 8001014:	f007 fd52 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKEUP_Pin;
 8001018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800101c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800101e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102c:	4619      	mov	r1, r3
 800102e:	480a      	ldr	r0, [pc, #40]	; (8001058 <MX_GPIO_Init+0x32c>)
 8001030:	f007 fd44 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCO_Pin;
 8001034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	e00c      	b.n	800105c <MX_GPIO_Init+0x330>
 8001042:	bf00      	nop
 8001044:	58024400 	.word	0x58024400
 8001048:	58022000 	.word	0x58022000
 800104c:	58021800 	.word	0x58021800
 8001050:	58020000 	.word	0x58020000
 8001054:	58020c00 	.word	0x58020c00
 8001058:	58020800 	.word	0x58020800
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001062:	2300      	movs	r3, #0
 8001064:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MCO_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106a:	4619      	mov	r1, r3
 800106c:	4842      	ldr	r0, [pc, #264]	; (8001178 <MX_GPIO_Init+0x44c>)
 800106e:	f007 fd25 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107e:	2303      	movs	r3, #3
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001082:	230a      	movs	r3, #10
 8001084:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4619      	mov	r1, r3
 800108c:	483b      	ldr	r0, [pc, #236]	; (800117c <MX_GPIO_Init+0x450>)
 800108e:	f007 fd15 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8001092:	230c      	movs	r3, #12
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010a2:	2305      	movs	r3, #5
 80010a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010aa:	4619      	mov	r1, r3
 80010ac:	4834      	ldr	r0, [pc, #208]	; (8001180 <MX_GPIO_Init+0x454>)
 80010ae:	f007 fd05 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 80010b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b8:	2312      	movs	r3, #18
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010cc:	4619      	mov	r1, r3
 80010ce:	482d      	ldr	r0, [pc, #180]	; (8001184 <MX_GPIO_Init+0x458>)
 80010d0:	f007 fcf4 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = OCSPI1_IO4_Pin|OCSPI1_DQS_Pin;
 80010d4:	2322      	movs	r3, #34	; 0x22
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80010e4:	230a      	movs	r3, #10
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ec:	4619      	mov	r1, r3
 80010ee:	4824      	ldr	r0, [pc, #144]	; (8001180 <MX_GPIO_Init+0x454>)
 80010f0:	f007 fce4 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80010f4:	2304      	movs	r3, #4
 80010f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001106:	4619      	mov	r1, r3
 8001108:	481f      	ldr	r0, [pc, #124]	; (8001188 <MX_GPIO_Init+0x45c>)
 800110a:	f007 fcd7 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_IO5_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800111e:	2309      	movs	r3, #9
 8001120:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_IO5_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001126:	4619      	mov	r1, r3
 8001128:	4817      	ldr	r0, [pc, #92]	; (8001188 <MX_GPIO_Init+0x45c>)
 800112a:	f007 fcc7 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = I2S6_WS_Pin|I2S6_MCK_Pin;
 800112e:	2309      	movs	r3, #9
 8001130:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 800113e:	2305      	movs	r3, #5
 8001140:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001146:	4619      	mov	r1, r3
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <MX_GPIO_Init+0x44c>)
 800114a:	f007 fcb7 	bl	8008abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800114e:	2304      	movs	r3, #4
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800115e:	2309      	movs	r3, #9
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	4619      	mov	r1, r3
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <MX_GPIO_Init+0x460>)
 800116a:	f007 fca7 	bl	8008abc <HAL_GPIO_Init>

}
 800116e:	bf00      	nop
 8001170:	3740      	adds	r7, #64	; 0x40
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	58020000 	.word	0x58020000
 800117c:	58021800 	.word	0x58021800
 8001180:	58020800 	.word	0x58020800
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58021c00 	.word	0x58021c00
 800118c:	58020400 	.word	0x58020400

08001190 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	2234      	movs	r2, #52	; 0x34
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f00e fa0f 	bl	800f5c0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011a4:	4a38      	ldr	r2, [pc, #224]	; (8001288 <MX_LTDC_Init+0xf8>)
 80011a6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80011ae:	4b35      	ldr	r3, [pc, #212]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AH;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ba:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80011bc:	4b31      	ldr	r3, [pc, #196]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80011c2:	4b30      	ldr	r3, [pc, #192]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80011c8:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011d0:	220e      	movs	r2, #14
 80011d2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011d6:	2205      	movs	r2, #5
 80011d8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011dc:	f240 228e 	movw	r2, #654	; 0x28e
 80011e0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80011e2:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011e4:	f240 12e5 	movw	r2, #485	; 0x1e5
 80011e8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011ec:	f44f 7225 	mov.w	r2, #660	; 0x294
 80011f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 80011f2:	4b24      	ldr	r3, [pc, #144]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011f4:	f240 12e7 	movw	r2, #487	; 0x1e7
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <MX_LTDC_Init+0xf4>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <MX_LTDC_Init+0xf4>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800120a:	4b1e      	ldr	r3, [pc, #120]	; (8001284 <MX_LTDC_Init+0xf4>)
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_LTDC_Init+0xf4>)
 8001214:	f008 fdac 	bl	8009d70 <HAL_LTDC_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_LTDC_Init+0x92>
  {
    Error_Handler();
 800121e:	f000 fa45 	bl	80016ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001232:	2302      	movs	r3, #2
 8001234:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800123e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001242:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001244:	2305      	movs	r3, #5
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_LTDC_Init+0xf4>)
 800126e:	f008 ff11 	bl	800a094 <HAL_LTDC_ConfigLayer>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_LTDC_Init+0xec>
  {
    Error_Handler();
 8001278:	f000 fa18 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3738      	adds	r7, #56	; 0x38
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	2400023c 	.word	0x2400023c
 8001288:	50001000 	.word	0x50001000

0800128c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0bc      	sub	sp, #240	; 0xf0
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	22c0      	movs	r2, #192	; 0xc0
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00e f987 	bl	800f5c0 <memset>
  if(ltdcHandle->Instance==LTDC)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a5b      	ldr	r2, [pc, #364]	; (8001424 <HAL_LTDC_MspInit+0x198>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	f040 80ae 	bne.w	800141a <HAL_LTDC_MspInit+0x18e>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80012be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012c2:	f04f 0300 	mov.w	r3, #0
 80012c6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 24;
 80012ca:	2318      	movs	r3, #24
 80012cc:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80012ce:	23c0      	movs	r3, #192	; 0xc0
 80012d0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 17;
 80012d2:	2311      	movs	r3, #17
 80012d4:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 16;
 80012da:	2310      	movs	r3, #16
 80012dc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012de:	2300      	movs	r3, #0
 80012e0:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 5462;
 80012e6:	f241 5356 	movw	r3, #5462	; 0x1556
 80012ea:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ec:	f107 0318 	add.w	r3, r7, #24
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00a f939 	bl	800b568 <HAL_RCCEx_PeriphCLKConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80012fc:	f000 f9d6 	bl	80016ac <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001300:	4b49      	ldr	r3, [pc, #292]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001302:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001306:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001308:	f043 0308 	orr.w	r3, r3, #8
 800130c:	f8c2 3144 	str.w	r3, [r2, #324]	; 0x144
 8001310:	4b45      	ldr	r3, [pc, #276]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001312:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 800131e:	4b42      	ldr	r3, [pc, #264]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001320:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001324:	4a40      	ldr	r2, [pc, #256]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001330:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800133c:	4b3a      	ldr	r3, [pc, #232]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800133e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001342:	4a39      	ldr	r2, [pc, #228]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800134e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001352:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800135a:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800135c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001360:	4a31      	ldr	r2, [pc, #196]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800136a:	4b2f      	ldr	r3, [pc, #188]	; (8001428 <HAL_LTDC_MspInit+0x19c>)
 800136c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
    PJ1     ------> LTDC_R2
    PJ4     ------> LTDC_R5
    PJ2     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_B4_Pin|LCD_B5_Pin
 8001378:	23ff      	movs	r3, #255	; 0xff
 800137a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_DE_Pin|LCD_G7_Pin|LCD_G6_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001390:	230e      	movs	r3, #14
 8001392:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001396:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <HAL_LTDC_MspInit+0x1a0>)
 800139e:	f007 fb8d 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin|LCD_B2_Pin|LCD_B1_Pin|LCD_B0_Pin
 80013a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                          |LCD_G4_Pin|LCD_G3_Pin|LCD_G2_Pin|LCD_G1_Pin
                          |LCD_R7_Pin|LCD_G0_Pin|LCD_R1_Pin|LCD_R6_Pin
                          |LCD_R2_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013bc:	230e      	movs	r3, #14
 80013be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013c6:	4619      	mov	r1, r3
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <HAL_LTDC_MspInit+0x1a4>)
 80013ca:	f007 fb77 	bl	8008abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_CLK_Pin|LCD_VSYNC_Pin|LCD_R0_Pin;
 80013ce:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013e8:	230e      	movs	r3, #14
 80013ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013f2:	4619      	mov	r1, r3
 80013f4:	480f      	ldr	r0, [pc, #60]	; (8001434 <HAL_LTDC_MspInit+0x1a8>)
 80013f6:	f007 fb61 	bl	8008abc <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2058      	movs	r0, #88	; 0x58
 8001400:	f003 f8ed 	bl	80045de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001404:	2058      	movs	r0, #88	; 0x58
 8001406:	f003 f904 	bl	8004612 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(LTDC_ER_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	2059      	movs	r0, #89	; 0x59
 8001410:	f003 f8e5 	bl	80045de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_ER_IRQn);
 8001414:	2059      	movs	r0, #89	; 0x59
 8001416:	f003 f8fc 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800141a:	bf00      	nop
 800141c:	37f0      	adds	r7, #240	; 0xf0
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	50001000 	.word	0x50001000
 8001428:	58024400 	.word	0x58024400
 800142c:	58022800 	.word	0x58022800
 8001430:	58022400 	.word	0x58022400
 8001434:	58022000 	.word	0x58022000

08001438 <LTDC_Init_from_buffer>:
  /* USER CODE END LTDC_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void LTDC_Init_from_buffer(uint32_t* buffer){
 8001438:	b580      	push	{r7, lr}
 800143a:	b090      	sub	sp, #64	; 0x40
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2234      	movs	r2, #52	; 0x34
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f00e f8b9 	bl	800f5c0 <memset>
	pLayerCfg.WindowX0 = 28;
 800144e:	231c      	movs	r3, #28
 8001450:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = 508;
 8001452:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 8001456:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 6;
 8001458:	2306      	movs	r3, #6
 800145a:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = 278;
 800145c:	f44f 738b 	mov.w	r3, #278	; 0x116
 8001460:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001462:	2302      	movs	r3, #2
 8001464:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8001466:	23ff      	movs	r3, #255	; 0xff
 8001468:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800146e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001474:	2305      	movs	r3, #5
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.FBStartAdress = (uint32_t)buffer;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.ImageWidth = 480;
 800147c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
	pLayerCfg.ImageHeight = 272;
 8001482:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001486:	63bb      	str	r3, [r7, #56]	; 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <LTDC_Init_from_buffer+0x84>)
 80014a4:	f008 fdf6 	bl	800a094 <HAL_LTDC_ConfigLayer>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <LTDC_Init_from_buffer+0x7a>
	{
	Error_Handler();
 80014ae:	f000 f8fd 	bl	80016ac <Error_Handler>
	}
}
 80014b2:	bf00      	nop
 80014b4:	3740      	adds	r7, #64	; 0x40
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2400023c 	.word	0x2400023c

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f002 fefa 	bl	80042bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f856 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff fc2e 	bl	8000d2c <MX_GPIO_Init>
  MX_DMA_Init();
 80014d0:	f7ff fa22 	bl	8000918 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014d4:	f002 fe0a 	bl	80040ec <MX_USART1_UART_Init>
  MX_DMA2D_Init();
 80014d8:	f7ff fa3e 	bl	8000958 <MX_DMA2D_Init>
  MX_LTDC_Init();
 80014dc:	f7ff fe58 	bl	8001190 <MX_LTDC_Init>
  MX_DCMI_Init();
 80014e0:	f7ff f8d8 	bl	8000694 <MX_DCMI_Init>
  MX_RTC_Init();
 80014e4:	f001 fe40 	bl	8003168 <MX_RTC_Init>
  MX_FMC_Init();
 80014e8:	f7ff fac2 	bl	8000a70 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 80014ec:	481d      	ldr	r0, [pc, #116]	; (8001564 <main+0xa4>)
 80014ee:	f001 fd85 	bl	8002ffc <RetargetInit>


  BSP_CAMERA_PwrDown(0);
 80014f2:	2000      	movs	r0, #0
 80014f4:	f002 fb9b 	bl	8003c2e <BSP_CAMERA_PwrDown>
  if(BSP_CAMERA_Init(0, CAMERA_R480x272, CAMERA_PF_RGB565) != BSP_ERROR_NONE){
 80014f8:	2200      	movs	r2, #0
 80014fa:	2102      	movs	r1, #2
 80014fc:	2000      	movs	r0, #0
 80014fe:	f002 fae5 	bl	8003acc <BSP_CAMERA_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <main+0x4c>
	  Error_Handler();
 8001508:	f000 f8d0 	bl	80016ac <Error_Handler>
  }
  HAL_Delay(1000);
 800150c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001510:	f002 ff66 	bl	80043e0 <HAL_Delay>
//  buffer[5460] = 255;
  LTDC_Init_from_buffer((uint32_t *)LCD_BUFFER);
 8001514:	4814      	ldr	r0, [pc, #80]	; (8001568 <main+0xa8>)
 8001516:	f7ff ff8f 	bl	8001438 <LTDC_Init_from_buffer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Printing photo 1");
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <main+0xac>)
 800151c:	f00e f858 	bl	800f5d0 <iprintf>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <main+0xb0>)
 8001528:	f007 fd82 	bl	8009030 <HAL_GPIO_WritePin>
  BSP_CAMERA_Start(0, (uint8_t*)CAMERA_BUFFER, CAMERA_MODE_SNAPSHOT);
 800152c:	2202      	movs	r2, #2
 800152e:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001532:	2000      	movs	r0, #0
 8001534:	f002 fb10 	bl	8003b58 <BSP_CAMERA_Start>
  BSP_CAMERA_Stop(0);
 8001538:	2000      	movs	r0, #0
 800153a:	f002 fb47 	bl	8003bcc <BSP_CAMERA_Stop>
  HAL_GPIO_WritePin(USER_LED1_GPIO_Port, USER_LED1_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001544:	480a      	ldr	r0, [pc, #40]	; (8001570 <main+0xb0>)
 8001546:	f007 fd73 	bl	8009030 <HAL_GPIO_WritePin>

  while (1)
  {
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 800154a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <main+0xb0>)
 8001550:	f007 fd87 	bl	8009062 <HAL_GPIO_TogglePin>
	printf("siema");
 8001554:	4807      	ldr	r0, [pc, #28]	; (8001574 <main+0xb4>)
 8001556:	f00e f83b 	bl	800f5d0 <iprintf>
	HAL_Delay(1000);
 800155a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800155e:	f002 ff3f 	bl	80043e0 <HAL_Delay>
	HAL_GPIO_TogglePin(USER_LED1_GPIO_Port, USER_LED1_Pin);
 8001562:	e7f2      	b.n	800154a <main+0x8a>
 8001564:	24000dd8 	.word	0x24000dd8
 8001568:	d005fa00 	.word	0xd005fa00
 800156c:	080106a0 	.word	0x080106a0
 8001570:	58021800 	.word	0x58021800
 8001574:	080106b4 	.word	0x080106b4

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b09c      	sub	sp, #112	; 0x70
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	224c      	movs	r2, #76	; 0x4c
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f00e f81a 	bl	800f5c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2220      	movs	r2, #32
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f00e f814 	bl	800f5c0 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8001598:	4b38      	ldr	r3, [pc, #224]	; (800167c <SystemClock_Config+0x104>)
 800159a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800159e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80015a2:	2004      	movs	r0, #4
 80015a4:	f008 ff5e 	bl	800a464 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <SystemClock_Config+0x108>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a33      	ldr	r2, [pc, #204]	; (8001680 <SystemClock_Config+0x108>)
 80015b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b31      	ldr	r3, [pc, #196]	; (8001680 <SystemClock_Config+0x108>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	603b      	str	r3, [r7, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80015c4:	bf00      	nop
 80015c6:	4b2e      	ldr	r3, [pc, #184]	; (8001680 <SystemClock_Config+0x108>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015d2:	d1f8      	bne.n	80015c6 <SystemClock_Config+0x4e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015d4:	f008 ff36 	bl	800a444 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <SystemClock_Config+0x104>)
 80015da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015dc:	4a27      	ldr	r2, [pc, #156]	; (800167c <SystemClock_Config+0x104>)
 80015de:	f023 0318 	bic.w	r3, r3, #24
 80015e2:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80015e4:	2305      	movs	r3, #5
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f6:	2302      	movs	r3, #2
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80015fa:	2303      	movs	r3, #3
 80015fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 69;
 80015fe:	2345      	movs	r3, #69	; 0x45
 8001600:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001602:	2302      	movs	r3, #2
 8001604:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001606:	230c      	movs	r3, #12
 8001608:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 16;
 800160a:	2310      	movs	r3, #16
 800160c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800160e:	230c      	movs	r3, #12
 8001610:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001612:	2300      	movs	r3, #0
 8001614:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 5462;
 8001616:	f241 5356 	movw	r3, #5462	; 0x1556
 800161a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4618      	mov	r0, r3
 8001622:	f008 ff79 	bl	800a518 <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800162c:	f000 f83e 	bl	80016ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001630:	233f      	movs	r3, #63	; 0x3f
 8001632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001634:	2303      	movs	r3, #3
 8001636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001640:	2340      	movs	r3, #64	; 0x40
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001644:	2340      	movs	r3, #64	; 0x40
 8001646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800164c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800164e:	2340      	movs	r3, #64	; 0x40
 8001650:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2107      	movs	r1, #7
 8001656:	4618      	mov	r0, r3
 8001658:	f009 fb90 	bl	800ad7c <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001662:	f000 f823 	bl	80016ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001666:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800166a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 800166e:	2000      	movs	r0, #0
 8001670:	f009 fd3a 	bl	800b0e8 <HAL_RCC_MCOConfig>
}
 8001674:	bf00      	nop
 8001676:	3770      	adds	r7, #112	; 0x70
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	58024400 	.word	0x58024400
 8001680:	58024800 	.word	0x58024800

08001684 <BSP_CAMERA_FrameEventCallback>:

/* USER CODE BEGIN 4 */

void BSP_CAMERA_FrameEventCallback(uint32_t Instance){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	camera_frame_ready = 1;
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <BSP_CAMERA_FrameEventCallback+0x20>)
 800168e:	2201      	movs	r2, #1
 8001690:	601a      	str	r2, [r3, #0]
	DMA2D_Convert((uint8_t *)CAMERA_BUFFER, (uint32_t *)LCD_BUFFER);
 8001692:	4905      	ldr	r1, [pc, #20]	; (80016a8 <BSP_CAMERA_FrameEventCallback+0x24>)
 8001694:	f04f 4050 	mov.w	r0, #3489660928	; 0xd0000000
 8001698:	f7ff f9c2 	bl	8000a20 <DMA2D_Convert>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	240002e4 	.word	0x240002e4
 80016a8:	d005fa00 	.word	0xd005fa00

080016ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e02c      	b.n	800172a <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	891a      	ldrh	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	695a      	ldr	r2, [r3, #20]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0c      	ldr	r2, [pc, #48]	; (8001734 <OV5640_RegisterBusIO+0x7c>)
 8001704:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a0b      	ldr	r2, [pc, #44]	; (8001738 <OV5640_RegisterBusIO+0x80>)
 800170a:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4798      	blx	r3
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	e002      	b.n	800172a <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001728:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	08002f3b 	.word	0x08002f3b
 8001738:	08002f6d 	.word	0x08002f6d

0800173c <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001752:	2b00      	cmp	r3, #0
 8001754:	d165      	bne.n	8001822 <OV5640_Init+0xe6>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d80e      	bhi.n	800177a <OV5640_Init+0x3e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00f      	beq.n	8001782 <OV5640_Init+0x46>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d00c      	beq.n	8001782 <OV5640_Init+0x46>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d009      	beq.n	8001782 <OV5640_Init+0x46>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b07      	cmp	r3, #7
 8001772:	d006      	beq.n	8001782 <OV5640_Init+0x46>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d003      	beq.n	8001782 <OV5640_Init+0x46>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800177e:	61bb      	str	r3, [r7, #24]
 8001780:	e04f      	b.n	8001822 <OV5640_Init+0xe6>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e01f      	b.n	80017c8 <OV5640_Init+0x8c>
      {
        if (ret != OV5640_ERROR)
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800178e:	d018      	beq.n	80017c2 <OV5640_Init+0x86>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <OV5640_Init+0xf0>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	885b      	ldrh	r3, [r3, #2]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f103 0018 	add.w	r0, r3, #24
 80017a4:	4a21      	ldr	r2, [pc, #132]	; (800182c <OV5640_Init+0xf0>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80017ac:	f107 0217 	add.w	r2, r7, #23
 80017b0:	2301      	movs	r3, #1
 80017b2:	f001 fc0b 	bl	8002fcc <ov5640_write_reg>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <OV5640_Init+0x86>
          {
            ret = OV5640_ERROR;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017c0:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2bfd      	cmp	r3, #253	; 0xfd
 80017cc:	d9dc      	bls.n	8001788 <OV5640_Init+0x4c>
          }
        }
      }

      if (ret == OV5640_OK)
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d126      	bne.n	8001822 <OV5640_Init+0xe6>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f9e0 	bl	8001b9c <OV5640_SetResolution>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <OV5640_Init+0xae>
        {
          ret = OV5640_ERROR;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	e01b      	b.n	8001822 <OV5640_Init+0xe6>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	68f8      	ldr	r0, [r7, #12]
 80017ee:	f000 f833 	bl	8001858 <OV5640_SetPixelFormat>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <OV5640_Init+0xc4>
        {
          ret = OV5640_ERROR;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017fc:	61bb      	str	r3, [r7, #24]
 80017fe:	e010      	b.n	8001822 <OV5640_Init+0xe6>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8001800:	2300      	movs	r3, #0
 8001802:	2201      	movs	r2, #1
 8001804:	2101      	movs	r1, #1
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 fb64 	bl	8001ed4 <OV5640_SetPolarities>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <OV5640_Init+0xde>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001816:	61bb      	str	r3, [r7, #24]
 8001818:	e003      	b.n	8001822 <OV5640_Init+0xe6>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2201      	movs	r2, #1
 800181e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }
      }
    }
  }

  return ret;
 8001822:	69bb      	ldr	r3, [r7, #24]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	08010704 	.word	0x08010704

08001830 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800183e:	2b01      	cmp	r3, #1
 8001840:	d103      	bne.n	800184a <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return OV5640_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00f      	beq.n	800188c <OV5640_SetPixelFormat+0x34>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2b02      	cmp	r3, #2
 8001870:	d00c      	beq.n	800188c <OV5640_SetPixelFormat+0x34>
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d009      	beq.n	800188c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2b07      	cmp	r3, #7
 800187c:	d006      	beq.n	800188c <OV5640_SetPixelFormat+0x34>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	2b08      	cmp	r3, #8
 8001882:	d003      	beq.n	800188c <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8001884:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e16a      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	3b01      	subs	r3, #1
 8001890:	2b07      	cmp	r3, #7
 8001892:	f200 80c3 	bhi.w	8001a1c <OV5640_SetPixelFormat+0x1c4>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <OV5640_SetPixelFormat+0x44>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	08001915 	.word	0x08001915
 80018a0:	080018bd 	.word	0x080018bd
 80018a4:	08001a1d 	.word	0x08001a1d
 80018a8:	08001a1d 	.word	0x08001a1d
 80018ac:	08001a1d 	.word	0x08001a1d
 80018b0:	08001a1d 	.word	0x08001a1d
 80018b4:	0800196d 	.word	0x0800196d
 80018b8:	080019c5 	.word	0x080019c5
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80018bc:	2300      	movs	r3, #0
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	e024      	b.n	800190c <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018c8:	d01d      	beq.n	8001906 <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80018ca:	4aa8      	ldr	r2, [pc, #672]	; (8001b6c <OV5640_SetPixelFormat+0x314>)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	885b      	ldrh	r3, [r3, #2]
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f103 0018 	add.w	r0, r3, #24
 80018de:	4aa3      	ldr	r2, [pc, #652]	; (8001b6c <OV5640_SetPixelFormat+0x314>)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80018e6:	f107 020f 	add.w	r2, r7, #15
 80018ea:	2301      	movs	r3, #1
 80018ec:	f001 fb6e 	bl	8002fcc <ov5640_write_reg>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e003      	b.n	8001906 <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80018fe:	2101      	movs	r1, #1
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f001 fb00 	bl	8002f06 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3301      	adds	r3, #1
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d9d7      	bls.n	80018c2 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8001912:	e0af      	b.n	8001a74 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	e024      	b.n	8001964 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001920:	d01d      	beq.n	800195e <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8001922:	4a93      	ldr	r2, [pc, #588]	; (8001b70 <OV5640_SetPixelFormat+0x318>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	885b      	ldrh	r3, [r3, #2]
 800192c:	b2db      	uxtb	r3, r3
 800192e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f103 0018 	add.w	r0, r3, #24
 8001936:	4a8e      	ldr	r2, [pc, #568]	; (8001b70 <OV5640_SetPixelFormat+0x318>)
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800193e:	f107 020f 	add.w	r2, r7, #15
 8001942:	2301      	movs	r3, #1
 8001944:	f001 fb42 	bl	8002fcc <ov5640_write_reg>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 800194e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e003      	b.n	800195e <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001956:	2101      	movs	r1, #1
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f001 fad4 	bl	8002f06 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	3301      	adds	r3, #1
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d9d7      	bls.n	800191a <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800196a:	e083      	b.n	8001a74 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 800196c:	2300      	movs	r3, #0
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e024      	b.n	80019bc <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001978:	d01d      	beq.n	80019b6 <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800197a:	4a7e      	ldr	r2, [pc, #504]	; (8001b74 <OV5640_SetPixelFormat+0x31c>)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	885b      	ldrh	r3, [r3, #2]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f103 0018 	add.w	r0, r3, #24
 800198e:	4a79      	ldr	r2, [pc, #484]	; (8001b74 <OV5640_SetPixelFormat+0x31c>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001996:	f107 020f 	add.w	r2, r7, #15
 800199a:	2301      	movs	r3, #1
 800199c:	f001 fb16 	bl	8002fcc <ov5640_write_reg>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e003      	b.n	80019b6 <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80019ae:	2101      	movs	r1, #1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f001 faa8 	bl	8002f06 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	3301      	adds	r3, #1
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d9d7      	bls.n	8001972 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80019c2:	e057      	b.n	8001a74 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	e024      	b.n	8001a14 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019d0:	d01d      	beq.n	8001a0e <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80019d2:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <OV5640_SetPixelFormat+0x320>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	885b      	ldrh	r3, [r3, #2]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f103 0018 	add.w	r0, r3, #24
 80019e6:	4a64      	ldr	r2, [pc, #400]	; (8001b78 <OV5640_SetPixelFormat+0x320>)
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80019ee:	f107 020f 	add.w	r2, r7, #15
 80019f2:	2301      	movs	r3, #1
 80019f4:	f001 faea 	bl	8002fcc <ov5640_write_reg>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	e003      	b.n	8001a0e <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a06:	2101      	movs	r1, #1
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f001 fa7c 	bl	8002f06 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	3301      	adds	r3, #1
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d9d7      	bls.n	80019ca <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 8001a1a:	e02b      	b.n	8001a74 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	e024      	b.n	8001a6c <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a28:	d01d      	beq.n	8001a66 <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 8001a2a:	4a54      	ldr	r2, [pc, #336]	; (8001b7c <OV5640_SetPixelFormat+0x324>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	885b      	ldrh	r3, [r3, #2]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f103 0018 	add.w	r0, r3, #24
 8001a3e:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <OV5640_SetPixelFormat+0x324>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001a46:	f107 020f 	add.w	r2, r7, #15
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	f001 fabe 	bl	8002fcc <ov5640_write_reg>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e003      	b.n	8001a66 <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8001a5e:	2101      	movs	r1, #1
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f001 fa50 	bl	8002f06 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d9d7      	bls.n	8001a22 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8001a72:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d173      	bne.n	8001b62 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f103 0018 	add.w	r0, r3, #24
 8001a80:	f107 020f 	add.w	r2, r7, #15
 8001a84:	2301      	movs	r3, #1
 8001a86:	f643 0121 	movw	r1, #14369	; 0x3821
 8001a8a:	f001 fa88 	bl	8002f9e <ov5640_read_reg>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e062      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 8001a9c:	7bfb      	ldrb	r3, [r7, #15]
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f103 0018 	add.w	r0, r3, #24
 8001aac:	f107 020f 	add.w	r2, r7, #15
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f643 0121 	movw	r1, #14369	; 0x3821
 8001ab6:	f001 fa89 	bl	8002fcc <ov5640_write_reg>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 8001ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e04c      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0018 	add.w	r0, r3, #24
 8001ace:	f107 020f 	add.w	r2, r7, #15
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	f243 0102 	movw	r1, #12290	; 0x3002
 8001ad8:	f001 fa61 	bl	8002f9e <ov5640_read_reg>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae6:	617b      	str	r3, [r7, #20]
 8001ae8:	e03b      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	f023 031c 	bic.w	r3, r3, #28
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f103 0018 	add.w	r0, r3, #24
 8001afa:	f107 020f 	add.w	r2, r7, #15
 8001afe:	2301      	movs	r3, #1
 8001b00:	f243 0102 	movw	r1, #12290	; 0x3002
 8001b04:	f001 fa62 	bl	8002fcc <ov5640_write_reg>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	e025      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 0018 	add.w	r0, r3, #24
 8001b1c:	f107 020f 	add.w	r2, r7, #15
 8001b20:	2301      	movs	r3, #1
 8001b22:	f243 0106 	movw	r1, #12294	; 0x3006
 8001b26:	f001 fa3a 	bl	8002f9e <ov5640_read_reg>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8001b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	e014      	b.n	8001b62 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f103 0018 	add.w	r0, r3, #24
 8001b48:	f107 020f 	add.w	r2, r7, #15
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f243 0106 	movw	r1, #12294	; 0x3006
 8001b52:	f001 fa3b 	bl	8002fcc <ov5640_write_reg>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8001b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b60:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8001b62:	697b      	ldr	r3, [r7, #20]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	08010afc 	.word	0x08010afc
 8001b70:	08010b04 	.word	0x08010b04
 8001b74:	08010b0c 	.word	0x08010b0c
 8001b78:	08010b14 	.word	0x08010b14
 8001b7c:	08010b1c 	.word	0x08010b1c

08001b80 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d903      	bls.n	8001bb8 <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e0d8      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	f200 80d1 	bhi.w	8001d62 <OV5640_SetResolution+0x1c6>
 8001bc0:	a201      	add	r2, pc, #4	; (adr r2, 8001bc8 <OV5640_SetResolution+0x2c>)
 8001bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc6:	bf00      	nop
 8001bc8:	08001bdd 	.word	0x08001bdd
 8001bcc:	08001c2b 	.word	0x08001c2b
 8001bd0:	08001c79 	.word	0x08001c79
 8001bd4:	08001cc7 	.word	0x08001cc7
 8001bd8:	08001d15 	.word	0x08001d15
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	e01f      	b.n	8001c22 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001be8:	d018      	beq.n	8001c1c <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 8001bea:	4a62      	ldr	r2, [pc, #392]	; (8001d74 <OV5640_SetResolution+0x1d8>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	885b      	ldrh	r3, [r3, #2]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f103 0018 	add.w	r0, r3, #24
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <OV5640_SetResolution+0x1d8>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c06:	f107 020f 	add.w	r2, r7, #15
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	f001 f9de 	bl	8002fcc <ov5640_write_reg>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c1a:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d9dc      	bls.n	8001be2 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 8001c28:	e09f      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e01f      	b.n	8001c70 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c36:	d018      	beq.n	8001c6a <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 8001c38:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <OV5640_SetResolution+0x1dc>)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	885b      	ldrh	r3, [r3, #2]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 0018 	add.w	r0, r3, #24
 8001c4c:	4a4a      	ldr	r2, [pc, #296]	; (8001d78 <OV5640_SetResolution+0x1dc>)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001c54:	f107 020f 	add.w	r2, r7, #15
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f001 f9b7 	bl	8002fcc <ov5640_write_reg>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d002      	beq.n	8001c6a <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8001c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c68:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d9dc      	bls.n	8001c30 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 8001c76:	e078      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	e01f      	b.n	8001cbe <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c84:	d018      	beq.n	8001cb8 <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 8001c86:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <OV5640_SetResolution+0x1e0>)
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	885b      	ldrh	r3, [r3, #2]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f103 0018 	add.w	r0, r3, #24
 8001c9a:	4a38      	ldr	r2, [pc, #224]	; (8001d7c <OV5640_SetResolution+0x1e0>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001ca2:	f107 020f 	add.w	r2, r7, #15
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f001 f990 	bl	8002fcc <ov5640_write_reg>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d002      	beq.n	8001cb8 <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb6:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d9dc      	bls.n	8001c7e <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 8001cc4:	e051      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	e01f      	b.n	8001d0c <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cd2:	d018      	beq.n	8001d06 <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 8001cd4:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <OV5640_SetResolution+0x1e4>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	885b      	ldrh	r3, [r3, #2]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f103 0018 	add.w	r0, r3, #24
 8001ce8:	4a25      	ldr	r2, [pc, #148]	; (8001d80 <OV5640_SetResolution+0x1e4>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001cf0:	f107 020f 	add.w	r2, r7, #15
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f001 f969 	bl	8002fcc <ov5640_write_reg>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d04:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d9dc      	bls.n	8001ccc <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8001d12:	e02a      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	e01f      	b.n	8001d5a <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d20:	d018      	beq.n	8001d54 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8001d22:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <OV5640_SetResolution+0x1e8>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0018 	add.w	r0, r3, #24
 8001d36:	4a13      	ldr	r2, [pc, #76]	; (8001d84 <OV5640_SetResolution+0x1e8>)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8001d3e:	f107 020f 	add.w	r2, r7, #15
 8001d42:	2301      	movs	r3, #1
 8001d44:	f001 f942 	bl	8002fcc <ov5640_write_reg>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d52:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	3301      	adds	r3, #1
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d9dc      	bls.n	8001d1a <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8001d60:	e003      	b.n	8001d6a <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d66:	617b      	str	r3, [r7, #20]
        break;
 8001d68:	bf00      	nop
    }
  }

  return ret;
 8001d6a:	697b      	ldr	r3, [r7, #20]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	08010b24 	.word	0x08010b24
 8001d78:	08010b34 	.word	0x08010b34
 8001d7c:	08010b44 	.word	0x08010b44
 8001d80:	08010b54 	.word	0x08010b54
 8001d84:	08010b64 	.word	0x08010b64

08001d88 <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 0018 	add.w	r0, r3, #24
 8001d98:	f107 020f 	add.w	r2, r7, #15
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f643 0108 	movw	r1, #14344	; 0x3808
 8001da2:	f001 f8fc 	bl	8002f9e <ov5640_read_reg>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 8001dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e08a      	b.n	8001eca <OV5640_GetResolution+0x142>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0018 	add.w	r0, r3, #24
 8001dc2:	f107 020f 	add.w	r2, r7, #15
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f643 0109 	movw	r1, #14345	; 0x3809
 8001dcc:	f001 f8e7 	bl	8002f9e <ov5640_read_reg>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <OV5640_GetResolution+0x56>
    {
      ret = OV5640_ERROR;
 8001dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e075      	b.n	8001eca <OV5640_GetResolution+0x142>
    }
    else
    {
      x_size |= tmp;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	8a7b      	ldrh	r3, [r7, #18]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f103 0018 	add.w	r0, r3, #24
 8001dee:	f107 020f 	add.w	r2, r7, #15
 8001df2:	2301      	movs	r3, #1
 8001df4:	f643 010a 	movw	r1, #14346	; 0x380a
 8001df8:	f001 f8d1 	bl	8002f9e <ov5640_read_reg>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <OV5640_GetResolution+0x82>
      {
        ret = OV5640_ERROR;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	e05f      	b.n	8001eca <OV5640_GetResolution+0x142>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f103 0018 	add.w	r0, r3, #24
 8001e18:	f107 020f 	add.w	r2, r7, #15
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	f643 010b 	movw	r1, #14347	; 0x380b
 8001e22:	f001 f8bc 	bl	8002f9e <ov5640_read_reg>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <OV5640_GetResolution+0xac>
        {
          ret = OV5640_ERROR;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e04a      	b.n	8001eca <OV5640_GetResolution+0x142>
        }
        else
        {
          y_size |= tmp;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	8a3b      	ldrh	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 8001e3e:	8a7b      	ldrh	r3, [r7, #18]
 8001e40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e44:	d109      	bne.n	8001e5a <OV5640_GetResolution+0xd2>
 8001e46:	8a3b      	ldrh	r3, [r7, #16]
 8001e48:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001e4c:	d105      	bne.n	8001e5a <OV5640_GetResolution+0xd2>
          {
            *Resolution = OV5640_R800x480;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2204      	movs	r2, #4
 8001e52:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e037      	b.n	8001eca <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 8001e5a:	8a7b      	ldrh	r3, [r7, #18]
 8001e5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8001e60:	d109      	bne.n	8001e76 <OV5640_GetResolution+0xee>
 8001e62:	8a3b      	ldrh	r3, [r7, #16]
 8001e64:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001e68:	d105      	bne.n	8001e76 <OV5640_GetResolution+0xee>
          {
            *Resolution = OV5640_R640x480;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	e029      	b.n	8001eca <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8001e76:	8a7b      	ldrh	r3, [r7, #18]
 8001e78:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001e7c:	d109      	bne.n	8001e92 <OV5640_GetResolution+0x10a>
 8001e7e:	8a3b      	ldrh	r3, [r7, #16]
 8001e80:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001e84:	d105      	bne.n	8001e92 <OV5640_GetResolution+0x10a>
          {
            *Resolution = OV5640_R480x272;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e01b      	b.n	8001eca <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 8001e92:	8a7b      	ldrh	r3, [r7, #18]
 8001e94:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001e98:	d108      	bne.n	8001eac <OV5640_GetResolution+0x124>
 8001e9a:	8a3b      	ldrh	r3, [r7, #16]
 8001e9c:	2bf0      	cmp	r3, #240	; 0xf0
 8001e9e:	d105      	bne.n	8001eac <OV5640_GetResolution+0x124>
          {
            *Resolution = OV5640_R320x240;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00e      	b.n	8001eca <OV5640_GetResolution+0x142>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 8001eac:	8a7b      	ldrh	r3, [r7, #18]
 8001eae:	2ba0      	cmp	r3, #160	; 0xa0
 8001eb0:	d108      	bne.n	8001ec4 <OV5640_GetResolution+0x13c>
 8001eb2:	8a3b      	ldrh	r3, [r7, #16]
 8001eb4:	2b78      	cmp	r3, #120	; 0x78
 8001eb6:	d105      	bne.n	8001ec4 <OV5640_GetResolution+0x13c>
          {
            *Resolution = OV5640_R160x120;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e002      	b.n	8001eca <OV5640_GetResolution+0x142>
          }
          else
          {
            ret = OV5640_ERROR;
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ec8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8001eca:	697b      	ldr	r3, [r7, #20]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3718      	adds	r7, #24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d011      	beq.n	8001f10 <OV5640_SetPolarities+0x3c>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <OV5640_SetPolarities+0x24>
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10b      	bne.n	8001f10 <OV5640_SetPolarities+0x3c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <OV5640_SetPolarities+0x3c>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d006      	beq.n	8001f18 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8001f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	e01e      	b.n	8001f56 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	015b      	lsls	r3, r3, #5
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f103 0018 	add.w	r0, r3, #24
 8001f3c:	f107 0213 	add.w	r2, r7, #19
 8001f40:	2301      	movs	r3, #1
 8001f42:	f244 7140 	movw	r1, #18240	; 0x4740
 8001f46:	f001 f841 	bl	8002fcc <ov5640_write_reg>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8001f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f54:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8001f56:	697b      	ldr	r3, [r7, #20]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f103 0018 	add.w	r0, r3, #24
 8001f7a:	f107 020b 	add.w	r2, r7, #11
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f243 0108 	movw	r1, #12296	; 0x3008
 8001f84:	f001 f822 	bl	8002fcc <ov5640_write_reg>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	e032      	b.n	8001ffc <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 8001f96:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 ffb3 	bl	8002f06 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f103 0018 	add.w	r0, r3, #24
 8001fa6:	f107 020b 	add.w	r2, r7, #11
 8001faa:	2301      	movs	r3, #1
 8001fac:	f243 010a 	movw	r1, #12298	; 0x300a
 8001fb0:	f000 fff5 	bl	8002f9e <ov5640_read_reg>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	e01c      	b.n	8001ffc <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	021a      	lsls	r2, r3, #8
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f103 0018 	add.w	r0, r3, #24
 8001fd0:	f107 020b 	add.w	r2, r7, #11
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f243 010b 	movw	r1, #12299	; 0x300b
 8001fda:	f000 ffe0 	bl	8002f9e <ov5640_read_reg>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 8001fe4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e007      	b.n	8001ffc <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	7afa      	ldrb	r2, [r7, #11]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	e01f      	b.n	800205e <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
    Capabilities->Config_Resolution    = 1;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	2201      	movs	r2, #1
 8002052:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800205e:	68fb      	ldr	r3, [r7, #12]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f103 0018 	add.w	r0, r3, #24
 8002080:	f107 020f 	add.w	r2, r7, #15
 8002084:	2301      	movs	r3, #1
 8002086:	f243 4106 	movw	r1, #13318	; 0x3406
 800208a:	f000 ff9f 	bl	8002fcc <ov5640_write_reg>
 800208e:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10c      	bne.n	80020b0 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8002096:	2346      	movs	r3, #70	; 0x46
 8002098:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f103 0018 	add.w	r0, r3, #24
 80020a0:	f107 020f 	add.w	r2, r7, #15
 80020a4:	2301      	movs	r3, #1
 80020a6:	f245 1190 	movw	r1, #20880	; 0x5190
 80020aa:	f000 ff8f 	bl	8002fcc <ov5640_write_reg>
 80020ae:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d10c      	bne.n	80020d0 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 80020b6:	23f8      	movs	r3, #248	; 0xf8
 80020b8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f103 0018 	add.w	r0, r3, #24
 80020c0:	f107 020f 	add.w	r2, r7, #15
 80020c4:	2301      	movs	r3, #1
 80020c6:	f245 1191 	movw	r1, #20881	; 0x5191
 80020ca:	f000 ff7f 	bl	8002fcc <ov5640_write_reg>
 80020ce:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 80020d6:	2304      	movs	r3, #4
 80020d8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f103 0018 	add.w	r0, r3, #24
 80020e0:	f107 020f 	add.w	r2, r7, #15
 80020e4:	2301      	movs	r3, #1
 80020e6:	f245 1192 	movw	r1, #20882	; 0x5192
 80020ea:	f000 ff6f 	bl	8002fcc <ov5640_write_reg>
 80020ee:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 80db 	bne.w	80022ae <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	2b07      	cmp	r3, #7
 80020fe:	f200 80af 	bhi.w	8002260 <OV5640_SetLightMode+0x1f4>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <OV5640_SetLightMode+0x9c>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002129 	.word	0x08002129
 800210c:	08002177 	.word	0x08002177
 8002110:	08002261 	.word	0x08002261
 8002114:	08002213 	.word	0x08002213
 8002118:	08002261 	.word	0x08002261
 800211c:	08002261 	.word	0x08002261
 8002120:	08002261 	.word	0x08002261
 8002124:	080021c5 	.word	0x080021c5
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	e01f      	b.n	800216e <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002134:	d018      	beq.n	8002168 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <OV5640_SetLightMode+0x250>)
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	885b      	ldrh	r3, [r3, #2]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f103 0018 	add.w	r0, r3, #24
 800214a:	4a5c      	ldr	r2, [pc, #368]	; (80022bc <OV5640_SetLightMode+0x250>)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8002152:	f107 020f 	add.w	r2, r7, #15
 8002156:	2301      	movs	r3, #1
 8002158:	f000 ff38 	bl	8002fcc <ov5640_write_reg>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d002      	beq.n	8002168 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8002162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002166:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	3301      	adds	r3, #1
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b06      	cmp	r3, #6
 8002172:	d9dc      	bls.n	800212e <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8002174:	e09c      	b.n	80022b0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e01f      	b.n	80021bc <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002182:	d018      	beq.n	80021b6 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8002184:	4a4e      	ldr	r2, [pc, #312]	; (80022c0 <OV5640_SetLightMode+0x254>)
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	4413      	add	r3, r2
 800218c:	885b      	ldrh	r3, [r3, #2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f103 0018 	add.w	r0, r3, #24
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <OV5640_SetLightMode+0x254>)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021a0:	f107 020f 	add.w	r2, r7, #15
 80021a4:	2301      	movs	r3, #1
 80021a6:	f000 ff11 	bl	8002fcc <ov5640_write_reg>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d002      	beq.n	80021b6 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3301      	adds	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d9dc      	bls.n	800217c <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 80021c2:	e075      	b.n	80022b0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	e01f      	b.n	800220a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021d0:	d018      	beq.n	8002204 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 80021d2:	4a3c      	ldr	r2, [pc, #240]	; (80022c4 <OV5640_SetLightMode+0x258>)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	885b      	ldrh	r3, [r3, #2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0018 	add.w	r0, r3, #24
 80021e6:	4a37      	ldr	r2, [pc, #220]	; (80022c4 <OV5640_SetLightMode+0x258>)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80021ee:	f107 020f 	add.w	r2, r7, #15
 80021f2:	2301      	movs	r3, #1
 80021f4:	f000 feea 	bl	8002fcc <ov5640_write_reg>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 80021fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002202:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3301      	adds	r3, #1
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d9dc      	bls.n	80021ca <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8002210:	e04e      	b.n	80022b0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	e01f      	b.n	8002258 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221e:	d018      	beq.n	8002252 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <OV5640_SetLightMode+0x25c>)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	885b      	ldrh	r3, [r3, #2]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f103 0018 	add.w	r0, r3, #24
 8002234:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <OV5640_SetLightMode+0x25c>)
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800223c:	f107 020f 	add.w	r2, r7, #15
 8002240:	2301      	movs	r3, #1
 8002242:	f000 fec3 	bl	8002fcc <ov5640_write_reg>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002250:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	3301      	adds	r3, #1
 8002256:	613b      	str	r3, [r7, #16]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b06      	cmp	r3, #6
 800225c:	d9dc      	bls.n	8002218 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 800225e:	e027      	b.n	80022b0 <OV5640_SetLightMode+0x244>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e01f      	b.n	80022a6 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800226c:	d018      	beq.n	80022a0 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 800226e:	4a17      	ldr	r2, [pc, #92]	; (80022cc <OV5640_SetLightMode+0x260>)
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	885b      	ldrh	r3, [r3, #2]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f103 0018 	add.w	r0, r3, #24
 8002282:	4a12      	ldr	r2, [pc, #72]	; (80022cc <OV5640_SetLightMode+0x260>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800228a:	f107 020f 	add.w	r2, r7, #15
 800228e:	2301      	movs	r3, #1
 8002290:	f000 fe9c 	bl	8002fcc <ov5640_write_reg>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800229e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	3301      	adds	r3, #1
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	2b06      	cmp	r3, #6
 80022aa:	d9dc      	bls.n	8002266 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 80022ac:	e000      	b.n	80022b0 <OV5640_SetLightMode+0x244>
    }
  }
 80022ae:	bf00      	nop
  return ret;
 80022b0:	697b      	ldr	r3, [r7, #20]
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	08010b74 	.word	0x08010b74
 80022c0:	08010b90 	.word	0x08010b90
 80022c4:	08010bac 	.word	0x08010bac
 80022c8:	08010bc8 	.word	0x08010bc8
 80022cc:	08010be4 	.word	0x08010be4

080022d0 <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3b01      	subs	r3, #1
 80022de:	2b1f      	cmp	r3, #31
 80022e0:	f200 81c0 	bhi.w	8002664 <OV5640_SetColorEffect+0x394>
 80022e4:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <OV5640_SetColorEffect+0x1c>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	0800236d 	.word	0x0800236d
 80022f0:	080023f7 	.word	0x080023f7
 80022f4:	08002665 	.word	0x08002665
 80022f8:	08002481 	.word	0x08002481
 80022fc:	08002665 	.word	0x08002665
 8002300:	08002665 	.word	0x08002665
 8002304:	08002665 	.word	0x08002665
 8002308:	0800250b 	.word	0x0800250b
 800230c:	08002665 	.word	0x08002665
 8002310:	08002665 	.word	0x08002665
 8002314:	08002665 	.word	0x08002665
 8002318:	08002665 	.word	0x08002665
 800231c:	08002665 	.word	0x08002665
 8002320:	08002665 	.word	0x08002665
 8002324:	08002665 	.word	0x08002665
 8002328:	08002595 	.word	0x08002595
 800232c:	08002665 	.word	0x08002665
 8002330:	08002665 	.word	0x08002665
 8002334:	08002665 	.word	0x08002665
 8002338:	08002665 	.word	0x08002665
 800233c:	08002665 	.word	0x08002665
 8002340:	08002665 	.word	0x08002665
 8002344:	08002665 	.word	0x08002665
 8002348:	08002665 	.word	0x08002665
 800234c:	08002665 	.word	0x08002665
 8002350:	08002665 	.word	0x08002665
 8002354:	08002665 	.word	0x08002665
 8002358:	08002665 	.word	0x08002665
 800235c:	08002665 	.word	0x08002665
 8002360:	08002665 	.word	0x08002665
 8002364:	08002665 	.word	0x08002665
 8002368:	0800261d 	.word	0x0800261d
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 800236c:	23ff      	movs	r3, #255	; 0xff
 800236e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f103 0018 	add.w	r0, r3, #24
 8002376:	f107 020b 	add.w	r2, r7, #11
 800237a:	2301      	movs	r3, #1
 800237c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002380:	f000 fe24 	bl	8002fcc <ov5640_write_reg>
 8002384:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10c      	bne.n	80023a6 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 800238c:	2318      	movs	r3, #24
 800238e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0018 	add.w	r0, r3, #24
 8002396:	f107 020b 	add.w	r2, r7, #11
 800239a:	2301      	movs	r3, #1
 800239c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80023a0:	f000 fe14 	bl	8002fcc <ov5640_write_reg>
 80023a4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10c      	bne.n	80023c6 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 80023ac:	23a0      	movs	r3, #160	; 0xa0
 80023ae:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f103 0018 	add.w	r0, r3, #24
 80023b6:	f107 020b 	add.w	r2, r7, #11
 80023ba:	2301      	movs	r3, #1
 80023bc:	f245 5183 	movw	r1, #21891	; 0x5583
 80023c0:	f000 fe04 	bl	8002fcc <ov5640_write_reg>
 80023c4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10c      	bne.n	80023e6 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 80023cc:	2340      	movs	r3, #64	; 0x40
 80023ce:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f103 0018 	add.w	r0, r3, #24
 80023d6:	f107 020b 	add.w	r2, r7, #11
 80023da:	2301      	movs	r3, #1
 80023dc:	f245 5184 	movw	r1, #21892	; 0x5584
 80023e0:	f000 fdf4 	bl	8002fcc <ov5640_write_reg>
 80023e4:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 815f 	beq.w	80026ac <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80023f4:	e15a      	b.n	80026ac <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 80023f6:	23ff      	movs	r3, #255	; 0xff
 80023f8:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f103 0018 	add.w	r0, r3, #24
 8002400:	f107 020b 	add.w	r2, r7, #11
 8002404:	2301      	movs	r3, #1
 8002406:	f245 0101 	movw	r1, #20481	; 0x5001
 800240a:	f000 fddf 	bl	8002fcc <ov5640_write_reg>
 800240e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10c      	bne.n	8002430 <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8002416:	2318      	movs	r3, #24
 8002418:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 0018 	add.w	r0, r3, #24
 8002420:	f107 020b 	add.w	r2, r7, #11
 8002424:	2301      	movs	r3, #1
 8002426:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800242a:	f000 fdcf 	bl	8002fcc <ov5640_write_reg>
 800242e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f103 0018 	add.w	r0, r3, #24
 8002440:	f107 020b 	add.w	r2, r7, #11
 8002444:	2301      	movs	r3, #1
 8002446:	f245 5183 	movw	r1, #21891	; 0x5583
 800244a:	f000 fdbf 	bl	8002fcc <ov5640_write_reg>
 800244e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f103 0018 	add.w	r0, r3, #24
 8002460:	f107 020b 	add.w	r2, r7, #11
 8002464:	2301      	movs	r3, #1
 8002466:	f245 5184 	movw	r1, #21892	; 0x5584
 800246a:	f000 fdaf 	bl	8002fcc <ov5640_write_reg>
 800246e:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 811c 	beq.w	80026b0 <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8002478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800247e:	e117      	b.n	80026b0 <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8002480:	23ff      	movs	r3, #255	; 0xff
 8002482:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f103 0018 	add.w	r0, r3, #24
 800248a:	f107 020b 	add.w	r2, r7, #11
 800248e:	2301      	movs	r3, #1
 8002490:	f245 0101 	movw	r1, #20481	; 0x5001
 8002494:	f000 fd9a 	bl	8002fcc <ov5640_write_reg>
 8002498:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10c      	bne.n	80024ba <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 80024a0:	2318      	movs	r3, #24
 80024a2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0018 	add.w	r0, r3, #24
 80024aa:	f107 020b 	add.w	r2, r7, #11
 80024ae:	2301      	movs	r3, #1
 80024b0:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80024b4:	f000 fd8a 	bl	8002fcc <ov5640_write_reg>
 80024b8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10c      	bne.n	80024da <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 80024c0:	2360      	movs	r3, #96	; 0x60
 80024c2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f103 0018 	add.w	r0, r3, #24
 80024ca:	f107 020b 	add.w	r2, r7, #11
 80024ce:	2301      	movs	r3, #1
 80024d0:	f245 5183 	movw	r1, #21891	; 0x5583
 80024d4:	f000 fd7a 	bl	8002fcc <ov5640_write_reg>
 80024d8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10c      	bne.n	80024fa <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 80024e0:	2360      	movs	r3, #96	; 0x60
 80024e2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f103 0018 	add.w	r0, r3, #24
 80024ea:	f107 020b 	add.w	r2, r7, #11
 80024ee:	2301      	movs	r3, #1
 80024f0:	f245 5184 	movw	r1, #21892	; 0x5584
 80024f4:	f000 fd6a 	bl	8002fcc <ov5640_write_reg>
 80024f8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80d9 	beq.w	80026b4 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002506:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002508:	e0d4      	b.n	80026b4 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 800250a:	23ff      	movs	r3, #255	; 0xff
 800250c:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f103 0018 	add.w	r0, r3, #24
 8002514:	f107 020b 	add.w	r2, r7, #11
 8002518:	2301      	movs	r3, #1
 800251a:	f245 0101 	movw	r1, #20481	; 0x5001
 800251e:	f000 fd55 	bl	8002fcc <ov5640_write_reg>
 8002522:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 800252a:	2318      	movs	r3, #24
 800252c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0018 	add.w	r0, r3, #24
 8002534:	f107 020b 	add.w	r2, r7, #11
 8002538:	2301      	movs	r3, #1
 800253a:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 800253e:	f000 fd45 	bl	8002fcc <ov5640_write_reg>
 8002542:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10c      	bne.n	8002564 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f103 0018 	add.w	r0, r3, #24
 8002554:	f107 020b 	add.w	r2, r7, #11
 8002558:	2301      	movs	r3, #1
 800255a:	f245 5183 	movw	r1, #21891	; 0x5583
 800255e:	f000 fd35 	bl	8002fcc <ov5640_write_reg>
 8002562:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f103 0018 	add.w	r0, r3, #24
 8002574:	f107 020b 	add.w	r2, r7, #11
 8002578:	2301      	movs	r3, #1
 800257a:	f245 5184 	movw	r1, #21892	; 0x5584
 800257e:	f000 fd25 	bl	8002fcc <ov5640_write_reg>
 8002582:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 8096 	beq.w	80026b8 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 800258c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002590:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002592:	e091      	b.n	80026b8 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8002594:	23ff      	movs	r3, #255	; 0xff
 8002596:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0018 	add.w	r0, r3, #24
 800259e:	f107 020b 	add.w	r2, r7, #11
 80025a2:	2301      	movs	r3, #1
 80025a4:	f245 0101 	movw	r1, #20481	; 0x5001
 80025a8:	f000 fd10 	bl	8002fcc <ov5640_write_reg>
 80025ac:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10c      	bne.n	80025ce <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 80025b4:	2318      	movs	r3, #24
 80025b6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 0018 	add.w	r0, r3, #24
 80025be:	f107 020b 	add.w	r2, r7, #11
 80025c2:	2301      	movs	r3, #1
 80025c4:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80025c8:	f000 fd00 	bl	8002fcc <ov5640_write_reg>
 80025cc:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10c      	bne.n	80025ee <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 80025d4:	2340      	movs	r3, #64	; 0x40
 80025d6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 0018 	add.w	r0, r3, #24
 80025de:	f107 020b 	add.w	r2, r7, #11
 80025e2:	2301      	movs	r3, #1
 80025e4:	f245 5183 	movw	r1, #21891	; 0x5583
 80025e8:	f000 fcf0 	bl	8002fcc <ov5640_write_reg>
 80025ec:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10c      	bne.n	800260e <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 80025f4:	23a0      	movs	r3, #160	; 0xa0
 80025f6:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f103 0018 	add.w	r0, r3, #24
 80025fe:	f107 020b 	add.w	r2, r7, #11
 8002602:	2301      	movs	r3, #1
 8002604:	f245 5184 	movw	r1, #21892	; 0x5584
 8002608:	f000 fce0 	bl	8002fcc <ov5640_write_reg>
 800260c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d053      	beq.n	80026bc <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002618:	60fb      	str	r3, [r7, #12]
      }
      break;
 800261a:	e04f      	b.n	80026bc <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 800261c:	23ff      	movs	r3, #255	; 0xff
 800261e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f103 0018 	add.w	r0, r3, #24
 8002626:	f107 020b 	add.w	r2, r7, #11
 800262a:	2301      	movs	r3, #1
 800262c:	f245 0101 	movw	r1, #20481	; 0x5001
 8002630:	f000 fccc 	bl	8002fcc <ov5640_write_reg>
 8002634:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10c      	bne.n	8002656 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f103 0018 	add.w	r0, r3, #24
 8002646:	f107 020b 	add.w	r2, r7, #11
 800264a:	2301      	movs	r3, #1
 800264c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002650:	f000 fcbc 	bl	8002fcc <ov5640_write_reg>
 8002654:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d031      	beq.n	80026c0 <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 800265c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002660:	60fb      	str	r3, [r7, #12]
      }
      break;
 8002662:	e02d      	b.n	80026c0 <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8002664:	237f      	movs	r3, #127	; 0x7f
 8002666:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f103 0018 	add.w	r0, r3, #24
 800266e:	f107 020b 	add.w	r2, r7, #11
 8002672:	2301      	movs	r3, #1
 8002674:	f245 0101 	movw	r1, #20481	; 0x5001
 8002678:	f000 fca8 	bl	8002fcc <ov5640_write_reg>
 800267c:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8002684:	2300      	movs	r3, #0
 8002686:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0018 	add.w	r0, r3, #24
 800268e:	f107 020b 	add.w	r2, r7, #11
 8002692:	2301      	movs	r3, #1
 8002694:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002698:	f000 fc98 	bl	8002fcc <ov5640_write_reg>
 800269c:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00f      	beq.n	80026c4 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a8:	60fb      	str	r3, [r7, #12]
      }

      break;
 80026aa:	e00b      	b.n	80026c4 <OV5640_SetColorEffect+0x3f4>
      break;
 80026ac:	bf00      	nop
 80026ae:	e00a      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026b0:	bf00      	nop
 80026b2:	e008      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026b4:	bf00      	nop
 80026b6:	e006      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026b8:	bf00      	nop
 80026ba:	e004      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026bc:	bf00      	nop
 80026be:	e002      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026c0:	bf00      	nop
 80026c2:	e000      	b.n	80026c6 <OV5640_SetColorEffect+0x3f6>
      break;
 80026c4:	bf00      	nop
  }

  return ret;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80026da:	4a34      	ldr	r2, [pc, #208]	; (80027ac <OV5640_SetBrightness+0xdc>)
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026e2:	c303      	stmia	r3!, {r0, r1}
 80026e4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80026e6:	23ff      	movs	r3, #255	; 0xff
 80026e8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f103 0018 	add.w	r0, r3, #24
 80026f0:	f107 020f 	add.w	r2, r7, #15
 80026f4:	2301      	movs	r3, #1
 80026f6:	f245 0101 	movw	r1, #20481	; 0x5001
 80026fa:	f000 fc67 	bl	8002fcc <ov5640_write_reg>
 80026fe:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d111      	bne.n	800272a <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3304      	adds	r3, #4
 800270a:	3320      	adds	r3, #32
 800270c:	443b      	add	r3, r7
 800270e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002712:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f103 0018 	add.w	r0, r3, #24
 800271a:	f107 020f 	add.w	r2, r7, #15
 800271e:	2301      	movs	r3, #1
 8002720:	f245 5187 	movw	r1, #21895	; 0x5587
 8002724:	f000 fc52 	bl	8002fcc <ov5640_write_reg>
 8002728:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10c      	bne.n	800274a <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 8002730:	2304      	movs	r3, #4
 8002732:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0018 	add.w	r0, r3, #24
 800273a:	f107 020f 	add.w	r2, r7, #15
 800273e:	2301      	movs	r3, #1
 8002740:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002744:	f000 fc42 	bl	8002fcc <ov5640_write_reg>
 8002748:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d127      	bne.n	80027a0 <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	da12      	bge.n	800277c <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f103 0018 	add.w	r0, r3, #24
 8002760:	f107 020f 	add.w	r2, r7, #15
 8002764:	2301      	movs	r3, #1
 8002766:	f245 5188 	movw	r1, #21896	; 0x5588
 800276a:	f000 fc2f 	bl	8002fcc <ov5640_write_reg>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8002774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002778:	61fb      	str	r3, [r7, #28]
 800277a:	e011      	b.n	80027a0 <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 800277c:	2309      	movs	r3, #9
 800277e:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f103 0018 	add.w	r0, r3, #24
 8002786:	f107 020f 	add.w	r2, r7, #15
 800278a:	2301      	movs	r3, #1
 800278c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002790:	f000 fc1c 	bl	8002fcc <ov5640_write_reg>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 800279a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80027a0:	69fb      	ldr	r3, [r7, #28]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3720      	adds	r7, #32
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	080106bc 	.word	0x080106bc

080027b0 <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80027ba:	4a30      	ldr	r2, [pc, #192]	; (800287c <OV5640_SetSaturation+0xcc>)
 80027bc:	f107 0310 	add.w	r3, r7, #16
 80027c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80027c2:	c303      	stmia	r3!, {r0, r1}
 80027c4:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80027c6:	23ff      	movs	r3, #255	; 0xff
 80027c8:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f103 0018 	add.w	r0, r3, #24
 80027d0:	f107 020f 	add.w	r2, r7, #15
 80027d4:	2301      	movs	r3, #1
 80027d6:	f245 0101 	movw	r1, #20481	; 0x5001
 80027da:	f000 fbf7 	bl	8002fcc <ov5640_write_reg>
 80027de:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d111      	bne.n	800280a <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3304      	adds	r3, #4
 80027ea:	3320      	adds	r3, #32
 80027ec:	443b      	add	r3, r7
 80027ee:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027f2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f103 0018 	add.w	r0, r3, #24
 80027fa:	f107 020f 	add.w	r2, r7, #15
 80027fe:	2301      	movs	r3, #1
 8002800:	f245 5183 	movw	r1, #21891	; 0x5583
 8002804:	f000 fbe2 	bl	8002fcc <ov5640_write_reg>
 8002808:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f103 0018 	add.w	r0, r3, #24
 8002816:	f107 020f 	add.w	r2, r7, #15
 800281a:	2301      	movs	r3, #1
 800281c:	f245 5184 	movw	r1, #21892	; 0x5584
 8002820:	f000 fbd4 	bl	8002fcc <ov5640_write_reg>
 8002824:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10c      	bne.n	8002846 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 800282c:	2302      	movs	r3, #2
 800282e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0018 	add.w	r0, r3, #24
 8002836:	f107 020f 	add.w	r2, r7, #15
 800283a:	2301      	movs	r3, #1
 800283c:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 8002840:	f000 fbc4 	bl	8002fcc <ov5640_write_reg>
 8002844:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 800284c:	2341      	movs	r3, #65	; 0x41
 800284e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0018 	add.w	r0, r3, #24
 8002856:	f107 020f 	add.w	r2, r7, #15
 800285a:	2301      	movs	r3, #1
 800285c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002860:	f000 fbb4 	bl	8002fcc <ov5640_write_reg>
 8002864:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 800286c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002870:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002872:	69fb      	ldr	r3, [r7, #28]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	080106c8 	.word	0x080106c8

08002880 <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <OV5640_SetContrast+0xcc>)
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	ca07      	ldmia	r2, {r0, r1, r2}
 8002892:	c303      	stmia	r3!, {r0, r1}
 8002894:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 8002896:	23ff      	movs	r3, #255	; 0xff
 8002898:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0018 	add.w	r0, r3, #24
 80028a0:	f107 020f 	add.w	r2, r7, #15
 80028a4:	2301      	movs	r3, #1
 80028a6:	f245 0101 	movw	r1, #20481	; 0x5001
 80028aa:	f000 fb8f 	bl	8002fcc <ov5640_write_reg>
 80028ae:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80028b6:	2304      	movs	r3, #4
 80028b8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f103 0018 	add.w	r0, r3, #24
 80028c0:	f107 020f 	add.w	r2, r7, #15
 80028c4:	2301      	movs	r3, #1
 80028c6:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80028ca:	f000 fb7f 	bl	8002fcc <ov5640_write_reg>
 80028ce:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d111      	bne.n	80028fa <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	3304      	adds	r3, #4
 80028da:	3320      	adds	r3, #32
 80028dc:	443b      	add	r3, r7
 80028de:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80028e2:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f103 0018 	add.w	r0, r3, #24
 80028ea:	f107 020f 	add.w	r2, r7, #15
 80028ee:	2301      	movs	r3, #1
 80028f0:	f245 5186 	movw	r1, #21894	; 0x5586
 80028f4:	f000 fb6a 	bl	8002fcc <ov5640_write_reg>
 80028f8:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f103 0018 	add.w	r0, r3, #24
 8002906:	f107 020f 	add.w	r2, r7, #15
 800290a:	2301      	movs	r3, #1
 800290c:	f245 5185 	movw	r1, #21893	; 0x5585
 8002910:	f000 fb5c 	bl	8002fcc <ov5640_write_reg>
 8002914:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10c      	bne.n	8002936 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 800291c:	2341      	movs	r3, #65	; 0x41
 800291e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f103 0018 	add.w	r0, r3, #24
 8002926:	f107 020f 	add.w	r2, r7, #15
 800292a:	2301      	movs	r3, #1
 800292c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002930:	f000 fb4c 	bl	8002fcc <ov5640_write_reg>
 8002934:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002940:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002942:	69fb      	ldr	r3, [r7, #28]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3720      	adds	r7, #32
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	080106d4 	.word	0x080106d4

08002950 <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b08e      	sub	sp, #56	; 0x38
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 800295a:	4a3c      	ldr	r2, [pc, #240]	; (8002a4c <OV5640_SetHueDegree+0xfc>)
 800295c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002960:	ca07      	ldmia	r2, {r0, r1, r2}
 8002962:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8002966:	4a3a      	ldr	r2, [pc, #232]	; (8002a50 <OV5640_SetHueDegree+0x100>)
 8002968:	f107 031c 	add.w	r3, r7, #28
 800296c:	ca07      	ldmia	r2, {r0, r1, r2}
 800296e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 8002972:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <OV5640_SetHueDegree+0x104>)
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	ca07      	ldmia	r2, {r0, r1, r2}
 800297a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 800297e:	23ff      	movs	r3, #255	; 0xff
 8002980:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f103 0018 	add.w	r0, r3, #24
 8002988:	f107 020f 	add.w	r2, r7, #15
 800298c:	2301      	movs	r3, #1
 800298e:	f245 0101 	movw	r1, #20481	; 0x5001
 8002992:	f000 fb1b 	bl	8002fcc <ov5640_write_reg>
 8002996:	6378      	str	r0, [r7, #52]	; 0x34

  if (ret == OV5640_OK)
 8002998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10c      	bne.n	80029b8 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f103 0018 	add.w	r0, r3, #24
 80029a8:	f107 020f 	add.w	r2, r7, #15
 80029ac:	2301      	movs	r3, #1
 80029ae:	f44f 41ab 	mov.w	r1, #21888	; 0x5580
 80029b2:	f000 fb0b 	bl	8002fcc <ov5640_write_reg>
 80029b6:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80029b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d111      	bne.n	80029e2 <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	3306      	adds	r3, #6
 80029c2:	3338      	adds	r3, #56	; 0x38
 80029c4:	443b      	add	r3, r7
 80029c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80029ca:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f103 0018 	add.w	r0, r3, #24
 80029d2:	f107 020f 	add.w	r2, r7, #15
 80029d6:	2301      	movs	r3, #1
 80029d8:	f245 5181 	movw	r1, #21889	; 0x5581
 80029dc:	f000 faf6 	bl	8002fcc <ov5640_write_reg>
 80029e0:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d111      	bne.n	8002a0c <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	3306      	adds	r3, #6
 80029ec:	3338      	adds	r3, #56	; 0x38
 80029ee:	443b      	add	r3, r7
 80029f0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80029f4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f103 0018 	add.w	r0, r3, #24
 80029fc:	f107 020f 	add.w	r2, r7, #15
 8002a00:	2301      	movs	r3, #1
 8002a02:	f245 5182 	movw	r1, #21890	; 0x5582
 8002a06:	f000 fae1 	bl	8002fcc <ov5640_write_reg>
 8002a0a:	6378      	str	r0, [r7, #52]	; 0x34
  }
  if (ret == OV5640_OK)
 8002a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d111      	bne.n	8002a36 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	3306      	adds	r3, #6
 8002a16:	3338      	adds	r3, #56	; 0x38
 8002a18:	443b      	add	r3, r7
 8002a1a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a1e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0018 	add.w	r0, r3, #24
 8002a26:	f107 020f 	add.w	r2, r7, #15
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f245 5188 	movw	r1, #21896	; 0x5588
 8002a30:	f000 facc 	bl	8002fcc <ov5640_write_reg>
 8002a34:	6378      	str	r0, [r7, #52]	; 0x34
  }

  if (ret != OV5640_OK)
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d002      	beq.n	8002a42 <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8002a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a40:	637b      	str	r3, [r7, #52]	; 0x34
  }

  return ret;
 8002a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3738      	adds	r7, #56	; 0x38
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	080106e0 	.word	0x080106e0
 8002a50:	080106ec 	.word	0x080106ec
 8002a54:	080106f8 	.word	0x080106f8

08002a58 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f103 0018 	add.w	r0, r3, #24
 8002a6c:	f107 020b 	add.w	r2, r7, #11
 8002a70:	2301      	movs	r3, #1
 8002a72:	f643 0120 	movw	r1, #14368	; 0x3820
 8002a76:	f000 fa92 	bl	8002f9e <ov5640_read_reg>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	e0cb      	b.n	8002c20 <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	f023 0306 	bic.w	r3, r3, #6
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f103 0018 	add.w	r0, r3, #24
 8002a98:	f107 020a 	add.w	r2, r7, #10
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	f643 0121 	movw	r1, #14369	; 0x3821
 8002aa2:	f000 fa7c 	bl	8002f9e <ov5640_read_reg>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 8002aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e0b5      	b.n	8002c20 <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 8002ab8:	7abb      	ldrb	r3, [r7, #10]
 8002aba:	f023 0306 	bic.w	r3, r3, #6
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d056      	beq.n	8002b76 <OV5640_MirrorFlipConfig+0x11e>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d87f      	bhi.n	8002bce <OV5640_MirrorFlipConfig+0x176>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d029      	beq.n	8002b28 <OV5640_MirrorFlipConfig+0xd0>
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d179      	bne.n	8002bce <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f103 0018 	add.w	r0, r3, #24
 8002ae0:	f107 020b 	add.w	r2, r7, #11
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	f643 0120 	movw	r1, #14368	; 0x3820
 8002aea:	f000 fa6f 	bl	8002fcc <ov5640_write_reg>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8002af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002afa:	e08a      	b.n	8002c12 <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8002afc:	7abb      	ldrb	r3, [r7, #10]
 8002afe:	f043 0306 	orr.w	r3, r3, #6
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f103 0018 	add.w	r0, r3, #24
 8002b0c:	f107 020a 	add.w	r2, r7, #10
 8002b10:	2301      	movs	r3, #1
 8002b12:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b16:	f000 fa59 	bl	8002fcc <ov5640_write_reg>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d078      	beq.n	8002c12 <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 8002b20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b24:	60fb      	str	r3, [r7, #12]
          break;
 8002b26:	e074      	b.n	8002c12 <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8002b28:	7afb      	ldrb	r3, [r7, #11]
 8002b2a:	f043 0306 	orr.w	r3, r3, #6
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f103 0018 	add.w	r0, r3, #24
 8002b38:	f107 020b 	add.w	r2, r7, #11
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b42:	f000 fa43 	bl	8002fcc <ov5640_write_reg>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8002b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b50:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002b52:	e060      	b.n	8002c16 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f103 0018 	add.w	r0, r3, #24
 8002b5a:	f107 020a 	add.w	r2, r7, #10
 8002b5e:	2301      	movs	r3, #1
 8002b60:	f643 0121 	movw	r1, #14369	; 0x3821
 8002b64:	f000 fa32 	bl	8002fcc <ov5640_write_reg>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d053      	beq.n	8002c16 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b72:	60fb      	str	r3, [r7, #12]
          break;
 8002b74:	e04f      	b.n	8002c16 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8002b76:	7afb      	ldrb	r3, [r7, #11]
 8002b78:	f043 0306 	orr.w	r3, r3, #6
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f103 0018 	add.w	r0, r3, #24
 8002b86:	f107 020b 	add.w	r2, r7, #11
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f643 0120 	movw	r1, #14368	; 0x3820
 8002b90:	f000 fa1c 	bl	8002fcc <ov5640_write_reg>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 8002b9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b9e:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002ba0:	e03b      	b.n	8002c1a <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 8002ba2:	7abb      	ldrb	r3, [r7, #10]
 8002ba4:	f043 0306 	orr.w	r3, r3, #6
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f103 0018 	add.w	r0, r3, #24
 8002bb2:	f107 020a 	add.w	r2, r7, #10
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f643 0121 	movw	r1, #14369	; 0x3821
 8002bbc:	f000 fa06 	bl	8002fcc <ov5640_write_reg>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d029      	beq.n	8002c1a <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 8002bc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bca:	60fb      	str	r3, [r7, #12]
          break;
 8002bcc:	e025      	b.n	8002c1a <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f103 0018 	add.w	r0, r3, #24
 8002bd4:	f107 020b 	add.w	r2, r7, #11
 8002bd8:	2301      	movs	r3, #1
 8002bda:	f643 0120 	movw	r1, #14368	; 0x3820
 8002bde:	f000 f9f5 	bl	8002fcc <ov5640_write_reg>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bec:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8002bee:	e016      	b.n	8002c1e <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f103 0018 	add.w	r0, r3, #24
 8002bf6:	f107 020a 	add.w	r2, r7, #10
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	f643 0121 	movw	r1, #14369	; 0x3821
 8002c00:	f000 f9e4 	bl	8002fcc <ov5640_write_reg>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c0e:	60fb      	str	r3, [r7, #12]
          break;
 8002c10:	e005      	b.n	8002c1e <OV5640_MirrorFlipConfig+0x1c6>
          break;
 8002c12:	bf00      	nop
 8002c14:	e004      	b.n	8002c20 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8002c1e:	bf00      	nop
      }
    }
  }

  return ret;
 8002c20:	68fb      	ldr	r3, [r7, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff f8a2 	bl	8001d88 <OV5640_GetResolution>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8002c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e04e      	b.n	8002cf0 <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b44      	cmp	r3, #68	; 0x44
 8002c5a:	d112      	bne.n	8002c82 <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8002c5c:	2310      	movs	r3, #16
 8002c5e:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0018 	add.w	r0, r3, #24
 8002c66:	f107 020b 	add.w	r2, r7, #11
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002c70:	f000 f9ac 	bl	8002fcc <ov5640_write_reg>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03a      	beq.n	8002cf0 <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8002c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e036      	b.n	8002cf0 <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d802      	bhi.n	8002c8e <OV5640_ZoomConfig+0x64>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8002c8c:	e00a      	b.n	8002ca4 <OV5640_ZoomConfig+0x7a>
      switch (res)
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d004      	beq.n	8002c9c <OV5640_ZoomConfig+0x72>
          break;
 8002c92:	e007      	b.n	8002ca4 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	085b      	lsrs	r3, r3, #1
 8002c98:	613b      	str	r3, [r7, #16]
          break;
 8002c9a:	e003      	b.n	8002ca4 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	089b      	lsrs	r3, r3, #2
 8002ca0:	613b      	str	r3, [r7, #16]
          break;
 8002ca2:	bf00      	nop
      }

      tmp = 0x00;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0018 	add.w	r0, r3, #24
 8002cae:	f107 020b 	add.w	r2, r7, #11
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f44f 41ac 	mov.w	r1, #22016	; 0x5600
 8002cb8:	f000 f988 	bl	8002fcc <ov5640_write_reg>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d003      	beq.n	8002cca <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e012      	b.n	8002cf0 <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f103 0018 	add.w	r0, r3, #24
 8002cd6:	f107 020b 	add.w	r2, r7, #11
 8002cda:	2301      	movs	r3, #1
 8002cdc:	f245 6101 	movw	r1, #22017	; 0x5601
 8002ce0:	f000 f974 	bl	8002fcc <ov5640_write_reg>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002cf0:	697b      	ldr	r3, [r7, #20]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	f040 80ce 	bne.w	8002eac <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f103 0018 	add.w	r0, r3, #24
 8002d16:	f107 020b 	add.w	r2, r7, #11
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	f243 0138 	movw	r1, #12344	; 0x3038
 8002d20:	f000 f954 	bl	8002fcc <ov5640_write_reg>
 8002d24:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d10a      	bne.n	8002d42 <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f103 0018 	add.w	r0, r3, #24
 8002d32:	f107 020b 	add.w	r2, r7, #11
 8002d36:	2301      	movs	r3, #1
 8002d38:	f243 0139 	movw	r1, #12345	; 0x3039
 8002d3c:	f000 f946 	bl	8002fcc <ov5640_write_reg>
 8002d40:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d10c      	bne.n	8002d62 <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8002d48:	237c      	movs	r3, #124	; 0x7c
 8002d4a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0018 	add.w	r0, r3, #24
 8002d52:	f107 020b 	add.w	r2, r7, #11
 8002d56:	2301      	movs	r3, #1
 8002d58:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002d5c:	f000 f936 	bl	8002fcc <ov5640_write_reg>
 8002d60:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10c      	bne.n	8002d82 <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f103 0018 	add.w	r0, r3, #24
 8002d72:	f107 020b 	add.w	r2, r7, #11
 8002d76:	2301      	movs	r3, #1
 8002d78:	f643 2108 	movw	r1, #14856	; 0x3a08
 8002d7c:	f000 f926 	bl	8002fcc <ov5640_write_reg>
 8002d80:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8002d88:	2327      	movs	r3, #39	; 0x27
 8002d8a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f103 0018 	add.w	r0, r3, #24
 8002d92:	f107 020b 	add.w	r2, r7, #11
 8002d96:	2301      	movs	r3, #1
 8002d98:	f643 2109 	movw	r1, #14857	; 0x3a09
 8002d9c:	f000 f916 	bl	8002fcc <ov5640_write_reg>
 8002da0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10c      	bne.n	8002dc2 <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 8002da8:	2300      	movs	r3, #0
 8002daa:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f103 0018 	add.w	r0, r3, #24
 8002db2:	f107 020b 	add.w	r2, r7, #11
 8002db6:	2301      	movs	r3, #1
 8002db8:	f643 210a 	movw	r1, #14858	; 0x3a0a
 8002dbc:	f000 f906 	bl	8002fcc <ov5640_write_reg>
 8002dc0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10c      	bne.n	8002de2 <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 8002dc8:	23f6      	movs	r3, #246	; 0xf6
 8002dca:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0018 	add.w	r0, r3, #24
 8002dd2:	f107 020b 	add.w	r2, r7, #11
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f643 210b 	movw	r1, #14859	; 0x3a0b
 8002ddc:	f000 f8f6 	bl	8002fcc <ov5640_write_reg>
 8002de0:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10c      	bne.n	8002e02 <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 8002de8:	2304      	movs	r3, #4
 8002dea:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0018 	add.w	r0, r3, #24
 8002df2:	f107 020b 	add.w	r2, r7, #11
 8002df6:	2301      	movs	r3, #1
 8002df8:	f643 210d 	movw	r1, #14861	; 0x3a0d
 8002dfc:	f000 f8e6 	bl	8002fcc <ov5640_write_reg>
 8002e00:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0018 	add.w	r0, r3, #24
 8002e0e:	f107 020b 	add.w	r2, r7, #11
 8002e12:	2301      	movs	r3, #1
 8002e14:	f643 210e 	movw	r1, #14862	; 0x3a0e
 8002e18:	f000 f8d8 	bl	8002fcc <ov5640_write_reg>
 8002e1c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10c      	bne.n	8002e3e <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8002e24:	230b      	movs	r3, #11
 8002e26:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f103 0018 	add.w	r0, r3, #24
 8002e2e:	f107 020b 	add.w	r2, r7, #11
 8002e32:	2301      	movs	r3, #1
 8002e34:	f643 2102 	movw	r1, #14850	; 0x3a02
 8002e38:	f000 f8c8 	bl	8002fcc <ov5640_write_reg>
 8002e3c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10c      	bne.n	8002e5e <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8002e44:	2388      	movs	r3, #136	; 0x88
 8002e46:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f103 0018 	add.w	r0, r3, #24
 8002e4e:	f107 020b 	add.w	r2, r7, #11
 8002e52:	2301      	movs	r3, #1
 8002e54:	f643 2103 	movw	r1, #14851	; 0x3a03
 8002e58:	f000 f8b8 	bl	8002fcc <ov5640_write_reg>
 8002e5c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10c      	bne.n	8002e7e <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8002e64:	230b      	movs	r3, #11
 8002e66:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0018 	add.w	r0, r3, #24
 8002e6e:	f107 020b 	add.w	r2, r7, #11
 8002e72:	2301      	movs	r3, #1
 8002e74:	f643 2114 	movw	r1, #14868	; 0x3a14
 8002e78:	f000 f8a8 	bl	8002fcc <ov5640_write_reg>
 8002e7c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10c      	bne.n	8002e9e <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8002e84:	2388      	movs	r3, #136	; 0x88
 8002e86:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f103 0018 	add.w	r0, r3, #24
 8002e8e:	f107 020b 	add.w	r2, r7, #11
 8002e92:	2301      	movs	r3, #1
 8002e94:	f643 2115 	movw	r1, #14869	; 0x3a15
 8002e98:	f000 f898 	bl	8002fcc <ov5640_write_reg>
 8002e9c:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d02b      	beq.n	8002efc <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	e027      	b.n	8002efc <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f103 0018 	add.w	r0, r3, #24
 8002eb2:	f107 020b 	add.w	r2, r7, #11
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002ebc:	f000 f86f 	bl	8002f9e <ov5640_read_reg>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d003      	beq.n	8002ece <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e016      	b.n	8002efc <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 8002ed2:	7afb      	ldrb	r3, [r7, #11]
 8002ed4:	f023 0304 	bic.w	r3, r3, #4
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f103 0018 	add.w	r0, r3, #24
 8002ee2:	f107 020b 	add.w	r2, r7, #11
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f44f 5168 	mov.w	r1, #14848	; 0x3a00
 8002eec:	f000 f86e 	bl	8002fcc <ov5640_write_reg>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002efa:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8002efc:	68fb      	ldr	r3, [r7, #12]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
 8002f0e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	4798      	blx	r3
 8002f16:	4603      	mov	r3, r0
 8002f18:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8002f1a:	bf00      	nop
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	4798      	blx	r3
 8002f22:	4603      	mov	r3, r0
 8002f24:	461a      	mov	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	683a      	ldr	r2, [r7, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8f5      	bhi.n	8002f1c <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f3a:	b590      	push	{r4, r7, lr}
 8002f3c:	b087      	sub	sp, #28
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	607a      	str	r2, [r7, #4]
 8002f44:	461a      	mov	r2, r3
 8002f46:	460b      	mov	r3, r1
 8002f48:	817b      	strh	r3, [r7, #10]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	691c      	ldr	r4, [r3, #16]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	8918      	ldrh	r0, [r3, #8]
 8002f5a:	893b      	ldrh	r3, [r7, #8]
 8002f5c:	8979      	ldrh	r1, [r7, #10]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	47a0      	blx	r4
 8002f62:	4603      	mov	r3, r0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd90      	pop	{r4, r7, pc}

08002f6c <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002f6c:	b590      	push	{r4, r7, lr}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	461a      	mov	r2, r3
 8002f78:	460b      	mov	r3, r1
 8002f7a:	817b      	strh	r3, [r7, #10]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	68dc      	ldr	r4, [r3, #12]
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	8918      	ldrh	r0, [r3, #8]
 8002f8c:	893b      	ldrh	r3, [r7, #8]
 8002f8e:	8979      	ldrh	r1, [r7, #10]
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	47a0      	blx	r4
 8002f94:	4603      	mov	r3, r0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}

08002f9e <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002f9e:	b590      	push	{r4, r7, lr}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	460b      	mov	r3, r1
 8002fac:	817b      	strh	r3, [r7, #10]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	685c      	ldr	r4, [r3, #4]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6898      	ldr	r0, [r3, #8]
 8002fba:	893b      	ldrh	r3, [r7, #8]
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	47a0      	blx	r4
 8002fc2:	4603      	mov	r3, r0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}

08002fcc <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8002fcc:	b590      	push	{r4, r7, lr}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	607a      	str	r2, [r7, #4]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	460b      	mov	r3, r1
 8002fda:	817b      	strh	r3, [r7, #10]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681c      	ldr	r4, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6898      	ldr	r0, [r3, #8]
 8002fe8:	893b      	ldrh	r3, [r7, #8]
 8002fea:	8979      	ldrh	r1, [r7, #10]
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	47a0      	blx	r4
 8002ff0:	4603      	mov	r3, r0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
	...

08002ffc <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003004:	4a07      	ldr	r2, [pc, #28]	; (8003024 <RetargetInit+0x28>)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <RetargetInit+0x2c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6898      	ldr	r0, [r3, #8]
 8003010:	2300      	movs	r3, #0
 8003012:	2202      	movs	r2, #2
 8003014:	2100      	movs	r1, #0
 8003016:	f00c faf3 	bl	800f600 <setvbuf>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	240002e8 	.word	0x240002e8
 8003028:	24000054 	.word	0x24000054

0800302c <_isatty>:

int _isatty(int fd) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	db04      	blt.n	8003044 <_isatty+0x18>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	dc01      	bgt.n	8003044 <_isatty+0x18>
    return 1;
 8003040:	2301      	movs	r3, #1
 8003042:	e005      	b.n	8003050 <_isatty+0x24>

  errno = EBADF;
 8003044:	f00c fa92 	bl	800f56c <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	2209      	movs	r2, #9
 800304c:	601a      	str	r2, [r3, #0]
  return 0;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3708      	adds	r7, #8
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <_write>:

int _write(int fd, char* ptr, int len) {
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d002      	beq.n	8003070 <_write+0x18>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d111      	bne.n	8003094 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <_write+0x54>)
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	b29a      	uxth	r2, r3
 8003078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	f00a fa5a 	bl	800d536 <HAL_UART_Transmit>
 8003082:	4603      	mov	r3, r0
 8003084:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003086:	7dfb      	ldrb	r3, [r7, #23]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <_write+0x38>
      return len;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	e008      	b.n	80030a2 <_write+0x4a>
    else
      return EIO;
 8003090:	2305      	movs	r3, #5
 8003092:	e006      	b.n	80030a2 <_write+0x4a>
  }
  errno = EBADF;
 8003094:	f00c fa6a 	bl	800f56c <__errno>
 8003098:	4603      	mov	r3, r0
 800309a:	2209      	movs	r2, #9
 800309c:	601a      	str	r2, [r3, #0]
  return -1;
 800309e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	240002e8 	.word	0x240002e8

080030b0 <_close>:

int _close(int fd) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db04      	blt.n	80030c8 <_close+0x18>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	dc01      	bgt.n	80030c8 <_close+0x18>
    return 0;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e006      	b.n	80030d6 <_close+0x26>

  errno = EBADF;
 80030c8:	f00c fa50 	bl	800f56c <__errno>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2209      	movs	r2, #9
 80030d0:	601a      	str	r2, [r3, #0]
  return -1;
 80030d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <_read>:

int _read(int fd, char* ptr, int len) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d110      	bne.n	8003114 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <_read+0x4c>)
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030fa:	2201      	movs	r2, #1
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	f00a faa8 	bl	800d652 <HAL_UART_Receive>
 8003102:	4603      	mov	r3, r0
 8003104:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <_read+0x30>
      return 1;
 800310c:	2301      	movs	r3, #1
 800310e:	e008      	b.n	8003122 <_read+0x42>
    else
      return EIO;
 8003110:	2305      	movs	r3, #5
 8003112:	e006      	b.n	8003122 <_read+0x42>
  }
  errno = EBADF;
 8003114:	f00c fa2a 	bl	800f56c <__errno>
 8003118:	4603      	mov	r3, r0
 800311a:	2209      	movs	r2, #9
 800311c:	601a      	str	r2, [r3, #0]
  return -1;
 800311e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	240002e8 	.word	0x240002e8

08003130 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	db08      	blt.n	8003152 <_fstat+0x22>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b02      	cmp	r3, #2
 8003144:	dc05      	bgt.n	8003152 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800314c:	605a      	str	r2, [r3, #4]
    return 0;
 800314e:	2300      	movs	r3, #0
 8003150:	e005      	b.n	800315e <_fstat+0x2e>
  }

  errno = EBADF;
 8003152:	f00c fa0b 	bl	800f56c <__errno>
 8003156:	4603      	mov	r3, r0
 8003158:	2209      	movs	r2, #9
 800315a:	601a      	str	r2, [r3, #0]
  return 0;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
	...

08003168 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800316c:	4b11      	ldr	r3, [pc, #68]	; (80031b4 <MX_RTC_Init+0x4c>)
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <MX_RTC_Init+0x50>)
 8003170:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <MX_RTC_Init+0x4c>)
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <MX_RTC_Init+0x4c>)
 800317a:	227f      	movs	r2, #127	; 0x7f
 800317c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <MX_RTC_Init+0x4c>)
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <MX_RTC_Init+0x4c>)
 8003186:	2200      	movs	r2, #0
 8003188:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <MX_RTC_Init+0x4c>)
 800318c:	2200      	movs	r2, #0
 800318e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <MX_RTC_Init+0x4c>)
 8003192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003196:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003198:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <MX_RTC_Init+0x4c>)
 800319a:	2200      	movs	r2, #0
 800319c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800319e:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_RTC_Init+0x4c>)
 80031a0:	f009 ffc2 	bl	800d128 <HAL_RTC_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80031aa:	f7fe fa7f 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80031ae:	bf00      	nop
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	240002ec 	.word	0x240002ec
 80031b8:	58004000 	.word	0x58004000

080031bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0b2      	sub	sp, #200	; 0xc8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	22c0      	movs	r2, #192	; 0xc0
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f00c f9f7 	bl	800f5c0 <memset>
  if(rtcHandle->Instance==RTC)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a10      	ldr	r2, [pc, #64]	; (8003218 <HAL_RTC_MspInit+0x5c>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d119      	bne.n	8003210 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80031e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	4618      	mov	r0, r3
 80031f6:	f008 f9b7 	bl	800b568 <HAL_RCCEx_PeriphCLKConfig>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8003200:	f7fe fa54 	bl	80016ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003204:	4b05      	ldr	r3, [pc, #20]	; (800321c <HAL_RTC_MspInit+0x60>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_RTC_MspInit+0x60>)
 800320a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003210:	bf00      	nop
 8003212:	37c8      	adds	r7, #200	; 0xc8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	58004000 	.word	0x58004000
 800321c:	58024400 	.word	0x58024400

08003220 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800322a:	4b16      	ldr	r3, [pc, #88]	; (8003284 <BSP_I2C4_Init+0x64>)
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <BSP_I2C4_Init+0x68>)
 800322e:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <BSP_I2C4_Init+0x6c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11f      	bne.n	8003278 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <BSP_I2C4_Init+0x6c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	4a13      	ldr	r2, [pc, #76]	; (800328c <BSP_I2C4_Init+0x6c>)
 8003240:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8003242:	4810      	ldr	r0, [pc, #64]	; (8003284 <BSP_I2C4_Init+0x64>)
 8003244:	f006 fa2a 	bl	800969c <HAL_I2C_GetState>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d114      	bne.n	8003278 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800324e:	480d      	ldr	r0, [pc, #52]	; (8003284 <BSP_I2C4_Init+0x64>)
 8003250:	f000 fb60 	bl	8003914 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8003254:	f008 f972 	bl	800b53c <HAL_RCC_GetPCLK2Freq>
 8003258:	4603      	mov	r3, r0
 800325a:	490d      	ldr	r1, [pc, #52]	; (8003290 <BSP_I2C4_Init+0x70>)
 800325c:	4618      	mov	r0, r3
 800325e:	f000 f8e3 	bl	8003428 <I2C_GetTiming>
 8003262:	4603      	mov	r3, r0
 8003264:	4619      	mov	r1, r3
 8003266:	4807      	ldr	r0, [pc, #28]	; (8003284 <BSP_I2C4_Init+0x64>)
 8003268:	f000 f838 	bl	80032dc <MX_I2C4_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003272:	f06f 0307 	mvn.w	r3, #7
 8003276:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8003278:	687b      	ldr	r3, [r7, #4]
}
 800327a:	4618      	mov	r0, r3
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	24000d1c 	.word	0x24000d1c
 8003288:	58001c00 	.word	0x58001c00
 800328c:	24000314 	.word	0x24000314
 8003290:	000186a0 	.word	0x000186a0

08003294 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <BSP_I2C4_DeInit+0x40>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <BSP_I2C4_DeInit+0x40>)
 80032a6:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <BSP_I2C4_DeInit+0x40>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <BSP_I2C4_DeInit+0x44>)
 80032b2:	f000 fb9b 	bl	80039ec <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80032b6:	4808      	ldr	r0, [pc, #32]	; (80032d8 <BSP_I2C4_DeInit+0x44>)
 80032b8:	f005 ff7e 	bl	80091b8 <HAL_I2C_DeInit>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80032c2:	f06f 0307 	mvn.w	r3, #7
 80032c6:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	24000314 	.word	0x24000314
 80032d8:	24000d1c 	.word	0x24000d1c

080032dc <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f005 febc 	bl	8009098 <HAL_I2C_Init>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e014      	b.n	8003356 <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f006 fc84 	bl	8009c40 <HAL_I2CEx_ConfigAnalogFilter>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
 8003342:	e008      	b.n	8003356 <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8003344:	2100      	movs	r1, #0
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f006 fcc5 	bl	8009cd6 <HAL_I2CEx_ConfigDigitalFilter>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60ba      	str	r2, [r7, #8]
 8003368:	461a      	mov	r2, r3
 800336a:	4603      	mov	r3, r0
 800336c:	81fb      	strh	r3, [r7, #14]
 800336e:	460b      	mov	r3, r1
 8003370:	81bb      	strh	r3, [r7, #12]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8003376:	89b9      	ldrh	r1, [r7, #12]
 8003378:	89f8      	ldrh	r0, [r7, #14]
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2202      	movs	r2, #2
 8003382:	f000 fb57 	bl	8003a34 <I2C4_WriteReg>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d102      	bne.n	8003392 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
 8003390:	e00c      	b.n	80033ac <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8003392:	4809      	ldr	r0, [pc, #36]	; (80033b8 <BSP_I2C4_WriteReg16+0x58>)
 8003394:	f006 f990 	bl	80096b8 <HAL_I2C_GetError>
 8003398:	4603      	mov	r3, r0
 800339a:	2b04      	cmp	r3, #4
 800339c:	d103      	bne.n	80033a6 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800339e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e002      	b.n	80033ac <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80033a6:	f06f 0303 	mvn.w	r3, #3
 80033aa:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80033ac:	697b      	ldr	r3, [r7, #20]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	24000d1c 	.word	0x24000d1c

080033bc <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60ba      	str	r2, [r7, #8]
 80033c4:	461a      	mov	r2, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	81fb      	strh	r3, [r7, #14]
 80033ca:	460b      	mov	r3, r1
 80033cc:	81bb      	strh	r3, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80033d2:	89b9      	ldrh	r1, [r7, #12]
 80033d4:	89f8      	ldrh	r0, [r7, #14]
 80033d6:	88fb      	ldrh	r3, [r7, #6]
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2202      	movs	r2, #2
 80033de:	f000 fb4f 	bl	8003a80 <I2C4_ReadReg>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	e00c      	b.n	8003408 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80033ee:	4809      	ldr	r0, [pc, #36]	; (8003414 <BSP_I2C4_ReadReg16+0x58>)
 80033f0:	f006 f962 	bl	80096b8 <HAL_I2C_GetError>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d103      	bne.n	8003402 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80033fa:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e002      	b.n	8003408 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003402:	f06f 0303 	mvn.w	r3, #3
 8003406:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8003408:	697b      	ldr	r3, [r7, #20]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	24000d1c 	.word	0x24000d1c

08003418 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800341c:	f000 ffd4 	bl	80043c8 <HAL_GetTick>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d06b      	beq.n	8003514 <I2C_GetTiming+0xec>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d068      	beq.n	8003514 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	e060      	b.n	800350a <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8003448:	4a35      	ldr	r2, [pc, #212]	; (8003520 <I2C_GetTiming+0xf8>)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	212c      	movs	r1, #44	; 0x2c
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	4413      	add	r3, r2
 8003454:	3304      	adds	r3, #4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d352      	bcc.n	8003504 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800345e:	4a30      	ldr	r2, [pc, #192]	; (8003520 <I2C_GetTiming+0xf8>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	212c      	movs	r1, #44	; 0x2c
 8003464:	fb01 f303 	mul.w	r3, r1, r3
 8003468:	4413      	add	r3, r2
 800346a:	3308      	adds	r3, #8
 800346c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d847      	bhi.n	8003504 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8003474:	6939      	ldr	r1, [r7, #16]
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f856 	bl	8003528 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800347c:	6939      	ldr	r1, [r7, #16]
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f940 	bl	8003704 <I2C_Compute_SCLL_SCLH>
 8003484:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2b7f      	cmp	r3, #127	; 0x7f
 800348a:	d842      	bhi.n	8003512 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800348c:	4925      	ldr	r1, [pc, #148]	; (8003524 <I2C_GetTiming+0xfc>)
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800349e:	4821      	ldr	r0, [pc, #132]	; (8003524 <I2C_GetTiming+0xfc>)
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4403      	add	r3, r0
 80034ac:	3304      	adds	r3, #4
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	051b      	lsls	r3, r3, #20
 80034b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80034b6:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80034b8:	481a      	ldr	r0, [pc, #104]	; (8003524 <I2C_GetTiming+0xfc>)
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4403      	add	r3, r0
 80034c6:	3308      	adds	r3, #8
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80034d0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80034d2:	4814      	ldr	r0, [pc, #80]	; (8003524 <I2C_GetTiming+0xfc>)
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4613      	mov	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	330c      	adds	r3, #12
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	021b      	lsls	r3, r3, #8
 80034e6:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80034e8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80034ea:	480e      	ldr	r0, [pc, #56]	; (8003524 <I2C_GetTiming+0xfc>)
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4403      	add	r3, r0
 80034f8:	3310      	adds	r3, #16
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80034fe:	430b      	orrs	r3, r1
 8003500:	617b      	str	r3, [r7, #20]
        }
        break;
 8003502:	e006      	b.n	8003512 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	3301      	adds	r3, #1
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d99b      	bls.n	8003448 <I2C_GetTiming+0x20>
 8003510:	e000      	b.n	8003514 <I2C_GetTiming+0xec>
        break;
 8003512:	bf00      	nop
      }
    }
  }

  return ret;
 8003514:	697b      	ldr	r3, [r7, #20]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	08010c00 	.word	0x08010c00
 8003524:	24000318 	.word	0x24000318

08003528 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003528:	b480      	push	{r7}
 800352a:	b08f      	sub	sp, #60	; 0x3c
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8003532:	2310      	movs	r3, #16
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	085a      	lsrs	r2, r3, #1
 800353a:	4b6e      	ldr	r3, [pc, #440]	; (80036f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800353c:	4413      	add	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fbb3 f3f2 	udiv	r3, r3, r2
 8003544:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8003546:	2332      	movs	r3, #50	; 0x32
 8003548:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800354a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800354e:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003550:	4a69      	ldr	r2, [pc, #420]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	212c      	movs	r1, #44	; 0x2c
 8003556:	fb01 f303 	mul.w	r3, r1, r3
 800355a:	4413      	add	r3, r2
 800355c:	3324      	adds	r3, #36	; 0x24
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	4a65      	ldr	r2, [pc, #404]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	330c      	adds	r3, #12
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003574:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003576:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8003578:	495f      	ldr	r1, [pc, #380]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	202c      	movs	r0, #44	; 0x2c
 800357e:	fb00 f303 	mul.w	r3, r0, r3
 8003582:	440b      	add	r3, r1
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3303      	adds	r3, #3
 800358a:	69f9      	ldr	r1, [r7, #28]
 800358c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8003594:	4a58      	ldr	r2, [pc, #352]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	212c      	movs	r1, #44	; 0x2c
 800359a:	fb01 f303 	mul.w	r3, r1, r3
 800359e:	4413      	add	r3, r2
 80035a0:	3310      	adds	r3, #16
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	4a54      	ldr	r2, [pc, #336]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	212c      	movs	r1, #44	; 0x2c
 80035ac:	fb01 f303 	mul.w	r3, r1, r3
 80035b0:	4413      	add	r3, r2
 80035b2:	3320      	adds	r3, #32
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80035b8:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80035ba:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80035bc:	494e      	ldr	r1, [pc, #312]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	202c      	movs	r0, #44	; 0x2c
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	440b      	add	r3, r1
 80035c8:	3328      	adds	r3, #40	; 0x28
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3304      	adds	r3, #4
 80035ce:	69f9      	ldr	r1, [r7, #28]
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80035d8:	4a47      	ldr	r2, [pc, #284]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3320      	adds	r3, #32
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	4a43      	ldr	r2, [pc, #268]	; (80036f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3314      	adds	r3, #20
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4403      	add	r3, r0
 80035fc:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	2b00      	cmp	r3, #0
 8003602:	dc01      	bgt.n	8003608 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8003604:	2300      	movs	r3, #0
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8003608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360a:	2b00      	cmp	r3, #0
 800360c:	dc01      	bgt.n	8003612 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800360e:	2300      	movs	r3, #0
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8003612:	2300      	movs	r3, #0
 8003614:	62bb      	str	r3, [r7, #40]	; 0x28
 8003616:	e062      	b.n	80036de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
 800361c:	e059      	b.n	80036d2 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800361e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003620:	3301      	adds	r3, #1
 8003622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003624:	3201      	adds	r2, #1
 8003626:	fb03 f202 	mul.w	r2, r3, r2
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	429a      	cmp	r2, r3
 8003638:	d348      	bcc.n	80036cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800363a:	2300      	movs	r3, #0
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	e042      	b.n	80036c6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	3301      	adds	r3, #1
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	fb03 f202 	mul.w	r2, r3, r2
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d332      	bcc.n	80036c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d82e      	bhi.n	80036c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8003662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003666:	429a      	cmp	r2, r3
 8003668:	d02a      	beq.n	80036c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800366a:	4b24      	ldr	r3, [pc, #144]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4924      	ldr	r1, [pc, #144]	; (8003700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800367c:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	491f      	ldr	r1, [pc, #124]	; (8003700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3304      	adds	r3, #4
 8003690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003692:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4919      	ldr	r1, [pc, #100]	; (8003700 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800369a:	4613      	mov	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	3308      	adds	r3, #8
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a11      	ldr	r2, [pc, #68]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036b6:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b7f      	cmp	r3, #127	; 0x7f
 80036be:	d812      	bhi.n	80036e6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	3301      	adds	r3, #1
 80036c4:	623b      	str	r3, [r7, #32]
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	2b0f      	cmp	r3, #15
 80036ca:	d9b9      	bls.n	8003640 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	3301      	adds	r3, #1
 80036d0:	627b      	str	r3, [r7, #36]	; 0x24
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	2b0f      	cmp	r3, #15
 80036d6:	d9a2      	bls.n	800361e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80036d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036da:	3301      	adds	r3, #1
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	2b0f      	cmp	r3, #15
 80036e2:	d999      	bls.n	8003618 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80036e4:	e000      	b.n	80036e8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80036e6:	bf00      	nop
          }
        }
      }
    }
  }
}
 80036e8:	373c      	adds	r7, #60	; 0x3c
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	3b9aca00 	.word	0x3b9aca00
 80036f8:	08010c00 	.word	0x08010c00
 80036fc:	24000d18 	.word	0x24000d18
 8003700:	24000318 	.word	0x24000318

08003704 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8003704:	b480      	push	{r7}
 8003706:	b093      	sub	sp, #76	; 0x4c
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003712:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	085a      	lsrs	r2, r3, #1
 8003718:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <I2C_Compute_SCLL_SCLH+0x200>)
 800371a:	4413      	add	r3, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003722:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8003724:	4a78      	ldr	r2, [pc, #480]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	212c      	movs	r1, #44	; 0x2c
 800372a:	fb01 f303 	mul.w	r3, r1, r3
 800372e:	4413      	add	r3, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	085a      	lsrs	r2, r3, #1
 8003734:	4b73      	ldr	r3, [pc, #460]	; (8003904 <I2C_Compute_SCLL_SCLH+0x200>)
 8003736:	4413      	add	r3, r2
 8003738:	4973      	ldr	r1, [pc, #460]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	202c      	movs	r0, #44	; 0x2c
 800373e:	fb00 f202 	mul.w	r2, r0, r2
 8003742:	440a      	add	r2, r1
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	fbb3 f3f2 	udiv	r3, r3, r2
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800374c:	2332      	movs	r3, #50	; 0x32
 800374e:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8003750:	4a6d      	ldr	r2, [pc, #436]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	212c      	movs	r1, #44	; 0x2c
 8003756:	fb01 f303 	mul.w	r3, r1, r3
 800375a:	4413      	add	r3, r2
 800375c:	3328      	adds	r3, #40	; 0x28
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8003768:	4a67      	ldr	r2, [pc, #412]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a62      	ldr	r2, [pc, #392]	; (8003904 <I2C_Compute_SCLL_SCLH+0x200>)
 800377a:	fbb2 f3f3 	udiv	r3, r2, r3
 800377e:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8003780:	4a61      	ldr	r2, [pc, #388]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	212c      	movs	r1, #44	; 0x2c
 8003786:	fb01 f303 	mul.w	r3, r1, r3
 800378a:	4413      	add	r3, r2
 800378c:	3308      	adds	r3, #8
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a5c      	ldr	r2, [pc, #368]	; (8003904 <I2C_Compute_SCLL_SCLH+0x200>)
 8003792:	fbb2 f3f3 	udiv	r3, r2, r3
 8003796:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
 80037a0:	e0a3      	b.n	80038ea <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80037a2:	495a      	ldr	r1, [pc, #360]	; (800390c <I2C_Compute_SCLL_SCLH+0x208>)
 80037a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b6:	fb02 f303 	mul.w	r3, r2, r3
 80037ba:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80037bc:	2300      	movs	r3, #0
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037c0:	e08c      	b.n	80038dc <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	441a      	add	r2, r3
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	3301      	adds	r3, #1
 80037cc:	6979      	ldr	r1, [r7, #20]
 80037ce:	fb03 f101 	mul.w	r1, r3, r1
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	440b      	add	r3, r1
 80037d8:	4413      	add	r3, r2
 80037da:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80037dc:	4a4a      	ldr	r2, [pc, #296]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	212c      	movs	r1, #44	; 0x2c
 80037e2:	fb01 f303 	mul.w	r3, r1, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3318      	adds	r3, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d971      	bls.n	80038d6 <I2C_Compute_SCLL_SCLH+0x1d2>
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	089b      	lsrs	r3, r3, #2
 80037fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003800:	429a      	cmp	r2, r3
 8003802:	d268      	bcs.n	80038d6 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8003804:	2300      	movs	r3, #0
 8003806:	63bb      	str	r3, [r7, #56]	; 0x38
 8003808:	e062      	b.n	80038d0 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	441a      	add	r2, r3
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	3301      	adds	r3, #1
 8003814:	6979      	ldr	r1, [r7, #20]
 8003816:	fb03 f101 	mul.w	r1, r3, r1
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	440b      	add	r3, r1
 8003820:	4413      	add	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	441a      	add	r2, r3
 800382a:	4937      	ldr	r1, [pc, #220]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	202c      	movs	r0, #44	; 0x2c
 8003830:	fb00 f303 	mul.w	r3, r0, r3
 8003834:	440b      	add	r3, r1
 8003836:	3320      	adds	r3, #32
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	441a      	add	r2, r3
 800383c:	4932      	ldr	r1, [pc, #200]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	202c      	movs	r0, #44	; 0x2c
 8003842:	fb00 f303 	mul.w	r3, r0, r3
 8003846:	440b      	add	r3, r1
 8003848:	3324      	adds	r3, #36	; 0x24
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4413      	add	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	429a      	cmp	r2, r3
 8003856:	d338      	bcc.n	80038ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	d834      	bhi.n	80038ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8003860:	4a29      	ldr	r2, [pc, #164]	; (8003908 <I2C_Compute_SCLL_SCLH+0x204>)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	331c      	adds	r3, #28
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	429a      	cmp	r2, r3
 8003874:	d329      	bcc.n	80038ca <I2C_Compute_SCLL_SCLH+0x1c6>
 8003876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	429a      	cmp	r2, r3
 800387c:	d225      	bcs.n	80038ca <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	2b00      	cmp	r3, #0
 800388a:	da02      	bge.n	8003892 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	425b      	negs	r3, r3
 8003890:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8003892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003894:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003896:	429a      	cmp	r2, r3
 8003898:	d917      	bls.n	80038ca <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <I2C_Compute_SCLL_SCLH+0x208>)
 80038a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	3310      	adds	r3, #16
 80038ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80038b2:	4916      	ldr	r1, [pc, #88]	; (800390c <I2C_Compute_SCLL_SCLH+0x208>)
 80038b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	330c      	adds	r3, #12
 80038c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c4:	601a      	str	r2, [r3, #0]
              ret = count;
 80038c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80038ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038cc:	3301      	adds	r3, #1
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80038d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038d2:	2bff      	cmp	r3, #255	; 0xff
 80038d4:	d999      	bls.n	800380a <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80038d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d8:	3301      	adds	r3, #1
 80038da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038de:	2bff      	cmp	r3, #255	; 0xff
 80038e0:	f67f af6f 	bls.w	80037c2 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80038e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e6:	3301      	adds	r3, #1
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <I2C_Compute_SCLL_SCLH+0x20c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038f0:	429a      	cmp	r2, r3
 80038f2:	f4ff af56 	bcc.w	80037a2 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	374c      	adds	r7, #76	; 0x4c
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	3b9aca00 	.word	0x3b9aca00
 8003908:	08010c00 	.word	0x08010c00
 800390c:	24000318 	.word	0x24000318
 8003910:	24000d18 	.word	0x24000d18

08003914 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800391c:	4b31      	ldr	r3, [pc, #196]	; (80039e4 <I2C4_MspInit+0xd0>)
 800391e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003922:	4a30      	ldr	r2, [pc, #192]	; (80039e4 <I2C4_MspInit+0xd0>)
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800392c:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <I2C4_MspInit+0xd0>)
 800392e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800393a:	4b2a      	ldr	r3, [pc, #168]	; (80039e4 <I2C4_MspInit+0xd0>)
 800393c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003940:	4a28      	ldr	r2, [pc, #160]	; (80039e4 <I2C4_MspInit+0xd0>)
 8003942:	f043 0308 	orr.w	r3, r3, #8
 8003946:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800394a:	4b26      	ldr	r3, [pc, #152]	; (80039e4 <I2C4_MspInit+0xd0>)
 800394c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8003958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800395e:	2312      	movs	r3, #18
 8003960:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800396a:	2304      	movs	r3, #4
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	481c      	ldr	r0, [pc, #112]	; (80039e8 <I2C4_MspInit+0xd4>)
 8003976:	f005 f8a1 	bl	8008abc <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800397a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800397e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8003980:	2312      	movs	r3, #18
 8003982:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed 	= GPIO_SPEED_FREQ_HIGH;
 8003988:	2302      	movs	r3, #2
 800398a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800398c:	2304      	movs	r3, #4
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8003990:	f107 0314 	add.w	r3, r7, #20
 8003994:	4619      	mov	r1, r3
 8003996:	4814      	ldr	r0, [pc, #80]	; (80039e8 <I2C4_MspInit+0xd4>)
 8003998:	f005 f890 	bl	8008abc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800399c:	4b11      	ldr	r3, [pc, #68]	; (80039e4 <I2C4_MspInit+0xd0>)
 800399e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80039a2:	4a10      	ldr	r2, [pc, #64]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039a8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80039ac:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	60bb      	str	r3, [r7, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039c6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 80039ca:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <I2C4_MspInit+0xd0>)
 80039d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 80039da:	bf00      	nop
 80039dc:	3728      	adds	r7, #40	; 0x28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
 80039e8:	58020c00 	.word	0x58020c00

080039ec <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80039f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4619      	mov	r1, r3
 80039fe:	480b      	ldr	r0, [pc, #44]	; (8003a2c <I2C4_MspDeInit+0x40>)
 8003a00:	f005 fa0c 	bl	8008e1c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8003a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a08:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4807      	ldr	r0, [pc, #28]	; (8003a2c <I2C4_MspDeInit+0x40>)
 8003a10:	f005 fa04 	bl	8008e1c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <I2C4_MspDeInit+0x44>)
 8003a16:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003a1a:	4a05      	ldr	r2, [pc, #20]	; (8003a30 <I2C4_MspDeInit+0x44>)
 8003a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a20:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
}
 8003a24:	bf00      	nop
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	58020c00 	.word	0x58020c00
 8003a30:	58024400 	.word	0x58024400

08003a34 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af04      	add	r7, sp, #16
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	81fb      	strh	r3, [r7, #14]
 8003a40:	460b      	mov	r3, r1
 8003a42:	81bb      	strh	r3, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003a48:	8978      	ldrh	r0, [r7, #10]
 8003a4a:	89ba      	ldrh	r2, [r7, #12]
 8003a4c:	89f9      	ldrh	r1, [r7, #14]
 8003a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a52:	9302      	str	r3, [sp, #8]
 8003a54:	8b3b      	ldrh	r3, [r7, #24]
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	4807      	ldr	r0, [pc, #28]	; (8003a7c <I2C4_WriteReg+0x48>)
 8003a60:	f005 fbee 	bl	8009240 <HAL_I2C_Mem_Write>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e001      	b.n	8003a72 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003a6e:	f06f 0307 	mvn.w	r3, #7
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	24000d1c 	.word	0x24000d1c

08003a80 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	4603      	mov	r3, r0
 8003a8a:	81fb      	strh	r3, [r7, #14]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	81bb      	strh	r3, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8003a94:	8978      	ldrh	r0, [r7, #10]
 8003a96:	89ba      	ldrh	r2, [r7, #12]
 8003a98:	89f9      	ldrh	r1, [r7, #14]
 8003a9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a9e:	9302      	str	r3, [sp, #8]
 8003aa0:	8b3b      	ldrh	r3, [r7, #24]
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <I2C4_ReadReg+0x48>)
 8003aac:	f005 fcdc 	bl	8009468 <HAL_I2C_Mem_Read>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e001      	b.n	8003abe <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8003aba:	f06f 0307 	mvn.w	r3, #7
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	24000d1c 	.word	0x24000d1c

08003acc <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]

#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif /*USE_BSP_IO_CLASS*/

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003ae2:	f06f 0301 	mvn.w	r3, #1
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e02d      	b.n	8003b46 <BSP_CAMERA_Init+0x7a>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    HAL_DCMI_MspInit(&hdcmi);
 8003aea:	4819      	ldr	r0, [pc, #100]	; (8003b50 <BSP_CAMERA_Init+0x84>)
 8003aec:	f7fc fe06 	bl	80006fc <HAL_DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    MX_DCMI_Init();
 8003af0:	f7fc fdd0 	bl	8000694 <MX_DCMI_Init>

    if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 f887 	bl	8003c08 <BSP_CAMERA_HwReset>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <BSP_CAMERA_Init+0x3c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8003b00:	f06f 0307 	mvn.w	r3, #7
 8003b04:	617b      	str	r3, [r7, #20]
 8003b06:	e01e      	b.n	8003b46 <BSP_CAMERA_Init+0x7a>
          ret = OV5640_Probe(Resolution, PixelFormat);
        }
#endif /* USE_CAMERA_SENSOR_OV5640 */
#else
#if (USE_CAMERA_SENSOR_OV5640 == 1)
        ret = OV5640_Probe(Resolution, PixelFormat);
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68b8      	ldr	r0, [r7, #8]
 8003b0c:	f000 f93e 	bl	8003d8c <OV5640_Probe>
 8003b10:	6178      	str	r0, [r7, #20]
#endif /* USE_CAMERA_SENSOR_OV5640 */
#endif /* USE_CAMERA_SENSOR_S5K5CAG */

        if(ret != BSP_ERROR_NONE)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <BSP_CAMERA_Init+0x54>
        {
          ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003b18:	f06f 0306 	mvn.w	r3, #6
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e012      	b.n	8003b46 <BSP_CAMERA_Init+0x7a>
          else
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
          Camera_Ctx[Instance].Resolution = Resolution;
 8003b20:	490c      	ldr	r1, [pc, #48]	; (8003b54 <BSP_CAMERA_Init+0x88>)
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	4413      	add	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	440b      	add	r3, r1
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <BSP_CAMERA_Init+0x88>)
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	440b      	add	r3, r1
 8003b40:	3304      	adds	r3, #4
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	601a      	str	r2, [r3, #0]
#endif
    }
  }

  /* BSP status */
  return ret;
 8003b46:	697b      	ldr	r3, [r7, #20]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3718      	adds	r7, #24
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	240000d4 	.word	0x240000d4
 8003b54:	24000d74 	.word	0x24000d74

08003b58 <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 8003b58:	b590      	push	{r4, r7, lr}
 8003b5a:	b087      	sub	sp, #28
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b6a:	f06f 0301 	mvn.w	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e022      	b.n	8003bb8 <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hdcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 8003b72:	68bc      	ldr	r4, [r7, #8]
 8003b74:	4913      	ldr	r1, [pc, #76]	; (8003bc4 <BSP_CAMERA_Start+0x6c>)
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	440b      	add	r3, r1
 8003b82:	6818      	ldr	r0, [r3, #0]
 8003b84:	490f      	ldr	r1, [pc, #60]	; (8003bc4 <BSP_CAMERA_Start+0x6c>)
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	440b      	add	r3, r1
 8003b92:	3304      	adds	r3, #4
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f000 f8a6 	bl	8003ce8 <GetSize>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4622      	mov	r2, r4
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4809      	ldr	r0, [pc, #36]	; (8003bc8 <BSP_CAMERA_Start+0x70>)
 8003ba4:	f000 fdca 	bl	800473c <HAL_DCMI_Start_DMA>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8003bae:	f06f 0303 	mvn.w	r3, #3
 8003bb2:	e002      	b.n	8003bba <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003bb8:	697b      	ldr	r3, [r7, #20]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	24000d74 	.word	0x24000d74
 8003bc8:	240000d4 	.word	0x240000d4

08003bcc <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003bda:	f06f 0301 	mvn.w	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e00b      	b.n	8003bfa <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hdcmi) != HAL_OK)
 8003be2:	4808      	ldr	r0, [pc, #32]	; (8003c04 <BSP_CAMERA_Stop+0x38>)
 8003be4:	f000 fe6c 	bl	80048c0 <HAL_DCMI_Stop>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8003bee:	f06f 0303 	mvn.w	r3, #3
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	e001      	b.n	8003bfa <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	240000d4 	.word	0x240000d4

08003c08 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <BSP_CAMERA_HwReset+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c1a:	f06f 0301 	mvn.w	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003c20:	68fb      	ldr	r3, [r7, #12]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
#if (USE_BSP_IO_CLASS > 0)
  BSP_IO_Init_t io_init_structure;
#endif

  if(Instance >= CAMERA_INSTANCES_NBR)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d002      	beq.n	8003c46 <BSP_CAMERA_PwrDown+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c40:	f06f 0301 	mvn.w	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
      }
    }
#endif
  }

  return ret;
 8003c46:	68fb      	ldr	r3, [r7, #12]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7ff ffdb 	bl	8003c54 <BSP_CAMERA_LineEventCallback>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
 {
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f7fd fce8 	bl	8001684 <BSP_CAMERA_FrameEventCallback>
}
 8003cb4:	bf00      	nop
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7ff ffcf 	bl	8003c68 <BSP_CAMERA_VsyncEventCallback>
}
 8003cca:	bf00      	nop
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7ff ffce 	bl	8003c7c <BSP_CAMERA_ErrorCallback>
}
 8003ce0:	bf00      	nop
 8003ce2:	3708      	adds	r7, #8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Pixel format
  * @retval capture size in pixels unit.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d102      	bne.n	8003d02 <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	60bb      	str	r3, [r7, #8]
 8003d00:	e001      	b.n	8003d06 <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 8003d02:	2302      	movs	r3, #2
 8003d04:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d834      	bhi.n	8003d76 <GetSize+0x8e>
 8003d0c:	a201      	add	r2, pc, #4	; (adr r2, 8003d14 <GetSize+0x2c>)
 8003d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d12:	bf00      	nop
 8003d14:	08003d29 	.word	0x08003d29
 8003d18:	08003d39 	.word	0x08003d39
 8003d1c:	08003d49 	.word	0x08003d49
 8003d20:	08003d59 	.word	0x08003d59
 8003d24:	08003d69 	.word	0x08003d69
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	089b      	lsrs	r3, r3, #2
 8003d34:	60fb      	str	r3, [r7, #12]
    break;
 8003d36:	e01f      	b.n	8003d78 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	089b      	lsrs	r3, r3, #2
 8003d44:	60fb      	str	r3, [r7, #12]
    break;
 8003d46:	e017      	b.n	8003d78 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	1a9b      	subs	r3, r3, r2
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	60fb      	str	r3, [r7, #12]
    break;
 8003d56:	e00f      	b.n	8003d78 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f44f 2296 	mov.w	r2, #307200	; 0x4b000
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	089b      	lsrs	r3, r3, #2
 8003d64:	60fb      	str	r3, [r7, #12]
    break;
 8003d66:	e007      	b.n	8003d78 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <GetSize+0xa0>)
 8003d6c:	fb02 f303 	mul.w	r3, r2, r3
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	60fb      	str	r3, [r7, #12]
    break;
 8003d74:	e000      	b.n	8003d78 <GetSize+0x90>
  default:
    break;
 8003d76:	bf00      	nop
  }

  return (int32_t)size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	0005dc00 	.word	0x0005dc00

08003d8c <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  OV5640_IO_t              IOCtx;
  uint32_t                  id;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 8003d96:	2378      	movs	r3, #120	; 0x78
 8003d98:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 8003d9a:	4b2c      	ldr	r3, [pc, #176]	; (8003e4c <OV5640_Probe+0xc0>)
 8003d9c:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	; (8003e50 <OV5640_Probe+0xc4>)
 8003da0:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <OV5640_Probe+0xc8>)
 8003da4:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <OV5640_Probe+0xcc>)
 8003da8:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 8003daa:	4b2c      	ldr	r3, [pc, #176]	; (8003e5c <OV5640_Probe+0xd0>)
 8003dac:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 8003dae:	f107 030c 	add.w	r3, r7, #12
 8003db2:	4619      	mov	r1, r3
 8003db4:	482a      	ldr	r0, [pc, #168]	; (8003e60 <OV5640_Probe+0xd4>)
 8003db6:	f7fd fc7f 	bl	80016b8 <OV5640_RegisterBusIO>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003dc0:	f06f 0304 	mvn.w	r3, #4
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	e03c      	b.n	8003e42 <OV5640_Probe+0xb6>
  }
  else if(OV5640_ReadID(&OV5640Obj, &id) != OV5640_OK)
 8003dc8:	f107 0308 	add.w	r3, r7, #8
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4824      	ldr	r0, [pc, #144]	; (8003e60 <OV5640_Probe+0xd4>)
 8003dd0:	f7fe f8c6 	bl	8001f60 <OV5640_ReadID>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <OV5640_Probe+0x56>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8003dda:	f06f 0304 	mvn.w	r3, #4
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
 8003de0:	e02f      	b.n	8003e42 <OV5640_Probe+0xb6>
  }
  else
  {
    if(id != OV5640_ID)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	f245 6240 	movw	r2, #22080	; 0x5640
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d003      	beq.n	8003df4 <OV5640_Probe+0x68>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8003dec:	f06f 0306 	mvn.w	r3, #6
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e026      	b.n	8003e42 <OV5640_Probe+0xb6>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <OV5640_Probe+0xd8>)
 8003df6:	4a1c      	ldr	r2, [pc, #112]	; (8003e68 <OV5640_Probe+0xdc>)
 8003df8:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 8003dfa:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <OV5640_Probe+0xe0>)
 8003dfc:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <OV5640_Probe+0xd4>)
 8003dfe:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 8003e00:	4b18      	ldr	r3, [pc, #96]	; (8003e64 <OV5640_Probe+0xd8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <OV5640_Probe+0xe0>)
 8003e08:	6810      	ldr	r0, [r2, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <OV5640_Probe+0x92>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e16:	f06f 0304 	mvn.w	r3, #4
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1c:	e011      	b.n	8003e42 <OV5640_Probe+0xb6>
      }
	  else if(Camera_Drv->GetCapabilities(Camera_CompObj, Camera_Cap) != OV5640_OK)
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <OV5640_Probe+0xd8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <OV5640_Probe+0xe0>)
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	4911      	ldr	r1, [pc, #68]	; (8003e70 <OV5640_Probe+0xe4>)
 8003e2a:	6809      	ldr	r1, [r1, #0]
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4798      	blx	r3
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <OV5640_Probe+0xb2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003e36:	f06f 0304 	mvn.w	r3, #4
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3c:	e001      	b.n	8003e42 <OV5640_Probe+0xb6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ret;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3728      	adds	r7, #40	; 0x28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	08003221 	.word	0x08003221
 8003e50:	08003295 	.word	0x08003295
 8003e54:	080033bd 	.word	0x080033bd
 8003e58:	08003361 	.word	0x08003361
 8003e5c:	08003419 	.word	0x08003419
 8003e60:	24000dac 	.word	0x24000dac
 8003e64:	24000da4 	.word	0x24000da4
 8003e68:	24000000 	.word	0x24000000
 8003e6c:	24000d70 	.word	0x24000d70
 8003e70:	24000da8 	.word	0x24000da8

08003e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ea4 <HAL_MspInit+0x30>)
 8003e7c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e80:	4a08      	ldr	r2, [pc, #32]	; (8003ea4 <HAL_MspInit+0x30>)
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8003e8a:	4b06      	ldr	r3, [pc, #24]	; (8003ea4 <HAL_MspInit+0x30>)
 8003e8c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	58024400 	.word	0x58024400

08003ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eac:	e7fe      	b.n	8003eac <NMI_Handler+0x4>

08003eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eb2:	e7fe      	b.n	8003eb2 <HardFault_Handler+0x4>

08003eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eb8:	e7fe      	b.n	8003eb8 <MemManage_Handler+0x4>

08003eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ebe:	e7fe      	b.n	8003ebe <BusFault_Handler+0x4>

08003ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ec4:	e7fe      	b.n	8003ec4 <UsageFault_Handler+0x4>

08003ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ef4:	f000 fa54 	bl	80043a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f00:	4802      	ldr	r0, [pc, #8]	; (8003f0c <USART1_IRQHandler+0x10>)
 8003f02:	f009 fc6f 	bl	800d7e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	24000dd8 	.word	0x24000dd8

08003f10 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8003f14:	4802      	ldr	r0, [pc, #8]	; (8003f20 <DMA2_Stream1_IRQHandler+0x10>)
 8003f16:	f002 f9c3 	bl	80062a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003f1a:	bf00      	nop
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	24000124 	.word	0x24000124

08003f24 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8003f28:	4802      	ldr	r0, [pc, #8]	; (8003f34 <DCMI_PSSI_IRQHandler+0x10>)
 8003f2a:	f000 fd29 	bl	8004980 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	240000d4 	.word	0x240000d4

08003f38 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003f3c:	4802      	ldr	r0, [pc, #8]	; (8003f48 <LTDC_IRQHandler+0x10>)
 8003f3e:	f005 ffe7 	bl	8009f10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003f42:	bf00      	nop
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	2400023c 	.word	0x2400023c

08003f4c <LTDC_ER_IRQHandler>:

/**
  * @brief This function handles LTDC Error global Interrupt.
  */
void LTDC_ER_IRQHandler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_ER_IRQn 0 */

  /* USER CODE END LTDC_ER_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003f50:	4802      	ldr	r0, [pc, #8]	; (8003f5c <LTDC_ER_IRQHandler+0x10>)
 8003f52:	f005 ffdd 	bl	8009f10 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_ER_IRQn 1 */

  /* USER CODE END LTDC_ER_IRQn 1 */
}
 8003f56:	bf00      	nop
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2400023c 	.word	0x2400023c

08003f60 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003f64:	4802      	ldr	r0, [pc, #8]	; (8003f70 <DMA2D_IRQHandler+0x10>)
 8003f66:	f003 fe95 	bl	8007c94 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	2400019c 	.word	0x2400019c

08003f74 <_lseek>:
//  (void)file;
//  return 1;
//}

int _lseek(int file, int ptr, int dir)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f98:	4a14      	ldr	r2, [pc, #80]	; (8003fec <_sbrk+0x5c>)
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <_sbrk+0x60>)
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <_sbrk+0x64>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <_sbrk+0x64>)
 8003fae:	4a12      	ldr	r2, [pc, #72]	; (8003ff8 <_sbrk+0x68>)
 8003fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fb2:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <_sbrk+0x64>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d207      	bcs.n	8003fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fc0:	f00b fad4 	bl	800f56c <__errno>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	220c      	movs	r2, #12
 8003fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fce:	e009      	b.n	8003fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fd0:	4b08      	ldr	r3, [pc, #32]	; (8003ff4 <_sbrk+0x64>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fd6:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <_sbrk+0x64>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a05      	ldr	r2, [pc, #20]	; (8003ff4 <_sbrk+0x64>)
 8003fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	24100000 	.word	0x24100000
 8003ff0:	00000400 	.word	0x00000400
 8003ff4:	24000dd4 	.word	0x24000dd4
 8003ff8:	24000e80 	.word	0x24000e80

08003ffc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004000:	4b32      	ldr	r3, [pc, #200]	; (80040cc <SystemInit+0xd0>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004006:	4a31      	ldr	r2, [pc, #196]	; (80040cc <SystemInit+0xd0>)
 8004008:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800400c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004010:	4b2f      	ldr	r3, [pc, #188]	; (80040d0 <SystemInit+0xd4>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	2b02      	cmp	r3, #2
 800401a:	d807      	bhi.n	800402c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800401c:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <SystemInit+0xd4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 030f 	bic.w	r3, r3, #15
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <SystemInit+0xd4>)
 8004026:	f043 0303 	orr.w	r3, r3, #3
 800402a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800402c:	4b29      	ldr	r3, [pc, #164]	; (80040d4 <SystemInit+0xd8>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <SystemInit+0xd8>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <SystemInit+0xd8>)
 800403a:	2200      	movs	r2, #0
 800403c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <SystemInit+0xd8>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	4924      	ldr	r1, [pc, #144]	; (80040d4 <SystemInit+0xd8>)
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <SystemInit+0xdc>)
 8004046:	4013      	ands	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800404a:	4b21      	ldr	r3, [pc, #132]	; (80040d0 <SystemInit+0xd4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004056:	4b1e      	ldr	r3, [pc, #120]	; (80040d0 <SystemInit+0xd4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f023 030f 	bic.w	r3, r3, #15
 800405e:	4a1c      	ldr	r2, [pc, #112]	; (80040d0 <SystemInit+0xd4>)
 8004060:	f043 0303 	orr.w	r3, r3, #3
 8004064:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8004066:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <SystemInit+0xd8>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <SystemInit+0xd8>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8004072:	4b18      	ldr	r3, [pc, #96]	; (80040d4 <SystemInit+0xd8>)
 8004074:	2200      	movs	r2, #0
 8004076:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004078:	4b16      	ldr	r3, [pc, #88]	; (80040d4 <SystemInit+0xd8>)
 800407a:	4a18      	ldr	r2, [pc, #96]	; (80040dc <SystemInit+0xe0>)
 800407c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <SystemInit+0xd8>)
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <SystemInit+0xe4>)
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004084:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <SystemInit+0xd8>)
 8004086:	4a17      	ldr	r2, [pc, #92]	; (80040e4 <SystemInit+0xe8>)
 8004088:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800408a:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <SystemInit+0xd8>)
 800408c:	2200      	movs	r2, #0
 800408e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <SystemInit+0xd8>)
 8004092:	4a14      	ldr	r2, [pc, #80]	; (80040e4 <SystemInit+0xe8>)
 8004094:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <SystemInit+0xd8>)
 8004098:	2200      	movs	r2, #0
 800409a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <SystemInit+0xd8>)
 800409e:	4a11      	ldr	r2, [pc, #68]	; (80040e4 <SystemInit+0xe8>)
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <SystemInit+0xd8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <SystemInit+0xd8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a09      	ldr	r2, [pc, #36]	; (80040d4 <SystemInit+0xd8>)
 80040ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <SystemInit+0xd8>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <SystemInit+0xec>)
 80040bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80040c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80040c2:	bf00      	nop
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	e000ed00 	.word	0xe000ed00
 80040d0:	52002000 	.word	0x52002000
 80040d4:	58024400 	.word	0x58024400
 80040d8:	eaf6ed7f 	.word	0xeaf6ed7f
 80040dc:	02020200 	.word	0x02020200
 80040e0:	01ff0000 	.word	0x01ff0000
 80040e4:	01010280 	.word	0x01010280
 80040e8:	52004000 	.word	0x52004000

080040ec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80040f0:	4b22      	ldr	r3, [pc, #136]	; (800417c <MX_USART1_UART_Init+0x90>)
 80040f2:	4a23      	ldr	r2, [pc, #140]	; (8004180 <MX_USART1_UART_Init+0x94>)
 80040f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80040f6:	4b21      	ldr	r3, [pc, #132]	; (800417c <MX_USART1_UART_Init+0x90>)
 80040f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800410a:	4b1c      	ldr	r3, [pc, #112]	; (800417c <MX_USART1_UART_Init+0x90>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004112:	220c      	movs	r2, #12
 8004114:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	4b19      	ldr	r3, [pc, #100]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <MX_USART1_UART_Init+0x90>)
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004122:	4b16      	ldr	r3, [pc, #88]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <MX_USART1_UART_Init+0x90>)
 800412a:	2200      	movs	r2, #0
 800412c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004130:	2200      	movs	r2, #0
 8004132:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004134:	4811      	ldr	r0, [pc, #68]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004136:	f009 f9ae 	bl	800d496 <HAL_UART_Init>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8004140:	f7fd fab4 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004144:	2100      	movs	r1, #0
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <MX_USART1_UART_Init+0x90>)
 8004148:	f00b f844 	bl	800f1d4 <HAL_UARTEx_SetTxFifoThreshold>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8004152:	f7fd faab 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004156:	2100      	movs	r1, #0
 8004158:	4808      	ldr	r0, [pc, #32]	; (800417c <MX_USART1_UART_Init+0x90>)
 800415a:	f00b f879 	bl	800f250 <HAL_UARTEx_SetRxFifoThreshold>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8004164:	f7fd faa2 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004168:	4804      	ldr	r0, [pc, #16]	; (800417c <MX_USART1_UART_Init+0x90>)
 800416a:	f00a fffa 	bl	800f162 <HAL_UARTEx_DisableFifoMode>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8004174:	f7fd fa9a 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	24000dd8 	.word	0x24000dd8
 8004180:	40011000 	.word	0x40011000

08004184 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b0ba      	sub	sp, #232	; 0xe8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800418c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]
 8004196:	609a      	str	r2, [r3, #8]
 8004198:	60da      	str	r2, [r3, #12]
 800419a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	22c0      	movs	r2, #192	; 0xc0
 80041a2:	2100      	movs	r1, #0
 80041a4:	4618      	mov	r0, r3
 80041a6:	f00b fa0b 	bl	800f5c0 <memset>
  if(uartHandle->Instance==USART1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a2b      	ldr	r2, [pc, #172]	; (800425c <HAL_UART_MspInit+0xd8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d14e      	bne.n	8004252 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80041b4:	f04f 0201 	mov.w	r2, #1
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c6:	f107 0310 	add.w	r3, r7, #16
 80041ca:	4618      	mov	r0, r3
 80041cc:	f007 f9cc 	bl	800b568 <HAL_RCCEx_PeriphCLKConfig>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80041d6:	f7fd fa69 	bl	80016ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_UART_MspInit+0xdc>)
 80041dc:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_UART_MspInit+0xdc>)
 80041e2:	f043 0310 	orr.w	r3, r3, #16
 80041e6:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 80041ea:	4b1d      	ldr	r3, [pc, #116]	; (8004260 <HAL_UART_MspInit+0xdc>)
 80041ec:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_UART_MspInit+0xdc>)
 80041fa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80041fe:	4a18      	ldr	r2, [pc, #96]	; (8004260 <HAL_UART_MspInit+0xdc>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_UART_MspInit+0xdc>)
 800420a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8004216:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800421a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421e:	2302      	movs	r3, #2
 8004220:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800422a:	2300      	movs	r3, #0
 800422c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004230:	2307      	movs	r3, #7
 8004232:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004236:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800423a:	4619      	mov	r1, r3
 800423c:	4809      	ldr	r0, [pc, #36]	; (8004264 <HAL_UART_MspInit+0xe0>)
 800423e:	f004 fc3d 	bl	8008abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004242:	2200      	movs	r2, #0
 8004244:	2100      	movs	r1, #0
 8004246:	2025      	movs	r0, #37	; 0x25
 8004248:	f000 f9c9 	bl	80045de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800424c:	2025      	movs	r0, #37	; 0x25
 800424e:	f000 f9e0 	bl	8004612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004252:	bf00      	nop
 8004254:	37e8      	adds	r7, #232	; 0xe8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40011000 	.word	0x40011000
 8004260:	58024400 	.word	0x58024400
 8004264:	58020000 	.word	0x58020000

08004268 <Reset_Handler>:
 8004268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042a0 <LoopFillZerobss+0xe>
 800426c:	f7ff fec6 	bl	8003ffc <SystemInit>
 8004270:	480c      	ldr	r0, [pc, #48]	; (80042a4 <LoopFillZerobss+0x12>)
 8004272:	490d      	ldr	r1, [pc, #52]	; (80042a8 <LoopFillZerobss+0x16>)
 8004274:	4a0d      	ldr	r2, [pc, #52]	; (80042ac <LoopFillZerobss+0x1a>)
 8004276:	2300      	movs	r3, #0
 8004278:	e002      	b.n	8004280 <LoopCopyDataInit>

0800427a <CopyDataInit>:
 800427a:	58d4      	ldr	r4, [r2, r3]
 800427c:	50c4      	str	r4, [r0, r3]
 800427e:	3304      	adds	r3, #4

08004280 <LoopCopyDataInit>:
 8004280:	18c4      	adds	r4, r0, r3
 8004282:	428c      	cmp	r4, r1
 8004284:	d3f9      	bcc.n	800427a <CopyDataInit>
 8004286:	4a0a      	ldr	r2, [pc, #40]	; (80042b0 <LoopFillZerobss+0x1e>)
 8004288:	4c0a      	ldr	r4, [pc, #40]	; (80042b4 <LoopFillZerobss+0x22>)
 800428a:	2300      	movs	r3, #0
 800428c:	e001      	b.n	8004292 <LoopFillZerobss>

0800428e <FillZerobss>:
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	3204      	adds	r2, #4

08004292 <LoopFillZerobss>:
 8004292:	42a2      	cmp	r2, r4
 8004294:	d3fb      	bcc.n	800428e <FillZerobss>
 8004296:	f00b f96f 	bl	800f578 <__libc_init_array>
 800429a:	f7fd f911 	bl	80014c0 <main>
 800429e:	4770      	bx	lr
 80042a0:	24100000 	.word	0x24100000
 80042a4:	24000000 	.word	0x24000000
 80042a8:	240000b8 	.word	0x240000b8
 80042ac:	08010d6c 	.word	0x08010d6c
 80042b0:	240000b8 	.word	0x240000b8
 80042b4:	24000e80 	.word	0x24000e80

080042b8 <ADC_IRQHandler>:
 80042b8:	e7fe      	b.n	80042b8 <ADC_IRQHandler>
	...

080042bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042c2:	2003      	movs	r0, #3
 80042c4:	f000 f980 	bl	80045c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80042c8:	f006 ff78 	bl	800b1bc <HAL_RCC_GetSysClockFreq>
 80042cc:	4602      	mov	r2, r0
 80042ce:	4b15      	ldr	r3, [pc, #84]	; (8004324 <HAL_Init+0x68>)
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	0a1b      	lsrs	r3, r3, #8
 80042d4:	f003 030f 	and.w	r3, r3, #15
 80042d8:	4913      	ldr	r1, [pc, #76]	; (8004328 <HAL_Init+0x6c>)
 80042da:	5ccb      	ldrb	r3, [r1, r3]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	fa22 f303 	lsr.w	r3, r2, r3
 80042e4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_Init+0x68>)
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	4a0e      	ldr	r2, [pc, #56]	; (8004328 <HAL_Init+0x6c>)
 80042f0:	5cd3      	ldrb	r3, [r2, r3]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <HAL_Init+0x70>)
 80042fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004300:	4a0b      	ldr	r2, [pc, #44]	; (8004330 <HAL_Init+0x74>)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004306:	2000      	movs	r0, #0
 8004308:	f000 f814 	bl	8004334 <HAL_InitTick>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e002      	b.n	800431c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004316:	f7ff fdad 	bl	8003e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	58024400 	.word	0x58024400
 8004328:	08010c84 	.word	0x08010c84
 800432c:	24000048 	.word	0x24000048
 8004330:	24000044 	.word	0x24000044

08004334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800433c:	4b15      	ldr	r3, [pc, #84]	; (8004394 <HAL_InitTick+0x60>)
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e021      	b.n	800438c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004348:	4b13      	ldr	r3, [pc, #76]	; (8004398 <HAL_InitTick+0x64>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_InitTick+0x60>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	4619      	mov	r1, r3
 8004352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004356:	fbb3 f3f1 	udiv	r3, r3, r1
 800435a:	fbb2 f3f3 	udiv	r3, r2, r3
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f965 	bl	800462e <HAL_SYSTICK_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e00e      	b.n	800438c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b0f      	cmp	r3, #15
 8004372:	d80a      	bhi.n	800438a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004374:	2200      	movs	r2, #0
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800437c:	f000 f92f 	bl	80045de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004380:	4a06      	ldr	r2, [pc, #24]	; (800439c <HAL_InitTick+0x68>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e000      	b.n	800438c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
}
 800438c:	4618      	mov	r0, r3
 800438e:	3708      	adds	r7, #8
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	24000050 	.word	0x24000050
 8004398:	24000044 	.word	0x24000044
 800439c:	2400004c 	.word	0x2400004c

080043a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_IncTick+0x20>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	461a      	mov	r2, r3
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_IncTick+0x24>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	4a04      	ldr	r2, [pc, #16]	; (80043c4 <HAL_IncTick+0x24>)
 80043b2:	6013      	str	r3, [r2, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	24000050 	.word	0x24000050
 80043c4:	24000e6c 	.word	0x24000e6c

080043c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
  return uwTick;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <HAL_GetTick+0x14>)
 80043ce:	681b      	ldr	r3, [r3, #0]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	24000e6c 	.word	0x24000e6c

080043e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80043e8:	f7ff ffee 	bl	80043c8 <HAL_GetTick>
 80043ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f8:	d005      	beq.n	8004406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80043fa:	4b0a      	ldr	r3, [pc, #40]	; (8004424 <HAL_Delay+0x44>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4413      	add	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004406:	bf00      	nop
 8004408:	f7ff ffde 	bl	80043c8 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	429a      	cmp	r2, r3
 8004416:	d8f7      	bhi.n	8004408 <HAL_Delay+0x28>
  {
  }
}
 8004418:	bf00      	nop
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	24000050 	.word	0x24000050

08004428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <__NVIC_SetPriorityGrouping+0x40>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004444:	4013      	ands	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004450:	4b06      	ldr	r3, [pc, #24]	; (800446c <__NVIC_SetPriorityGrouping+0x44>)
 8004452:	4313      	orrs	r3, r2
 8004454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004456:	4a04      	ldr	r2, [pc, #16]	; (8004468 <__NVIC_SetPriorityGrouping+0x40>)
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	60d3      	str	r3, [r2, #12]
}
 800445c:	bf00      	nop
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	e000ed00 	.word	0xe000ed00
 800446c:	05fa0000 	.word	0x05fa0000

08004470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <__NVIC_GetPriorityGrouping+0x18>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	0a1b      	lsrs	r3, r3, #8
 800447a:	f003 0307 	and.w	r3, r3, #7
}
 800447e:	4618      	mov	r0, r3
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000ed00 	.word	0xe000ed00

0800448c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800449a:	2b00      	cmp	r3, #0
 800449c:	db0b      	blt.n	80044b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800449e:	88fb      	ldrh	r3, [r7, #6]
 80044a0:	f003 021f 	and.w	r2, r3, #31
 80044a4:	4907      	ldr	r1, [pc, #28]	; (80044c4 <__NVIC_EnableIRQ+0x38>)
 80044a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	2001      	movs	r0, #1
 80044ae:	fa00 f202 	lsl.w	r2, r0, r2
 80044b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044b6:	bf00      	nop
 80044b8:	370c      	adds	r7, #12
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	e000e100 	.word	0xe000e100

080044c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	6039      	str	r1, [r7, #0]
 80044d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	db0a      	blt.n	80044f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	490c      	ldr	r1, [pc, #48]	; (8004514 <__NVIC_SetPriority+0x4c>)
 80044e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e6:	0112      	lsls	r2, r2, #4
 80044e8:	b2d2      	uxtb	r2, r2
 80044ea:	440b      	add	r3, r1
 80044ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044f0:	e00a      	b.n	8004508 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	4908      	ldr	r1, [pc, #32]	; (8004518 <__NVIC_SetPriority+0x50>)
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	3b04      	subs	r3, #4
 8004500:	0112      	lsls	r2, r2, #4
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	440b      	add	r3, r1
 8004506:	761a      	strb	r2, [r3, #24]
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	e000e100 	.word	0xe000e100
 8004518:	e000ed00 	.word	0xe000ed00

0800451c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800451c:	b480      	push	{r7}
 800451e:	b089      	sub	sp, #36	; 0x24
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f1c3 0307 	rsb	r3, r3, #7
 8004536:	2b04      	cmp	r3, #4
 8004538:	bf28      	it	cs
 800453a:	2304      	movcs	r3, #4
 800453c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	3304      	adds	r3, #4
 8004542:	2b06      	cmp	r3, #6
 8004544:	d902      	bls.n	800454c <NVIC_EncodePriority+0x30>
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	3b03      	subs	r3, #3
 800454a:	e000      	b.n	800454e <NVIC_EncodePriority+0x32>
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	401a      	ands	r2, r3
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fa01 f303 	lsl.w	r3, r1, r3
 800456e:	43d9      	mvns	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004574:	4313      	orrs	r3, r2
         );
}
 8004576:	4618      	mov	r0, r3
 8004578:	3724      	adds	r7, #36	; 0x24
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
	...

08004584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3b01      	subs	r3, #1
 8004590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004594:	d301      	bcc.n	800459a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004596:	2301      	movs	r3, #1
 8004598:	e00f      	b.n	80045ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <SysTick_Config+0x40>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3b01      	subs	r3, #1
 80045a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045a2:	210f      	movs	r1, #15
 80045a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80045a8:	f7ff ff8e 	bl	80044c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <SysTick_Config+0x40>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045b2:	4b04      	ldr	r3, [pc, #16]	; (80045c4 <SysTick_Config+0x40>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3708      	adds	r7, #8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	e000e010 	.word	0xe000e010

080045c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff ff29 	bl	8004428 <__NVIC_SetPriorityGrouping>
}
 80045d6:	bf00      	nop
 80045d8:	3708      	adds	r7, #8
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b086      	sub	sp, #24
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4603      	mov	r3, r0
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
 80045ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80045ec:	f7ff ff40 	bl	8004470 <__NVIC_GetPriorityGrouping>
 80045f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	6978      	ldr	r0, [r7, #20]
 80045f8:	f7ff ff90 	bl	800451c <NVIC_EncodePriority>
 80045fc:	4602      	mov	r2, r0
 80045fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff ff5f 	bl	80044c8 <__NVIC_SetPriority>
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	4603      	mov	r3, r0
 800461a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800461c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff ff33 	bl	800448c <__NVIC_EnableIRQ>
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7ff ffa4 	bl	8004584 <SysTick_Config>
 800463c:	4603      	mov	r3, r0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e069      	b.n	800472e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7fc f848 	bl	80006fc <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6819      	ldr	r1, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	4b2a      	ldr	r3, [pc, #168]	; (8004738 <HAL_DCMI_Init+0xf0>)
 800468e:	400b      	ands	r3, r1
 8004690:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6819      	ldr	r1, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685a      	ldr	r2, [r3, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80046a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80046b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80046be:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80046ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80046d6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b10      	cmp	r3, #16
 80046e6:	d112      	bne.n	800470e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	7f1b      	ldrb	r3, [r3, #28]
 80046ec:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	7f5b      	ldrb	r3, [r3, #29]
 80046f2:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80046f4:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	7f9b      	ldrb	r3, [r3, #30]
 80046fa:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80046fc:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7fdb      	ldrb	r3, [r3, #31]
 8004704:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800470a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800470c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68da      	ldr	r2, [r3, #12]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f042 021e 	orr.w	r2, r2, #30
 800471c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	ffe0f007 	.word	0xffe0f007

0800473c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_DCMI_Start_DMA+0x1c>
 8004754:	2302      	movs	r3, #2
 8004756:	e0ab      	b.n	80048b0 <HAL_DCMI_Start_DMA+0x174>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004776:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0202 	bic.w	r2, r2, #2
 8004786:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	4a46      	ldr	r2, [pc, #280]	; (80048b8 <HAL_DCMI_Start_DMA+0x17c>)
 800479e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a4:	4a45      	ldr	r2, [pc, #276]	; (80048bc <HAL_DCMI_Start_DMA+0x180>)
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047ac:	2200      	movs	r2, #0
 80047ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ce:	d219      	bcs.n	8004804 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	3328      	adds	r3, #40	; 0x28
 80047da:	4619      	mov	r1, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	f000 fd90 	bl	8005304 <HAL_DMA_Start_IT>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d055      	beq.n	8004896 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e055      	b.n	80048b0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004808:	4a2b      	ldr	r2, [pc, #172]	; (80048b8 <HAL_DCMI_Start_DMA+0x17c>)
 800480a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2201      	movs	r2, #1
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800481e:	e009      	b.n	8004834 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	085a      	lsrs	r2, r3, #1
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	005a      	lsls	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483c:	d2f0      	bcs.n	8004820 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	1e9a      	subs	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3328      	adds	r3, #40	; 0x28
 8004866:	4619      	mov	r1, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	f003 fc73 	bl	800815c <HAL_DMAEx_MultiBufferStart_IT>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00c      	beq.n	8004896 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2240      	movs	r2, #64	; 0x40
 8004880:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e00c      	b.n	80048b0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f042 0201 	orr.w	r2, r2, #1
 80048a4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08004a85 	.word	0x08004a85
 80048bc:	08004bab 	.word	0x08004bab

080048c0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80048c8:	4b2b      	ldr	r3, [pc, #172]	; (8004978 <HAL_DCMI_Stop+0xb8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2b      	ldr	r2, [pc, #172]	; (800497c <HAL_DCMI_Stop+0xbc>)
 80048ce:	fba2 2303 	umull	r2, r3, r2, r3
 80048d2:	0a5b      	lsrs	r3, r3, #9
 80048d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048d8:	fb02 f303 	mul.w	r3, r2, r3
 80048dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_DCMI_Stop+0x30>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e03f      	b.n	8004970 <HAL_DCMI_Stop+0xb0>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0201 	bic.w	r2, r2, #1
 800490e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	3b01      	subs	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d108      	bne.n	800492e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004920:	f043 0220 	orr.w	r2, r3, #32
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	72fb      	strb	r3, [r7, #11]
      break;
 800492c:	e006      	b.n	800493c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0301 	and.w	r3, r3, #1
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e9      	bne.n	8004910 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800494a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004950:	4618      	mov	r0, r3
 8004952:	f000 ff41 	bl	80057d8 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800496e:	7afb      	ldrb	r3, [r7, #11]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	24000044 	.word	0x24000044
 800497c:	10624dd3 	.word	0x10624dd3

08004980 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2204      	movs	r2, #4
 80049a0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049a6:	f043 0202 	orr.w	r2, r3, #2
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2204      	movs	r2, #4
 80049b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	4a31      	ldr	r2, [pc, #196]	; (8004a80 <HAL_DCMI_IRQHandler+0x100>)
 80049bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c2:	4618      	mov	r0, r3
 80049c4:	f001 fa26 	bl	8005e14 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d016      	beq.n	8004a00 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2202      	movs	r2, #2
 80049d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049de:	f043 0201 	orr.w	r2, r3, #1
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f2:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_DCMI_IRQHandler+0x100>)
 80049f4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fa0a 	bl	8005e14 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2210      	movs	r2, #16
 8004a10:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff f93c 	bl	8003c90 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d006      	beq.n	8004a30 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2208      	movs	r2, #8
 8004a28:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff f946 	bl	8003cbc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01d      	beq.n	8004a76 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d107      	bne.n	8004a58 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 021e 	bic.w	r2, r2, #30
 8004a56:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0201 	bic.w	r2, r2, #1
 8004a66:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff f918 	bl	8003ca6 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004a76:	bf00      	nop
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	08004bab 	.word	0x08004bab

08004a84 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d043      	beq.n	8004b22 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d118      	bne.n	8004ae6 <DCMI_DMAXferCplt+0x62>
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d015      	beq.n	8004ae6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	00da      	lsls	r2, r3, #3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f003 fe9f 	bl	8008818 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	1e5a      	subs	r2, r3, #1
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ae4:	e044      	b.n	8004b70 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d13c      	bne.n	8004b70 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b08:	00da      	lsls	r2, r3, #3
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	2201      	movs	r2, #1
 8004b10:	4619      	mov	r1, r3
 8004b12:	f003 fe81 	bl	8008818 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
 8004b20:	e026      	b.n	8004b70 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d006      	beq.n	8004b40 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e017      	b.n	8004b70 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10f      	bne.n	8004b70 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b54:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	0099      	lsls	r1, r3, #2
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	440a      	add	r2, r1
 8004b66:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d112      	bne.n	8004ba2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d103      	bne.n	8004ba2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d009      	beq.n	8004bd6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004bd6:	68f8      	ldr	r0, [r7, #12]
 8004bd8:	f7ff f87b 	bl	8003cd2 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004bdc:	bf00      	nop
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bec:	f7ff fbec 	bl	80043c8 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e37f      	b.n	80052fc <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a66      	ldr	r2, [pc, #408]	; (8004d9c <HAL_DMA_Init+0x1b8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d04a      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a65      	ldr	r2, [pc, #404]	; (8004da0 <HAL_DMA_Init+0x1bc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d045      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a63      	ldr	r2, [pc, #396]	; (8004da4 <HAL_DMA_Init+0x1c0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d040      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a62      	ldr	r2, [pc, #392]	; (8004da8 <HAL_DMA_Init+0x1c4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d03b      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a60      	ldr	r2, [pc, #384]	; (8004dac <HAL_DMA_Init+0x1c8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d036      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a5f      	ldr	r2, [pc, #380]	; (8004db0 <HAL_DMA_Init+0x1cc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d031      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5d      	ldr	r2, [pc, #372]	; (8004db4 <HAL_DMA_Init+0x1d0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02c      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5c      	ldr	r2, [pc, #368]	; (8004db8 <HAL_DMA_Init+0x1d4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d027      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5a      	ldr	r2, [pc, #360]	; (8004dbc <HAL_DMA_Init+0x1d8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a59      	ldr	r2, [pc, #356]	; (8004dc0 <HAL_DMA_Init+0x1dc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d01d      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a57      	ldr	r2, [pc, #348]	; (8004dc4 <HAL_DMA_Init+0x1e0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a56      	ldr	r2, [pc, #344]	; (8004dc8 <HAL_DMA_Init+0x1e4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a54      	ldr	r2, [pc, #336]	; (8004dcc <HAL_DMA_Init+0x1e8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a53      	ldr	r2, [pc, #332]	; (8004dd0 <HAL_DMA_Init+0x1ec>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a51      	ldr	r2, [pc, #324]	; (8004dd4 <HAL_DMA_Init+0x1f0>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_DMA_Init+0xb8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a50      	ldr	r2, [pc, #320]	; (8004dd8 <HAL_DMA_Init+0x1f4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_DMA_Init+0xbc>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e000      	b.n	8004ca2 <HAL_DMA_Init+0xbe>
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 813c 	beq.w	8004f20 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a37      	ldr	r2, [pc, #220]	; (8004d9c <HAL_DMA_Init+0x1b8>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a36      	ldr	r2, [pc, #216]	; (8004da0 <HAL_DMA_Init+0x1bc>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a34      	ldr	r2, [pc, #208]	; (8004da4 <HAL_DMA_Init+0x1c0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a33      	ldr	r2, [pc, #204]	; (8004da8 <HAL_DMA_Init+0x1c4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a31      	ldr	r2, [pc, #196]	; (8004dac <HAL_DMA_Init+0x1c8>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a30      	ldr	r2, [pc, #192]	; (8004db0 <HAL_DMA_Init+0x1cc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	; (8004db4 <HAL_DMA_Init+0x1d0>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a2d      	ldr	r2, [pc, #180]	; (8004db8 <HAL_DMA_Init+0x1d4>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_DMA_Init+0x1d8>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <HAL_DMA_Init+0x1dc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <HAL_DMA_Init+0x1e0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a27      	ldr	r2, [pc, #156]	; (8004dc8 <HAL_DMA_Init+0x1e4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a25      	ldr	r2, [pc, #148]	; (8004dcc <HAL_DMA_Init+0x1e8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a24      	ldr	r2, [pc, #144]	; (8004dd0 <HAL_DMA_Init+0x1ec>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_DMA_Init+0x1f0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_Init+0x174>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a21      	ldr	r2, [pc, #132]	; (8004dd8 <HAL_DMA_Init+0x1f4>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d108      	bne.n	8004d6a <HAL_DMA_Init+0x186>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	e007      	b.n	8004d7a <HAL_DMA_Init+0x196>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d7a:	e02f      	b.n	8004ddc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d7c:	f7ff fb24 	bl	80043c8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b05      	cmp	r3, #5
 8004d88:	d928      	bls.n	8004ddc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2203      	movs	r2, #3
 8004d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e2af      	b.n	80052fc <HAL_DMA_Init+0x718>
 8004d9c:	40020010 	.word	0x40020010
 8004da0:	40020028 	.word	0x40020028
 8004da4:	40020040 	.word	0x40020040
 8004da8:	40020058 	.word	0x40020058
 8004dac:	40020070 	.word	0x40020070
 8004db0:	40020088 	.word	0x40020088
 8004db4:	400200a0 	.word	0x400200a0
 8004db8:	400200b8 	.word	0x400200b8
 8004dbc:	40020410 	.word	0x40020410
 8004dc0:	40020428 	.word	0x40020428
 8004dc4:	40020440 	.word	0x40020440
 8004dc8:	40020458 	.word	0x40020458
 8004dcc:	40020470 	.word	0x40020470
 8004dd0:	40020488 	.word	0x40020488
 8004dd4:	400204a0 	.word	0x400204a0
 8004dd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1c8      	bne.n	8004d7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	4b73      	ldr	r3, [pc, #460]	; (8004fc4 <HAL_DMA_Init+0x3e0>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d107      	bne.n	8004e40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b28      	cmp	r3, #40	; 0x28
 8004e46:	d903      	bls.n	8004e50 <HAL_DMA_Init+0x26c>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e4e:	d91f      	bls.n	8004e90 <HAL_DMA_Init+0x2ac>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b3e      	cmp	r3, #62	; 0x3e
 8004e56:	d903      	bls.n	8004e60 <HAL_DMA_Init+0x27c>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	2b42      	cmp	r3, #66	; 0x42
 8004e5e:	d917      	bls.n	8004e90 <HAL_DMA_Init+0x2ac>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b46      	cmp	r3, #70	; 0x46
 8004e66:	d903      	bls.n	8004e70 <HAL_DMA_Init+0x28c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b48      	cmp	r3, #72	; 0x48
 8004e6e:	d90f      	bls.n	8004e90 <HAL_DMA_Init+0x2ac>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b4e      	cmp	r3, #78	; 0x4e
 8004e76:	d903      	bls.n	8004e80 <HAL_DMA_Init+0x29c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b52      	cmp	r3, #82	; 0x52
 8004e7e:	d907      	bls.n	8004e90 <HAL_DMA_Init+0x2ac>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b73      	cmp	r3, #115	; 0x73
 8004e86:	d905      	bls.n	8004e94 <HAL_DMA_Init+0x2b0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	2b77      	cmp	r3, #119	; 0x77
 8004e8e:	d801      	bhi.n	8004e94 <HAL_DMA_Init+0x2b0>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_DMA_Init+0x2b2>
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ea0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0307 	bic.w	r3, r3, #7
 8004eb8:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d117      	bne.n	8004efc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00e      	beq.n	8004efc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f002 fbd6 	bl	8007690 <DMA_CheckFifoParam>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2240      	movs	r2, #64	; 0x40
 8004eee:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e1ff      	b.n	80052fc <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f002 fb11 	bl	800752c <DMA_CalcBaseAndBitshift>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	223f      	movs	r2, #63	; 0x3f
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	609a      	str	r2, [r3, #8]
 8004f1e:	e0fe      	b.n	800511e <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a28      	ldr	r2, [pc, #160]	; (8004fc8 <HAL_DMA_Init+0x3e4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d04a      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	; (8004fcc <HAL_DMA_Init+0x3e8>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d045      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a25      	ldr	r2, [pc, #148]	; (8004fd0 <HAL_DMA_Init+0x3ec>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d040      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a24      	ldr	r2, [pc, #144]	; (8004fd4 <HAL_DMA_Init+0x3f0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d03b      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a22      	ldr	r2, [pc, #136]	; (8004fd8 <HAL_DMA_Init+0x3f4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d036      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a21      	ldr	r2, [pc, #132]	; (8004fdc <HAL_DMA_Init+0x3f8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d031      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1f      	ldr	r2, [pc, #124]	; (8004fe0 <HAL_DMA_Init+0x3fc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02c      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a1e      	ldr	r2, [pc, #120]	; (8004fe4 <HAL_DMA_Init+0x400>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d027      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1c      	ldr	r2, [pc, #112]	; (8004fe8 <HAL_DMA_Init+0x404>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <HAL_DMA_Init+0x408>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01d      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <HAL_DMA_Init+0x40c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <HAL_DMA_Init+0x410>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a16      	ldr	r2, [pc, #88]	; (8004ff8 <HAL_DMA_Init+0x414>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a15      	ldr	r2, [pc, #84]	; (8004ffc <HAL_DMA_Init+0x418>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a13      	ldr	r2, [pc, #76]	; (8005000 <HAL_DMA_Init+0x41c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_DMA_Init+0x3dc>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <HAL_DMA_Init+0x420>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d123      	bne.n	8005008 <HAL_DMA_Init+0x424>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e022      	b.n	800500a <HAL_DMA_Init+0x426>
 8004fc4:	fe10803f 	.word	0xfe10803f
 8004fc8:	48022c08 	.word	0x48022c08
 8004fcc:	48022c1c 	.word	0x48022c1c
 8004fd0:	48022c30 	.word	0x48022c30
 8004fd4:	48022c44 	.word	0x48022c44
 8004fd8:	48022c58 	.word	0x48022c58
 8004fdc:	48022c6c 	.word	0x48022c6c
 8004fe0:	48022c80 	.word	0x48022c80
 8004fe4:	48022c94 	.word	0x48022c94
 8004fe8:	58025408 	.word	0x58025408
 8004fec:	5802541c 	.word	0x5802541c
 8004ff0:	58025430 	.word	0x58025430
 8004ff4:	58025444 	.word	0x58025444
 8004ff8:	58025458 	.word	0x58025458
 8004ffc:	5802546c 	.word	0x5802546c
 8005000:	58025480 	.word	0x58025480
 8005004:	58025494 	.word	0x58025494
 8005008:	2300      	movs	r3, #0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d07e      	beq.n	800510c <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a80      	ldr	r2, [pc, #512]	; (8005214 <HAL_DMA_Init+0x630>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d021      	beq.n	800505c <HAL_DMA_Init+0x478>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a7e      	ldr	r2, [pc, #504]	; (8005218 <HAL_DMA_Init+0x634>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d01c      	beq.n	800505c <HAL_DMA_Init+0x478>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7d      	ldr	r2, [pc, #500]	; (800521c <HAL_DMA_Init+0x638>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d017      	beq.n	800505c <HAL_DMA_Init+0x478>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a7b      	ldr	r2, [pc, #492]	; (8005220 <HAL_DMA_Init+0x63c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d012      	beq.n	800505c <HAL_DMA_Init+0x478>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a7a      	ldr	r2, [pc, #488]	; (8005224 <HAL_DMA_Init+0x640>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00d      	beq.n	800505c <HAL_DMA_Init+0x478>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a78      	ldr	r2, [pc, #480]	; (8005228 <HAL_DMA_Init+0x644>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d008      	beq.n	800505c <HAL_DMA_Init+0x478>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a77      	ldr	r2, [pc, #476]	; (800522c <HAL_DMA_Init+0x648>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <HAL_DMA_Init+0x478>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a75      	ldr	r2, [pc, #468]	; (8005230 <HAL_DMA_Init+0x64c>)
 800505a:	4293      	cmp	r3, r2
 800505c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4b6e      	ldr	r3, [pc, #440]	; (8005234 <HAL_DMA_Init+0x650>)
 800507a:	4013      	ands	r3, r2
 800507c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	2b40      	cmp	r3, #64	; 0x40
 8005084:	d008      	beq.n	8005098 <HAL_DMA_Init+0x4b4>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d102      	bne.n	8005094 <HAL_DMA_Init+0x4b0>
 800508e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005092:	e002      	b.n	800509a <HAL_DMA_Init+0x4b6>
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <HAL_DMA_Init+0x4b6>
 8005098:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	68d2      	ldr	r2, [r2, #12]
 800509e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	4b56      	ldr	r3, [pc, #344]	; (8005238 <HAL_DMA_Init+0x654>)
 80050e0:	4413      	add	r3, r2
 80050e2:	4a56      	ldr	r2, [pc, #344]	; (800523c <HAL_DMA_Init+0x658>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	009a      	lsls	r2, r3, #2
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f002 fa1b 	bl	800752c <DMA_CalcBaseAndBitshift>
 80050f6:	4603      	mov	r3, r0
 80050f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fe:	f003 031f 	and.w	r3, r3, #31
 8005102:	2201      	movs	r2, #1
 8005104:	409a      	lsls	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	605a      	str	r2, [r3, #4]
 800510a:	e008      	b.n	800511e <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2240      	movs	r2, #64	; 0x40
 8005110:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2203      	movs	r2, #3
 8005116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e0ee      	b.n	80052fc <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_DMA_Init+0x65c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d072      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a45      	ldr	r2, [pc, #276]	; (8005244 <HAL_DMA_Init+0x660>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d06d      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a44      	ldr	r2, [pc, #272]	; (8005248 <HAL_DMA_Init+0x664>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d068      	beq.n	800520e <HAL_DMA_Init+0x62a>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a42      	ldr	r2, [pc, #264]	; (800524c <HAL_DMA_Init+0x668>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d063      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a41      	ldr	r2, [pc, #260]	; (8005250 <HAL_DMA_Init+0x66c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d05e      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3f      	ldr	r2, [pc, #252]	; (8005254 <HAL_DMA_Init+0x670>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d059      	beq.n	800520e <HAL_DMA_Init+0x62a>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3e      	ldr	r2, [pc, #248]	; (8005258 <HAL_DMA_Init+0x674>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d054      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3c      	ldr	r2, [pc, #240]	; (800525c <HAL_DMA_Init+0x678>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d04f      	beq.n	800520e <HAL_DMA_Init+0x62a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3b      	ldr	r2, [pc, #236]	; (8005260 <HAL_DMA_Init+0x67c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d04a      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a39      	ldr	r2, [pc, #228]	; (8005264 <HAL_DMA_Init+0x680>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d045      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a38      	ldr	r2, [pc, #224]	; (8005268 <HAL_DMA_Init+0x684>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d040      	beq.n	800520e <HAL_DMA_Init+0x62a>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a36      	ldr	r2, [pc, #216]	; (800526c <HAL_DMA_Init+0x688>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d03b      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a35      	ldr	r2, [pc, #212]	; (8005270 <HAL_DMA_Init+0x68c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d036      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a33      	ldr	r2, [pc, #204]	; (8005274 <HAL_DMA_Init+0x690>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d031      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a32      	ldr	r2, [pc, #200]	; (8005278 <HAL_DMA_Init+0x694>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d02c      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a30      	ldr	r2, [pc, #192]	; (800527c <HAL_DMA_Init+0x698>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d027      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_DMA_Init+0x630>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a12      	ldr	r2, [pc, #72]	; (8005218 <HAL_DMA_Init+0x634>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a11      	ldr	r2, [pc, #68]	; (800521c <HAL_DMA_Init+0x638>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d018      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0f      	ldr	r2, [pc, #60]	; (8005220 <HAL_DMA_Init+0x63c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d013      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0e      	ldr	r2, [pc, #56]	; (8005224 <HAL_DMA_Init+0x640>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d00e      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0c      	ldr	r2, [pc, #48]	; (8005228 <HAL_DMA_Init+0x644>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d009      	beq.n	800520e <HAL_DMA_Init+0x62a>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a0b      	ldr	r2, [pc, #44]	; (800522c <HAL_DMA_Init+0x648>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d004      	beq.n	800520e <HAL_DMA_Init+0x62a>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a09      	ldr	r2, [pc, #36]	; (8005230 <HAL_DMA_Init+0x64c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d138      	bne.n	8005280 <HAL_DMA_Init+0x69c>
 800520e:	2301      	movs	r3, #1
 8005210:	e037      	b.n	8005282 <HAL_DMA_Init+0x69e>
 8005212:	bf00      	nop
 8005214:	58025408 	.word	0x58025408
 8005218:	5802541c 	.word	0x5802541c
 800521c:	58025430 	.word	0x58025430
 8005220:	58025444 	.word	0x58025444
 8005224:	58025458 	.word	0x58025458
 8005228:	5802546c 	.word	0x5802546c
 800522c:	58025480 	.word	0x58025480
 8005230:	58025494 	.word	0x58025494
 8005234:	fffe000f 	.word	0xfffe000f
 8005238:	a7fdabf8 	.word	0xa7fdabf8
 800523c:	cccccccd 	.word	0xcccccccd
 8005240:	40020010 	.word	0x40020010
 8005244:	40020028 	.word	0x40020028
 8005248:	40020040 	.word	0x40020040
 800524c:	40020058 	.word	0x40020058
 8005250:	40020070 	.word	0x40020070
 8005254:	40020088 	.word	0x40020088
 8005258:	400200a0 	.word	0x400200a0
 800525c:	400200b8 	.word	0x400200b8
 8005260:	40020410 	.word	0x40020410
 8005264:	40020428 	.word	0x40020428
 8005268:	40020440 	.word	0x40020440
 800526c:	40020458 	.word	0x40020458
 8005270:	40020470 	.word	0x40020470
 8005274:	40020488 	.word	0x40020488
 8005278:	400204a0 	.word	0x400204a0
 800527c:	400204b8 	.word	0x400204b8
 8005280:	2300      	movs	r3, #0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d032      	beq.n	80052ec <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f002 fa7e 	bl	8007788 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b80      	cmp	r3, #128	; 0x80
 8005292:	d102      	bne.n	800529a <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80052ae:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d010      	beq.n	80052da <HAL_DMA_Init+0x6f6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d80c      	bhi.n	80052da <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f002 fafb 	bl	80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ca:	2200      	movs	r2, #0
 80052cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	e008      	b.n	80052ec <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e226      	b.n	800576e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005326:	2b01      	cmp	r3, #1
 8005328:	d101      	bne.n	800532e <HAL_DMA_Start_IT+0x2a>
 800532a:	2302      	movs	r3, #2
 800532c:	e21f      	b.n	800576e <HAL_DMA_Start_IT+0x46a>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b01      	cmp	r3, #1
 8005340:	f040 820a 	bne.w	8005758 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2202      	movs	r2, #2
 8005348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a68      	ldr	r2, [pc, #416]	; (80054f8 <HAL_DMA_Start_IT+0x1f4>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d04a      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a66      	ldr	r2, [pc, #408]	; (80054fc <HAL_DMA_Start_IT+0x1f8>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d045      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a65      	ldr	r2, [pc, #404]	; (8005500 <HAL_DMA_Start_IT+0x1fc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d040      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a63      	ldr	r2, [pc, #396]	; (8005504 <HAL_DMA_Start_IT+0x200>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d03b      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a62      	ldr	r2, [pc, #392]	; (8005508 <HAL_DMA_Start_IT+0x204>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d036      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a60      	ldr	r2, [pc, #384]	; (800550c <HAL_DMA_Start_IT+0x208>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d031      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a5f      	ldr	r2, [pc, #380]	; (8005510 <HAL_DMA_Start_IT+0x20c>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d02c      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a5d      	ldr	r2, [pc, #372]	; (8005514 <HAL_DMA_Start_IT+0x210>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d027      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a5c      	ldr	r2, [pc, #368]	; (8005518 <HAL_DMA_Start_IT+0x214>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a5a      	ldr	r2, [pc, #360]	; (800551c <HAL_DMA_Start_IT+0x218>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01d      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a59      	ldr	r2, [pc, #356]	; (8005520 <HAL_DMA_Start_IT+0x21c>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a57      	ldr	r2, [pc, #348]	; (8005524 <HAL_DMA_Start_IT+0x220>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a56      	ldr	r2, [pc, #344]	; (8005528 <HAL_DMA_Start_IT+0x224>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a54      	ldr	r2, [pc, #336]	; (800552c <HAL_DMA_Start_IT+0x228>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a53      	ldr	r2, [pc, #332]	; (8005530 <HAL_DMA_Start_IT+0x22c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_DMA_Start_IT+0xee>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a51      	ldr	r2, [pc, #324]	; (8005534 <HAL_DMA_Start_IT+0x230>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d108      	bne.n	8005404 <HAL_DMA_Start_IT+0x100>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e007      	b.n	8005414 <HAL_DMA_Start_IT+0x110>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0201 	bic.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f001 fea2 	bl	8007164 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a34      	ldr	r2, [pc, #208]	; (80054f8 <HAL_DMA_Start_IT+0x1f4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d04a      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_DMA_Start_IT+0x1f8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d045      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a31      	ldr	r2, [pc, #196]	; (8005500 <HAL_DMA_Start_IT+0x1fc>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d040      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a30      	ldr	r2, [pc, #192]	; (8005504 <HAL_DMA_Start_IT+0x200>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d03b      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2e      	ldr	r2, [pc, #184]	; (8005508 <HAL_DMA_Start_IT+0x204>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d036      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a2d      	ldr	r2, [pc, #180]	; (800550c <HAL_DMA_Start_IT+0x208>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d031      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2b      	ldr	r2, [pc, #172]	; (8005510 <HAL_DMA_Start_IT+0x20c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02c      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2a      	ldr	r2, [pc, #168]	; (8005514 <HAL_DMA_Start_IT+0x210>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d027      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a28      	ldr	r2, [pc, #160]	; (8005518 <HAL_DMA_Start_IT+0x214>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_DMA_Start_IT+0x218>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d01d      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a25      	ldr	r2, [pc, #148]	; (8005520 <HAL_DMA_Start_IT+0x21c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a24      	ldr	r2, [pc, #144]	; (8005524 <HAL_DMA_Start_IT+0x220>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a22      	ldr	r2, [pc, #136]	; (8005528 <HAL_DMA_Start_IT+0x224>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a21      	ldr	r2, [pc, #132]	; (800552c <HAL_DMA_Start_IT+0x228>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1f      	ldr	r2, [pc, #124]	; (8005530 <HAL_DMA_Start_IT+0x22c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_DMA_Start_IT+0x1bc>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1e      	ldr	r2, [pc, #120]	; (8005534 <HAL_DMA_Start_IT+0x230>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d101      	bne.n	80054c4 <HAL_DMA_Start_IT+0x1c0>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <HAL_DMA_Start_IT+0x1c2>
 80054c4:	2300      	movs	r3, #0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d036      	beq.n	8005538 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f023 021e 	bic.w	r2, r3, #30
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0216 	orr.w	r2, r2, #22
 80054dc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d03e      	beq.n	8005564 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0208 	orr.w	r2, r2, #8
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e035      	b.n	8005564 <HAL_DMA_Start_IT+0x260>
 80054f8:	40020010 	.word	0x40020010
 80054fc:	40020028 	.word	0x40020028
 8005500:	40020040 	.word	0x40020040
 8005504:	40020058 	.word	0x40020058
 8005508:	40020070 	.word	0x40020070
 800550c:	40020088 	.word	0x40020088
 8005510:	400200a0 	.word	0x400200a0
 8005514:	400200b8 	.word	0x400200b8
 8005518:	40020410 	.word	0x40020410
 800551c:	40020428 	.word	0x40020428
 8005520:	40020440 	.word	0x40020440
 8005524:	40020458 	.word	0x40020458
 8005528:	40020470 	.word	0x40020470
 800552c:	40020488 	.word	0x40020488
 8005530:	400204a0 	.word	0x400204a0
 8005534:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 020e 	bic.w	r2, r3, #14
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f042 020a 	orr.w	r2, r2, #10
 800554a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d007      	beq.n	8005564 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0204 	orr.w	r2, r2, #4
 8005562:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a83      	ldr	r2, [pc, #524]	; (8005778 <HAL_DMA_Start_IT+0x474>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d072      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a82      	ldr	r2, [pc, #520]	; (800577c <HAL_DMA_Start_IT+0x478>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d06d      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a80      	ldr	r2, [pc, #512]	; (8005780 <HAL_DMA_Start_IT+0x47c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d068      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a7f      	ldr	r2, [pc, #508]	; (8005784 <HAL_DMA_Start_IT+0x480>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d063      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a7d      	ldr	r2, [pc, #500]	; (8005788 <HAL_DMA_Start_IT+0x484>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d05e      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7c      	ldr	r2, [pc, #496]	; (800578c <HAL_DMA_Start_IT+0x488>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d059      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a7a      	ldr	r2, [pc, #488]	; (8005790 <HAL_DMA_Start_IT+0x48c>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d054      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a79      	ldr	r2, [pc, #484]	; (8005794 <HAL_DMA_Start_IT+0x490>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04f      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a77      	ldr	r2, [pc, #476]	; (8005798 <HAL_DMA_Start_IT+0x494>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d04a      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a76      	ldr	r2, [pc, #472]	; (800579c <HAL_DMA_Start_IT+0x498>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d045      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a74      	ldr	r2, [pc, #464]	; (80057a0 <HAL_DMA_Start_IT+0x49c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d040      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a73      	ldr	r2, [pc, #460]	; (80057a4 <HAL_DMA_Start_IT+0x4a0>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d03b      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_DMA_Start_IT+0x4a4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d036      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a70      	ldr	r2, [pc, #448]	; (80057ac <HAL_DMA_Start_IT+0x4a8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d031      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a6e      	ldr	r2, [pc, #440]	; (80057b0 <HAL_DMA_Start_IT+0x4ac>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02c      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6d      	ldr	r2, [pc, #436]	; (80057b4 <HAL_DMA_Start_IT+0x4b0>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d027      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a6b      	ldr	r2, [pc, #428]	; (80057b8 <HAL_DMA_Start_IT+0x4b4>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d022      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a6a      	ldr	r2, [pc, #424]	; (80057bc <HAL_DMA_Start_IT+0x4b8>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d01d      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_DMA_Start_IT+0x4bc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d018      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a67      	ldr	r2, [pc, #412]	; (80057c4 <HAL_DMA_Start_IT+0x4c0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a65      	ldr	r2, [pc, #404]	; (80057c8 <HAL_DMA_Start_IT+0x4c4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00e      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a64      	ldr	r2, [pc, #400]	; (80057cc <HAL_DMA_Start_IT+0x4c8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a62      	ldr	r2, [pc, #392]	; (80057d0 <HAL_DMA_Start_IT+0x4cc>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d004      	beq.n	8005654 <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a61      	ldr	r2, [pc, #388]	; (80057d4 <HAL_DMA_Start_IT+0x4d0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d101      	bne.n	8005658 <HAL_DMA_Start_IT+0x354>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <HAL_DMA_Start_IT+0x356>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01a      	beq.n	8005694 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d007      	beq.n	800567c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800567a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d007      	beq.n	8005694 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005692:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a37      	ldr	r2, [pc, #220]	; (8005778 <HAL_DMA_Start_IT+0x474>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d04a      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a36      	ldr	r2, [pc, #216]	; (800577c <HAL_DMA_Start_IT+0x478>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d045      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a34      	ldr	r2, [pc, #208]	; (8005780 <HAL_DMA_Start_IT+0x47c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d040      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a33      	ldr	r2, [pc, #204]	; (8005784 <HAL_DMA_Start_IT+0x480>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d03b      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a31      	ldr	r2, [pc, #196]	; (8005788 <HAL_DMA_Start_IT+0x484>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d036      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a30      	ldr	r2, [pc, #192]	; (800578c <HAL_DMA_Start_IT+0x488>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d031      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <HAL_DMA_Start_IT+0x48c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02c      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <HAL_DMA_Start_IT+0x490>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d027      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <HAL_DMA_Start_IT+0x494>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d022      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <HAL_DMA_Start_IT+0x498>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d01d      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a28      	ldr	r2, [pc, #160]	; (80057a0 <HAL_DMA_Start_IT+0x49c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d018      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a27      	ldr	r2, [pc, #156]	; (80057a4 <HAL_DMA_Start_IT+0x4a0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <HAL_DMA_Start_IT+0x4a4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00e      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a24      	ldr	r2, [pc, #144]	; (80057ac <HAL_DMA_Start_IT+0x4a8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d009      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a22      	ldr	r2, [pc, #136]	; (80057b0 <HAL_DMA_Start_IT+0x4ac>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_DMA_Start_IT+0x430>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a21      	ldr	r2, [pc, #132]	; (80057b4 <HAL_DMA_Start_IT+0x4b0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <HAL_DMA_Start_IT+0x442>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	e012      	b.n	800576c <HAL_DMA_Start_IT+0x468>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	e009      	b.n	800576c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800575e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800576c:	7dfb      	ldrb	r3, [r7, #23]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
 80057b8:	58025408 	.word	0x58025408
 80057bc:	5802541c 	.word	0x5802541c
 80057c0:	58025430 	.word	0x58025430
 80057c4:	58025444 	.word	0x58025444
 80057c8:	58025458 	.word	0x58025458
 80057cc:	5802546c 	.word	0x5802546c
 80057d0:	58025480 	.word	0x58025480
 80057d4:	58025494 	.word	0x58025494

080057d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80057e0:	f7fe fdf2 	bl	80043c8 <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e2dc      	b.n	8005daa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d008      	beq.n	800580e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2280      	movs	r2, #128	; 0x80
 8005800:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e2cd      	b.n	8005daa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a76      	ldr	r2, [pc, #472]	; (80059ec <HAL_DMA_Abort+0x214>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d04a      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a74      	ldr	r2, [pc, #464]	; (80059f0 <HAL_DMA_Abort+0x218>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d045      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a73      	ldr	r2, [pc, #460]	; (80059f4 <HAL_DMA_Abort+0x21c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a71      	ldr	r2, [pc, #452]	; (80059f8 <HAL_DMA_Abort+0x220>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d03b      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a70      	ldr	r2, [pc, #448]	; (80059fc <HAL_DMA_Abort+0x224>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d036      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a6e      	ldr	r2, [pc, #440]	; (8005a00 <HAL_DMA_Abort+0x228>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d031      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6d      	ldr	r2, [pc, #436]	; (8005a04 <HAL_DMA_Abort+0x22c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d02c      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6b      	ldr	r2, [pc, #428]	; (8005a08 <HAL_DMA_Abort+0x230>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d027      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6a      	ldr	r2, [pc, #424]	; (8005a0c <HAL_DMA_Abort+0x234>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a68      	ldr	r2, [pc, #416]	; (8005a10 <HAL_DMA_Abort+0x238>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a67      	ldr	r2, [pc, #412]	; (8005a14 <HAL_DMA_Abort+0x23c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a65      	ldr	r2, [pc, #404]	; (8005a18 <HAL_DMA_Abort+0x240>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a64      	ldr	r2, [pc, #400]	; (8005a1c <HAL_DMA_Abort+0x244>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a62      	ldr	r2, [pc, #392]	; (8005a20 <HAL_DMA_Abort+0x248>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a61      	ldr	r2, [pc, #388]	; (8005a24 <HAL_DMA_Abort+0x24c>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_DMA_Abort+0xd6>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a5f      	ldr	r2, [pc, #380]	; (8005a28 <HAL_DMA_Abort+0x250>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d101      	bne.n	80058b2 <HAL_DMA_Abort+0xda>
 80058ae:	2301      	movs	r3, #1
 80058b0:	e000      	b.n	80058b4 <HAL_DMA_Abort+0xdc>
 80058b2:	2300      	movs	r3, #0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d013      	beq.n	80058e0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 021e 	bic.w	r2, r2, #30
 80058c6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058d6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e00a      	b.n	80058f6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 020e 	bic.w	r2, r2, #14
 80058ee:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3c      	ldr	r2, [pc, #240]	; (80059ec <HAL_DMA_Abort+0x214>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d072      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a3a      	ldr	r2, [pc, #232]	; (80059f0 <HAL_DMA_Abort+0x218>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d06d      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a39      	ldr	r2, [pc, #228]	; (80059f4 <HAL_DMA_Abort+0x21c>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d068      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a37      	ldr	r2, [pc, #220]	; (80059f8 <HAL_DMA_Abort+0x220>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d063      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a36      	ldr	r2, [pc, #216]	; (80059fc <HAL_DMA_Abort+0x224>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d05e      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a34      	ldr	r2, [pc, #208]	; (8005a00 <HAL_DMA_Abort+0x228>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d059      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a33      	ldr	r2, [pc, #204]	; (8005a04 <HAL_DMA_Abort+0x22c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d054      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a31      	ldr	r2, [pc, #196]	; (8005a08 <HAL_DMA_Abort+0x230>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d04f      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a30      	ldr	r2, [pc, #192]	; (8005a0c <HAL_DMA_Abort+0x234>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d04a      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a2e      	ldr	r2, [pc, #184]	; (8005a10 <HAL_DMA_Abort+0x238>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d045      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2d      	ldr	r2, [pc, #180]	; (8005a14 <HAL_DMA_Abort+0x23c>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d040      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_Abort+0x240>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d03b      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a2a      	ldr	r2, [pc, #168]	; (8005a1c <HAL_DMA_Abort+0x244>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d036      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_DMA_Abort+0x248>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d031      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <HAL_DMA_Abort+0x24c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d02c      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <HAL_DMA_Abort+0x250>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d027      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <HAL_DMA_Abort+0x254>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d022      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_DMA_Abort+0x258>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01d      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a21      	ldr	r2, [pc, #132]	; (8005a34 <HAL_DMA_Abort+0x25c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_DMA_Abort+0x260>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d013      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a1e      	ldr	r2, [pc, #120]	; (8005a3c <HAL_DMA_Abort+0x264>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d00e      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_DMA_Abort+0x268>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d009      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1b      	ldr	r2, [pc, #108]	; (8005a44 <HAL_DMA_Abort+0x26c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d004      	beq.n	80059e6 <HAL_DMA_Abort+0x20e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_DMA_Abort+0x270>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d132      	bne.n	8005a4c <HAL_DMA_Abort+0x274>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e031      	b.n	8005a4e <HAL_DMA_Abort+0x276>
 80059ea:	bf00      	nop
 80059ec:	40020010 	.word	0x40020010
 80059f0:	40020028 	.word	0x40020028
 80059f4:	40020040 	.word	0x40020040
 80059f8:	40020058 	.word	0x40020058
 80059fc:	40020070 	.word	0x40020070
 8005a00:	40020088 	.word	0x40020088
 8005a04:	400200a0 	.word	0x400200a0
 8005a08:	400200b8 	.word	0x400200b8
 8005a0c:	40020410 	.word	0x40020410
 8005a10:	40020428 	.word	0x40020428
 8005a14:	40020440 	.word	0x40020440
 8005a18:	40020458 	.word	0x40020458
 8005a1c:	40020470 	.word	0x40020470
 8005a20:	40020488 	.word	0x40020488
 8005a24:	400204a0 	.word	0x400204a0
 8005a28:	400204b8 	.word	0x400204b8
 8005a2c:	58025408 	.word	0x58025408
 8005a30:	5802541c 	.word	0x5802541c
 8005a34:	58025430 	.word	0x58025430
 8005a38:	58025444 	.word	0x58025444
 8005a3c:	58025458 	.word	0x58025458
 8005a40:	5802546c 	.word	0x5802546c
 8005a44:	58025480 	.word	0x58025480
 8005a48:	58025494 	.word	0x58025494
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a6d      	ldr	r2, [pc, #436]	; (8005c1c <HAL_DMA_Abort+0x444>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d04a      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a6b      	ldr	r2, [pc, #428]	; (8005c20 <HAL_DMA_Abort+0x448>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d045      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a6a      	ldr	r2, [pc, #424]	; (8005c24 <HAL_DMA_Abort+0x44c>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d040      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a68      	ldr	r2, [pc, #416]	; (8005c28 <HAL_DMA_Abort+0x450>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d03b      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a67      	ldr	r2, [pc, #412]	; (8005c2c <HAL_DMA_Abort+0x454>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d036      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a65      	ldr	r2, [pc, #404]	; (8005c30 <HAL_DMA_Abort+0x458>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d031      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a64      	ldr	r2, [pc, #400]	; (8005c34 <HAL_DMA_Abort+0x45c>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02c      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a62      	ldr	r2, [pc, #392]	; (8005c38 <HAL_DMA_Abort+0x460>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d027      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a61      	ldr	r2, [pc, #388]	; (8005c3c <HAL_DMA_Abort+0x464>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d022      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a5f      	ldr	r2, [pc, #380]	; (8005c40 <HAL_DMA_Abort+0x468>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d01d      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a5e      	ldr	r2, [pc, #376]	; (8005c44 <HAL_DMA_Abort+0x46c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d018      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a5c      	ldr	r2, [pc, #368]	; (8005c48 <HAL_DMA_Abort+0x470>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d013      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a5b      	ldr	r2, [pc, #364]	; (8005c4c <HAL_DMA_Abort+0x474>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d00e      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a59      	ldr	r2, [pc, #356]	; (8005c50 <HAL_DMA_Abort+0x478>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d009      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a58      	ldr	r2, [pc, #352]	; (8005c54 <HAL_DMA_Abort+0x47c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d004      	beq.n	8005b02 <HAL_DMA_Abort+0x32a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a56      	ldr	r2, [pc, #344]	; (8005c58 <HAL_DMA_Abort+0x480>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d108      	bne.n	8005b14 <HAL_DMA_Abort+0x33c>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	e007      	b.n	8005b24 <HAL_DMA_Abort+0x34c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b24:	e013      	b.n	8005b4e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b26:	f7fe fc4f 	bl	80043c8 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d90c      	bls.n	8005b4e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2220      	movs	r2, #32
 8005b38:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2203      	movs	r2, #3
 8005b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e12d      	b.n	8005daa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1e5      	bne.n	8005b26 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <HAL_DMA_Abort+0x444>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d04a      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <HAL_DMA_Abort+0x448>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d045      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <HAL_DMA_Abort+0x44c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d040      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2a      	ldr	r2, [pc, #168]	; (8005c28 <HAL_DMA_Abort+0x450>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d03b      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a29      	ldr	r2, [pc, #164]	; (8005c2c <HAL_DMA_Abort+0x454>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d036      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a27      	ldr	r2, [pc, #156]	; (8005c30 <HAL_DMA_Abort+0x458>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d031      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a26      	ldr	r2, [pc, #152]	; (8005c34 <HAL_DMA_Abort+0x45c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d02c      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <HAL_DMA_Abort+0x460>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d027      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a23      	ldr	r2, [pc, #140]	; (8005c3c <HAL_DMA_Abort+0x464>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d022      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a21      	ldr	r2, [pc, #132]	; (8005c40 <HAL_DMA_Abort+0x468>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01d      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <HAL_DMA_Abort+0x46c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d018      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a1e      	ldr	r2, [pc, #120]	; (8005c48 <HAL_DMA_Abort+0x470>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d013      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1d      	ldr	r2, [pc, #116]	; (8005c4c <HAL_DMA_Abort+0x474>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d00e      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1b      	ldr	r2, [pc, #108]	; (8005c50 <HAL_DMA_Abort+0x478>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d009      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1a      	ldr	r2, [pc, #104]	; (8005c54 <HAL_DMA_Abort+0x47c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d004      	beq.n	8005bfa <HAL_DMA_Abort+0x422>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <HAL_DMA_Abort+0x480>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d101      	bne.n	8005bfe <HAL_DMA_Abort+0x426>
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e000      	b.n	8005c00 <HAL_DMA_Abort+0x428>
 8005bfe:	2300      	movs	r3, #0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02b      	beq.n	8005c5c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	223f      	movs	r2, #63	; 0x3f
 8005c14:	409a      	lsls	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	609a      	str	r2, [r3, #8]
 8005c1a:	e02a      	b.n	8005c72 <HAL_DMA_Abort+0x49a>
 8005c1c:	40020010 	.word	0x40020010
 8005c20:	40020028 	.word	0x40020028
 8005c24:	40020040 	.word	0x40020040
 8005c28:	40020058 	.word	0x40020058
 8005c2c:	40020070 	.word	0x40020070
 8005c30:	40020088 	.word	0x40020088
 8005c34:	400200a0 	.word	0x400200a0
 8005c38:	400200b8 	.word	0x400200b8
 8005c3c:	40020410 	.word	0x40020410
 8005c40:	40020428 	.word	0x40020428
 8005c44:	40020440 	.word	0x40020440
 8005c48:	40020458 	.word	0x40020458
 8005c4c:	40020470 	.word	0x40020470
 8005c50:	40020488 	.word	0x40020488
 8005c54:	400204a0 	.word	0x400204a0
 8005c58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a4f      	ldr	r2, [pc, #316]	; (8005db4 <HAL_DMA_Abort+0x5dc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d072      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a4d      	ldr	r2, [pc, #308]	; (8005db8 <HAL_DMA_Abort+0x5e0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d06d      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a4c      	ldr	r2, [pc, #304]	; (8005dbc <HAL_DMA_Abort+0x5e4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d068      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a4a      	ldr	r2, [pc, #296]	; (8005dc0 <HAL_DMA_Abort+0x5e8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d063      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a49      	ldr	r2, [pc, #292]	; (8005dc4 <HAL_DMA_Abort+0x5ec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d05e      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a47      	ldr	r2, [pc, #284]	; (8005dc8 <HAL_DMA_Abort+0x5f0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d059      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a46      	ldr	r2, [pc, #280]	; (8005dcc <HAL_DMA_Abort+0x5f4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d054      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a44      	ldr	r2, [pc, #272]	; (8005dd0 <HAL_DMA_Abort+0x5f8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04f      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a43      	ldr	r2, [pc, #268]	; (8005dd4 <HAL_DMA_Abort+0x5fc>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d04a      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a41      	ldr	r2, [pc, #260]	; (8005dd8 <HAL_DMA_Abort+0x600>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d045      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a40      	ldr	r2, [pc, #256]	; (8005ddc <HAL_DMA_Abort+0x604>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d040      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3e      	ldr	r2, [pc, #248]	; (8005de0 <HAL_DMA_Abort+0x608>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d03b      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3d      	ldr	r2, [pc, #244]	; (8005de4 <HAL_DMA_Abort+0x60c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d036      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3b      	ldr	r2, [pc, #236]	; (8005de8 <HAL_DMA_Abort+0x610>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d031      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a3a      	ldr	r2, [pc, #232]	; (8005dec <HAL_DMA_Abort+0x614>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d02c      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a38      	ldr	r2, [pc, #224]	; (8005df0 <HAL_DMA_Abort+0x618>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d027      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a37      	ldr	r2, [pc, #220]	; (8005df4 <HAL_DMA_Abort+0x61c>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <HAL_DMA_Abort+0x620>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01d      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a34      	ldr	r2, [pc, #208]	; (8005dfc <HAL_DMA_Abort+0x624>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a32      	ldr	r2, [pc, #200]	; (8005e00 <HAL_DMA_Abort+0x628>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a31      	ldr	r2, [pc, #196]	; (8005e04 <HAL_DMA_Abort+0x62c>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a2f      	ldr	r2, [pc, #188]	; (8005e08 <HAL_DMA_Abort+0x630>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2e      	ldr	r2, [pc, #184]	; (8005e0c <HAL_DMA_Abort+0x634>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_DMA_Abort+0x58a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2c      	ldr	r2, [pc, #176]	; (8005e10 <HAL_DMA_Abort+0x638>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <HAL_DMA_Abort+0x58e>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_DMA_Abort+0x590>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d74:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00c      	beq.n	8005d98 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d8c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d96:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40020010 	.word	0x40020010
 8005db8:	40020028 	.word	0x40020028
 8005dbc:	40020040 	.word	0x40020040
 8005dc0:	40020058 	.word	0x40020058
 8005dc4:	40020070 	.word	0x40020070
 8005dc8:	40020088 	.word	0x40020088
 8005dcc:	400200a0 	.word	0x400200a0
 8005dd0:	400200b8 	.word	0x400200b8
 8005dd4:	40020410 	.word	0x40020410
 8005dd8:	40020428 	.word	0x40020428
 8005ddc:	40020440 	.word	0x40020440
 8005de0:	40020458 	.word	0x40020458
 8005de4:	40020470 	.word	0x40020470
 8005de8:	40020488 	.word	0x40020488
 8005dec:	400204a0 	.word	0x400204a0
 8005df0:	400204b8 	.word	0x400204b8
 8005df4:	58025408 	.word	0x58025408
 8005df8:	5802541c 	.word	0x5802541c
 8005dfc:	58025430 	.word	0x58025430
 8005e00:	58025444 	.word	0x58025444
 8005e04:	58025458 	.word	0x58025458
 8005e08:	5802546c 	.word	0x5802546c
 8005e0c:	58025480 	.word	0x58025480
 8005e10:	58025494 	.word	0x58025494

08005e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e237      	b.n	8006296 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d004      	beq.n	8005e3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2280      	movs	r2, #128	; 0x80
 8005e36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e22c      	b.n	8006296 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a5c      	ldr	r2, [pc, #368]	; (8005fb4 <HAL_DMA_Abort_IT+0x1a0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d04a      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a5b      	ldr	r2, [pc, #364]	; (8005fb8 <HAL_DMA_Abort_IT+0x1a4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d045      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a59      	ldr	r2, [pc, #356]	; (8005fbc <HAL_DMA_Abort_IT+0x1a8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d040      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a58      	ldr	r2, [pc, #352]	; (8005fc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d03b      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a56      	ldr	r2, [pc, #344]	; (8005fc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d036      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a55      	ldr	r2, [pc, #340]	; (8005fc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d031      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a53      	ldr	r2, [pc, #332]	; (8005fcc <HAL_DMA_Abort_IT+0x1b8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d02c      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a52      	ldr	r2, [pc, #328]	; (8005fd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d027      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d022      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a4f      	ldr	r2, [pc, #316]	; (8005fd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d01d      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a4d      	ldr	r2, [pc, #308]	; (8005fdc <HAL_DMA_Abort_IT+0x1c8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d018      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a4c      	ldr	r2, [pc, #304]	; (8005fe0 <HAL_DMA_Abort_IT+0x1cc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <HAL_DMA_Abort_IT+0x1d0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00e      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a49      	ldr	r2, [pc, #292]	; (8005fe8 <HAL_DMA_Abort_IT+0x1d4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a47      	ldr	r2, [pc, #284]	; (8005fec <HAL_DMA_Abort_IT+0x1d8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a46      	ldr	r2, [pc, #280]	; (8005ff0 <HAL_DMA_Abort_IT+0x1dc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d101      	bne.n	8005ee0 <HAL_DMA_Abort_IT+0xcc>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <HAL_DMA_Abort_IT+0xce>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 8086 	beq.w	8005ff4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2f      	ldr	r2, [pc, #188]	; (8005fb4 <HAL_DMA_Abort_IT+0x1a0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d04a      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2e      	ldr	r2, [pc, #184]	; (8005fb8 <HAL_DMA_Abort_IT+0x1a4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d045      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a2c      	ldr	r2, [pc, #176]	; (8005fbc <HAL_DMA_Abort_IT+0x1a8>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d040      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a2b      	ldr	r2, [pc, #172]	; (8005fc0 <HAL_DMA_Abort_IT+0x1ac>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d03b      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a29      	ldr	r2, [pc, #164]	; (8005fc4 <HAL_DMA_Abort_IT+0x1b0>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d036      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a28      	ldr	r2, [pc, #160]	; (8005fc8 <HAL_DMA_Abort_IT+0x1b4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d031      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a26      	ldr	r2, [pc, #152]	; (8005fcc <HAL_DMA_Abort_IT+0x1b8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d02c      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a25      	ldr	r2, [pc, #148]	; (8005fd0 <HAL_DMA_Abort_IT+0x1bc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d027      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a23      	ldr	r2, [pc, #140]	; (8005fd4 <HAL_DMA_Abort_IT+0x1c0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d022      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_DMA_Abort_IT+0x1c4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d01d      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a20      	ldr	r2, [pc, #128]	; (8005fdc <HAL_DMA_Abort_IT+0x1c8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d018      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_DMA_Abort_IT+0x1cc>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <HAL_DMA_Abort_IT+0x1d0>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00e      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_DMA_Abort_IT+0x1d4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <HAL_DMA_Abort_IT+0x1d8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d004      	beq.n	8005f90 <HAL_DMA_Abort_IT+0x17c>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <HAL_DMA_Abort_IT+0x1dc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d108      	bne.n	8005fa2 <HAL_DMA_Abort_IT+0x18e>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0201 	bic.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e178      	b.n	8006294 <HAL_DMA_Abort_IT+0x480>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0201 	bic.w	r2, r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e16f      	b.n	8006294 <HAL_DMA_Abort_IT+0x480>
 8005fb4:	40020010 	.word	0x40020010
 8005fb8:	40020028 	.word	0x40020028
 8005fbc:	40020040 	.word	0x40020040
 8005fc0:	40020058 	.word	0x40020058
 8005fc4:	40020070 	.word	0x40020070
 8005fc8:	40020088 	.word	0x40020088
 8005fcc:	400200a0 	.word	0x400200a0
 8005fd0:	400200b8 	.word	0x400200b8
 8005fd4:	40020410 	.word	0x40020410
 8005fd8:	40020428 	.word	0x40020428
 8005fdc:	40020440 	.word	0x40020440
 8005fe0:	40020458 	.word	0x40020458
 8005fe4:	40020470 	.word	0x40020470
 8005fe8:	40020488 	.word	0x40020488
 8005fec:	400204a0 	.word	0x400204a0
 8005ff0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 020e 	bic.w	r2, r2, #14
 8006002:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a6c      	ldr	r2, [pc, #432]	; (80061bc <HAL_DMA_Abort_IT+0x3a8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d04a      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a6b      	ldr	r2, [pc, #428]	; (80061c0 <HAL_DMA_Abort_IT+0x3ac>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d045      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a69      	ldr	r2, [pc, #420]	; (80061c4 <HAL_DMA_Abort_IT+0x3b0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d040      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a68      	ldr	r2, [pc, #416]	; (80061c8 <HAL_DMA_Abort_IT+0x3b4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d03b      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a66      	ldr	r2, [pc, #408]	; (80061cc <HAL_DMA_Abort_IT+0x3b8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d036      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a65      	ldr	r2, [pc, #404]	; (80061d0 <HAL_DMA_Abort_IT+0x3bc>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d031      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a63      	ldr	r2, [pc, #396]	; (80061d4 <HAL_DMA_Abort_IT+0x3c0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d02c      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a62      	ldr	r2, [pc, #392]	; (80061d8 <HAL_DMA_Abort_IT+0x3c4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d027      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a60      	ldr	r2, [pc, #384]	; (80061dc <HAL_DMA_Abort_IT+0x3c8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d022      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a5f      	ldr	r2, [pc, #380]	; (80061e0 <HAL_DMA_Abort_IT+0x3cc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d01d      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a5d      	ldr	r2, [pc, #372]	; (80061e4 <HAL_DMA_Abort_IT+0x3d0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d018      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a5c      	ldr	r2, [pc, #368]	; (80061e8 <HAL_DMA_Abort_IT+0x3d4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5a      	ldr	r2, [pc, #360]	; (80061ec <HAL_DMA_Abort_IT+0x3d8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d00e      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a59      	ldr	r2, [pc, #356]	; (80061f0 <HAL_DMA_Abort_IT+0x3dc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a57      	ldr	r2, [pc, #348]	; (80061f4 <HAL_DMA_Abort_IT+0x3e0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_DMA_Abort_IT+0x290>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a56      	ldr	r2, [pc, #344]	; (80061f8 <HAL_DMA_Abort_IT+0x3e4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d108      	bne.n	80060b6 <HAL_DMA_Abort_IT+0x2a2>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f022 0201 	bic.w	r2, r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	e007      	b.n	80060c6 <HAL_DMA_Abort_IT+0x2b2>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f022 0201 	bic.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3c      	ldr	r2, [pc, #240]	; (80061bc <HAL_DMA_Abort_IT+0x3a8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d072      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3a      	ldr	r2, [pc, #232]	; (80061c0 <HAL_DMA_Abort_IT+0x3ac>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d06d      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a39      	ldr	r2, [pc, #228]	; (80061c4 <HAL_DMA_Abort_IT+0x3b0>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d068      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a37      	ldr	r2, [pc, #220]	; (80061c8 <HAL_DMA_Abort_IT+0x3b4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d063      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a36      	ldr	r2, [pc, #216]	; (80061cc <HAL_DMA_Abort_IT+0x3b8>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d05e      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a34      	ldr	r2, [pc, #208]	; (80061d0 <HAL_DMA_Abort_IT+0x3bc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d059      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a33      	ldr	r2, [pc, #204]	; (80061d4 <HAL_DMA_Abort_IT+0x3c0>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d054      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a31      	ldr	r2, [pc, #196]	; (80061d8 <HAL_DMA_Abort_IT+0x3c4>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d04f      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a30      	ldr	r2, [pc, #192]	; (80061dc <HAL_DMA_Abort_IT+0x3c8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d04a      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <HAL_DMA_Abort_IT+0x3cc>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d045      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <HAL_DMA_Abort_IT+0x3d0>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d040      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2b      	ldr	r2, [pc, #172]	; (80061e8 <HAL_DMA_Abort_IT+0x3d4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d03b      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2a      	ldr	r2, [pc, #168]	; (80061ec <HAL_DMA_Abort_IT+0x3d8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d036      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a28      	ldr	r2, [pc, #160]	; (80061f0 <HAL_DMA_Abort_IT+0x3dc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d031      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a27      	ldr	r2, [pc, #156]	; (80061f4 <HAL_DMA_Abort_IT+0x3e0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d02c      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a25      	ldr	r2, [pc, #148]	; (80061f8 <HAL_DMA_Abort_IT+0x3e4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d027      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a24      	ldr	r2, [pc, #144]	; (80061fc <HAL_DMA_Abort_IT+0x3e8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d022      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a22      	ldr	r2, [pc, #136]	; (8006200 <HAL_DMA_Abort_IT+0x3ec>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d01d      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <HAL_DMA_Abort_IT+0x3f0>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d018      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1f      	ldr	r2, [pc, #124]	; (8006208 <HAL_DMA_Abort_IT+0x3f4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1e      	ldr	r2, [pc, #120]	; (800620c <HAL_DMA_Abort_IT+0x3f8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00e      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1c      	ldr	r2, [pc, #112]	; (8006210 <HAL_DMA_Abort_IT+0x3fc>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1b      	ldr	r2, [pc, #108]	; (8006214 <HAL_DMA_Abort_IT+0x400>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_DMA_Abort_IT+0x3a2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a19      	ldr	r2, [pc, #100]	; (8006218 <HAL_DMA_Abort_IT+0x404>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d132      	bne.n	800621c <HAL_DMA_Abort_IT+0x408>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e031      	b.n	800621e <HAL_DMA_Abort_IT+0x40a>
 80061ba:	bf00      	nop
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8
 80061fc:	58025408 	.word	0x58025408
 8006200:	5802541c 	.word	0x5802541c
 8006204:	58025430 	.word	0x58025430
 8006208:	58025444 	.word	0x58025444
 800620c:	58025458 	.word	0x58025458
 8006210:	5802546c 	.word	0x5802546c
 8006214:	58025480 	.word	0x58025480
 8006218:	58025494 	.word	0x58025494
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d028      	beq.n	8006274 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006230:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006236:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2201      	movs	r2, #1
 8006242:	409a      	lsls	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006250:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00c      	beq.n	8006274 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006268:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006272:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop

080062a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80062ac:	4b67      	ldr	r3, [pc, #412]	; (800644c <HAL_DMA_IRQHandler+0x1ac>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a67      	ldr	r2, [pc, #412]	; (8006450 <HAL_DMA_IRQHandler+0x1b0>)
 80062b2:	fba2 2303 	umull	r2, r3, r2, r3
 80062b6:	0a9b      	lsrs	r3, r3, #10
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a5f      	ldr	r2, [pc, #380]	; (8006454 <HAL_DMA_IRQHandler+0x1b4>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a5d      	ldr	r2, [pc, #372]	; (8006458 <HAL_DMA_IRQHandler+0x1b8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a5c      	ldr	r2, [pc, #368]	; (800645c <HAL_DMA_IRQHandler+0x1bc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5a      	ldr	r2, [pc, #360]	; (8006460 <HAL_DMA_IRQHandler+0x1c0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a59      	ldr	r2, [pc, #356]	; (8006464 <HAL_DMA_IRQHandler+0x1c4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a57      	ldr	r2, [pc, #348]	; (8006468 <HAL_DMA_IRQHandler+0x1c8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a56      	ldr	r2, [pc, #344]	; (800646c <HAL_DMA_IRQHandler+0x1cc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a54      	ldr	r2, [pc, #336]	; (8006470 <HAL_DMA_IRQHandler+0x1d0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a53      	ldr	r2, [pc, #332]	; (8006474 <HAL_DMA_IRQHandler+0x1d4>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a51      	ldr	r2, [pc, #324]	; (8006478 <HAL_DMA_IRQHandler+0x1d8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a50      	ldr	r2, [pc, #320]	; (800647c <HAL_DMA_IRQHandler+0x1dc>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <HAL_DMA_IRQHandler+0x1e0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a4d      	ldr	r2, [pc, #308]	; (8006484 <HAL_DMA_IRQHandler+0x1e4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a4b      	ldr	r2, [pc, #300]	; (8006488 <HAL_DMA_IRQHandler+0x1e8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a4a      	ldr	r2, [pc, #296]	; (800648c <HAL_DMA_IRQHandler+0x1ec>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_IRQHandler+0xd2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a48      	ldr	r2, [pc, #288]	; (8006490 <HAL_DMA_IRQHandler+0x1f0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <HAL_DMA_IRQHandler+0xd6>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_DMA_IRQHandler+0xd8>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 842b 	beq.w	8006bd4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	f003 031f 	and.w	r3, r3, #31
 8006386:	2208      	movs	r2, #8
 8006388:	409a      	lsls	r2, r3
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	4013      	ands	r3, r2
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80a2 	beq.w	80064d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a2e      	ldr	r2, [pc, #184]	; (8006454 <HAL_DMA_IRQHandler+0x1b4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d04a      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2d      	ldr	r2, [pc, #180]	; (8006458 <HAL_DMA_IRQHandler+0x1b8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d045      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_DMA_IRQHandler+0x1bc>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d040      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <HAL_DMA_IRQHandler+0x1c0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d03b      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_DMA_IRQHandler+0x1c4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d036      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a27      	ldr	r2, [pc, #156]	; (8006468 <HAL_DMA_IRQHandler+0x1c8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d031      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a25      	ldr	r2, [pc, #148]	; (800646c <HAL_DMA_IRQHandler+0x1cc>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d02c      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a24      	ldr	r2, [pc, #144]	; (8006470 <HAL_DMA_IRQHandler+0x1d0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d027      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a22      	ldr	r2, [pc, #136]	; (8006474 <HAL_DMA_IRQHandler+0x1d4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d022      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a21      	ldr	r2, [pc, #132]	; (8006478 <HAL_DMA_IRQHandler+0x1d8>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d01d      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a1f      	ldr	r2, [pc, #124]	; (800647c <HAL_DMA_IRQHandler+0x1dc>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d018      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a1e      	ldr	r2, [pc, #120]	; (8006480 <HAL_DMA_IRQHandler+0x1e0>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1c      	ldr	r2, [pc, #112]	; (8006484 <HAL_DMA_IRQHandler+0x1e4>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d00e      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1b      	ldr	r2, [pc, #108]	; (8006488 <HAL_DMA_IRQHandler+0x1e8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d009      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a19      	ldr	r2, [pc, #100]	; (800648c <HAL_DMA_IRQHandler+0x1ec>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d004      	beq.n	8006434 <HAL_DMA_IRQHandler+0x194>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a18      	ldr	r2, [pc, #96]	; (8006490 <HAL_DMA_IRQHandler+0x1f0>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d12f      	bne.n	8006494 <HAL_DMA_IRQHandler+0x1f4>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	e02e      	b.n	80064a8 <HAL_DMA_IRQHandler+0x208>
 800644a:	bf00      	nop
 800644c:	24000044 	.word	0x24000044
 8006450:	1b4e81b5 	.word	0x1b4e81b5
 8006454:	40020010 	.word	0x40020010
 8006458:	40020028 	.word	0x40020028
 800645c:	40020040 	.word	0x40020040
 8006460:	40020058 	.word	0x40020058
 8006464:	40020070 	.word	0x40020070
 8006468:	40020088 	.word	0x40020088
 800646c:	400200a0 	.word	0x400200a0
 8006470:	400200b8 	.word	0x400200b8
 8006474:	40020410 	.word	0x40020410
 8006478:	40020428 	.word	0x40020428
 800647c:	40020440 	.word	0x40020440
 8006480:	40020458 	.word	0x40020458
 8006484:	40020470 	.word	0x40020470
 8006488:	40020488 	.word	0x40020488
 800648c:	400204a0 	.word	0x400204a0
 8006490:	400204b8 	.word	0x400204b8
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bf14      	ite	ne
 80064a2:	2301      	movne	r3, #1
 80064a4:	2300      	moveq	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0204 	bic.w	r2, r2, #4
 80064ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c0:	f003 031f 	and.w	r3, r3, #31
 80064c4:	2208      	movs	r2, #8
 80064c6:	409a      	lsls	r2, r3
 80064c8:	6a3b      	ldr	r3, [r7, #32]
 80064ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064d0:	f043 0201 	orr.w	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	fa22 f303 	lsr.w	r3, r2, r3
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d06e      	beq.n	80065cc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a69      	ldr	r2, [pc, #420]	; (8006698 <HAL_DMA_IRQHandler+0x3f8>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d04a      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a67      	ldr	r2, [pc, #412]	; (800669c <HAL_DMA_IRQHandler+0x3fc>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d045      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a66      	ldr	r2, [pc, #408]	; (80066a0 <HAL_DMA_IRQHandler+0x400>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d040      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a64      	ldr	r2, [pc, #400]	; (80066a4 <HAL_DMA_IRQHandler+0x404>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d03b      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a63      	ldr	r2, [pc, #396]	; (80066a8 <HAL_DMA_IRQHandler+0x408>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d036      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a61      	ldr	r2, [pc, #388]	; (80066ac <HAL_DMA_IRQHandler+0x40c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d031      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a60      	ldr	r2, [pc, #384]	; (80066b0 <HAL_DMA_IRQHandler+0x410>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d02c      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a5e      	ldr	r2, [pc, #376]	; (80066b4 <HAL_DMA_IRQHandler+0x414>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d027      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a5d      	ldr	r2, [pc, #372]	; (80066b8 <HAL_DMA_IRQHandler+0x418>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d022      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a5b      	ldr	r2, [pc, #364]	; (80066bc <HAL_DMA_IRQHandler+0x41c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d01d      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a5a      	ldr	r2, [pc, #360]	; (80066c0 <HAL_DMA_IRQHandler+0x420>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d018      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a58      	ldr	r2, [pc, #352]	; (80066c4 <HAL_DMA_IRQHandler+0x424>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d013      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a57      	ldr	r2, [pc, #348]	; (80066c8 <HAL_DMA_IRQHandler+0x428>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00e      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a55      	ldr	r2, [pc, #340]	; (80066cc <HAL_DMA_IRQHandler+0x42c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d009      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a54      	ldr	r2, [pc, #336]	; (80066d0 <HAL_DMA_IRQHandler+0x430>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d004      	beq.n	800658e <HAL_DMA_IRQHandler+0x2ee>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a52      	ldr	r2, [pc, #328]	; (80066d4 <HAL_DMA_IRQHandler+0x434>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d10a      	bne.n	80065a4 <HAL_DMA_IRQHandler+0x304>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006598:	2b00      	cmp	r3, #0
 800659a:	bf14      	ite	ne
 800659c:	2301      	movne	r3, #1
 800659e:	2300      	moveq	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	e003      	b.n	80065ac <HAL_DMA_IRQHandler+0x30c>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00d      	beq.n	80065cc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2201      	movs	r2, #1
 80065ba:	409a      	lsls	r2, r3
 80065bc:	6a3b      	ldr	r3, [r7, #32]
 80065be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c4:	f043 0202 	orr.w	r2, r3, #2
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2204      	movs	r2, #4
 80065d6:	409a      	lsls	r2, r3
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	4013      	ands	r3, r2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 808f 	beq.w	8006700 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a2c      	ldr	r2, [pc, #176]	; (8006698 <HAL_DMA_IRQHandler+0x3f8>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d04a      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a2a      	ldr	r2, [pc, #168]	; (800669c <HAL_DMA_IRQHandler+0x3fc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d045      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a29      	ldr	r2, [pc, #164]	; (80066a0 <HAL_DMA_IRQHandler+0x400>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d040      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a27      	ldr	r2, [pc, #156]	; (80066a4 <HAL_DMA_IRQHandler+0x404>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d03b      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a26      	ldr	r2, [pc, #152]	; (80066a8 <HAL_DMA_IRQHandler+0x408>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d036      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a24      	ldr	r2, [pc, #144]	; (80066ac <HAL_DMA_IRQHandler+0x40c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d031      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <HAL_DMA_IRQHandler+0x410>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d02c      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a21      	ldr	r2, [pc, #132]	; (80066b4 <HAL_DMA_IRQHandler+0x414>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d027      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a20      	ldr	r2, [pc, #128]	; (80066b8 <HAL_DMA_IRQHandler+0x418>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d022      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1e      	ldr	r2, [pc, #120]	; (80066bc <HAL_DMA_IRQHandler+0x41c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d01d      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1d      	ldr	r2, [pc, #116]	; (80066c0 <HAL_DMA_IRQHandler+0x420>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d018      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <HAL_DMA_IRQHandler+0x424>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d013      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <HAL_DMA_IRQHandler+0x428>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00e      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a18      	ldr	r2, [pc, #96]	; (80066cc <HAL_DMA_IRQHandler+0x42c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d009      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a17      	ldr	r2, [pc, #92]	; (80066d0 <HAL_DMA_IRQHandler+0x430>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d004      	beq.n	8006682 <HAL_DMA_IRQHandler+0x3e2>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a15      	ldr	r2, [pc, #84]	; (80066d4 <HAL_DMA_IRQHandler+0x434>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d12a      	bne.n	80066d8 <HAL_DMA_IRQHandler+0x438>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0302 	and.w	r3, r3, #2
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	e023      	b.n	80066e0 <HAL_DMA_IRQHandler+0x440>
 8006698:	40020010 	.word	0x40020010
 800669c:	40020028 	.word	0x40020028
 80066a0:	40020040 	.word	0x40020040
 80066a4:	40020058 	.word	0x40020058
 80066a8:	40020070 	.word	0x40020070
 80066ac:	40020088 	.word	0x40020088
 80066b0:	400200a0 	.word	0x400200a0
 80066b4:	400200b8 	.word	0x400200b8
 80066b8:	40020410 	.word	0x40020410
 80066bc:	40020428 	.word	0x40020428
 80066c0:	40020440 	.word	0x40020440
 80066c4:	40020458 	.word	0x40020458
 80066c8:	40020470 	.word	0x40020470
 80066cc:	40020488 	.word	0x40020488
 80066d0:	400204a0 	.word	0x400204a0
 80066d4:	400204b8 	.word	0x400204b8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2300      	movs	r3, #0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e8:	f003 031f 	and.w	r3, r3, #31
 80066ec:	2204      	movs	r2, #4
 80066ee:	409a      	lsls	r2, r3
 80066f0:	6a3b      	ldr	r3, [r7, #32]
 80066f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f8:	f043 0204 	orr.w	r2, r3, #4
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006704:	f003 031f 	and.w	r3, r3, #31
 8006708:	2210      	movs	r2, #16
 800670a:	409a      	lsls	r2, r3
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 80a6 	beq.w	8006862 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a85      	ldr	r2, [pc, #532]	; (8006930 <HAL_DMA_IRQHandler+0x690>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d04a      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a83      	ldr	r2, [pc, #524]	; (8006934 <HAL_DMA_IRQHandler+0x694>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d045      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a82      	ldr	r2, [pc, #520]	; (8006938 <HAL_DMA_IRQHandler+0x698>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d040      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a80      	ldr	r2, [pc, #512]	; (800693c <HAL_DMA_IRQHandler+0x69c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d03b      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a7f      	ldr	r2, [pc, #508]	; (8006940 <HAL_DMA_IRQHandler+0x6a0>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d036      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a7d      	ldr	r2, [pc, #500]	; (8006944 <HAL_DMA_IRQHandler+0x6a4>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d031      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a7c      	ldr	r2, [pc, #496]	; (8006948 <HAL_DMA_IRQHandler+0x6a8>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d02c      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a7a      	ldr	r2, [pc, #488]	; (800694c <HAL_DMA_IRQHandler+0x6ac>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d027      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a79      	ldr	r2, [pc, #484]	; (8006950 <HAL_DMA_IRQHandler+0x6b0>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d022      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a77      	ldr	r2, [pc, #476]	; (8006954 <HAL_DMA_IRQHandler+0x6b4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d01d      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a76      	ldr	r2, [pc, #472]	; (8006958 <HAL_DMA_IRQHandler+0x6b8>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d018      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a74      	ldr	r2, [pc, #464]	; (800695c <HAL_DMA_IRQHandler+0x6bc>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d013      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a73      	ldr	r2, [pc, #460]	; (8006960 <HAL_DMA_IRQHandler+0x6c0>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00e      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a71      	ldr	r2, [pc, #452]	; (8006964 <HAL_DMA_IRQHandler+0x6c4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d009      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a70      	ldr	r2, [pc, #448]	; (8006968 <HAL_DMA_IRQHandler+0x6c8>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d004      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x516>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a6e      	ldr	r2, [pc, #440]	; (800696c <HAL_DMA_IRQHandler+0x6cc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d10a      	bne.n	80067cc <HAL_DMA_IRQHandler+0x52c>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0308 	and.w	r3, r3, #8
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf14      	ite	ne
 80067c4:	2301      	movne	r3, #1
 80067c6:	2300      	moveq	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	e009      	b.n	80067e0 <HAL_DMA_IRQHandler+0x540>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d03e      	beq.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2210      	movs	r2, #16
 80067ee:	409a      	lsls	r2, r3
 80067f0:	6a3b      	ldr	r3, [r7, #32]
 80067f2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d018      	beq.n	8006834 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d108      	bne.n	8006822 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d024      	beq.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	4798      	blx	r3
 8006820:	e01f      	b.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01b      	beq.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	4798      	blx	r3
 8006832:	e016      	b.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683e:	2b00      	cmp	r3, #0
 8006840:	d107      	bne.n	8006852 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0208 	bic.w	r2, r2, #8
 8006850:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006866:	f003 031f 	and.w	r3, r3, #31
 800686a:	2220      	movs	r2, #32
 800686c:	409a      	lsls	r2, r3
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8110 	beq.w	8006a98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <HAL_DMA_IRQHandler+0x690>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d04a      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <HAL_DMA_IRQHandler+0x694>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d045      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <HAL_DMA_IRQHandler+0x698>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d040      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a28      	ldr	r2, [pc, #160]	; (800693c <HAL_DMA_IRQHandler+0x69c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d03b      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a26      	ldr	r2, [pc, #152]	; (8006940 <HAL_DMA_IRQHandler+0x6a0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d036      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a25      	ldr	r2, [pc, #148]	; (8006944 <HAL_DMA_IRQHandler+0x6a4>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d031      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a23      	ldr	r2, [pc, #140]	; (8006948 <HAL_DMA_IRQHandler+0x6a8>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d02c      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a22      	ldr	r2, [pc, #136]	; (800694c <HAL_DMA_IRQHandler+0x6ac>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d027      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a20      	ldr	r2, [pc, #128]	; (8006950 <HAL_DMA_IRQHandler+0x6b0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d022      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <HAL_DMA_IRQHandler+0x6b4>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d01d      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a1d      	ldr	r2, [pc, #116]	; (8006958 <HAL_DMA_IRQHandler+0x6b8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d018      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a1c      	ldr	r2, [pc, #112]	; (800695c <HAL_DMA_IRQHandler+0x6bc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d013      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a1a      	ldr	r2, [pc, #104]	; (8006960 <HAL_DMA_IRQHandler+0x6c0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d00e      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a19      	ldr	r2, [pc, #100]	; (8006964 <HAL_DMA_IRQHandler+0x6c4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d009      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a17      	ldr	r2, [pc, #92]	; (8006968 <HAL_DMA_IRQHandler+0x6c8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d004      	beq.n	8006918 <HAL_DMA_IRQHandler+0x678>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <HAL_DMA_IRQHandler+0x6cc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d12b      	bne.n	8006970 <HAL_DMA_IRQHandler+0x6d0>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	2b00      	cmp	r3, #0
 8006924:	bf14      	ite	ne
 8006926:	2301      	movne	r3, #1
 8006928:	2300      	moveq	r3, #0
 800692a:	b2db      	uxtb	r3, r3
 800692c:	e02a      	b.n	8006984 <HAL_DMA_IRQHandler+0x6e4>
 800692e:	bf00      	nop
 8006930:	40020010 	.word	0x40020010
 8006934:	40020028 	.word	0x40020028
 8006938:	40020040 	.word	0x40020040
 800693c:	40020058 	.word	0x40020058
 8006940:	40020070 	.word	0x40020070
 8006944:	40020088 	.word	0x40020088
 8006948:	400200a0 	.word	0x400200a0
 800694c:	400200b8 	.word	0x400200b8
 8006950:	40020410 	.word	0x40020410
 8006954:	40020428 	.word	0x40020428
 8006958:	40020440 	.word	0x40020440
 800695c:	40020458 	.word	0x40020458
 8006960:	40020470 	.word	0x40020470
 8006964:	40020488 	.word	0x40020488
 8006968:	400204a0 	.word	0x400204a0
 800696c:	400204b8 	.word	0x400204b8
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	bf14      	ite	ne
 800697e:	2301      	movne	r3, #1
 8006980:	2300      	moveq	r3, #0
 8006982:	b2db      	uxtb	r3, r3
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8087 	beq.w	8006a98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2220      	movs	r2, #32
 8006994:	409a      	lsls	r2, r3
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b04      	cmp	r3, #4
 80069a4:	d139      	bne.n	8006a1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f022 0216 	bic.w	r2, r2, #22
 80069b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	695a      	ldr	r2, [r3, #20]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_DMA_IRQHandler+0x736>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0208 	bic.w	r2, r2, #8
 80069e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ea:	f003 031f 	and.w	r3, r3, #31
 80069ee:	223f      	movs	r2, #63	; 0x3f
 80069f0:	409a      	lsls	r2, r3
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 8382 	beq.w	8007114 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
          }
          return;
 8006a18:	e37c      	b.n	8007114 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d018      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d108      	bne.n	8006a48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d02c      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	4798      	blx	r3
 8006a46:	e027      	b.n	8006a98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d023      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	4798      	blx	r3
 8006a58:	e01e      	b.n	8006a98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10f      	bne.n	8006a88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0210 	bic.w	r2, r2, #16
 8006a76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 833e 	beq.w	800711e <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8088 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a89      	ldr	r2, [pc, #548]	; (8006ce4 <HAL_DMA_IRQHandler+0xa44>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d04a      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a88      	ldr	r2, [pc, #544]	; (8006ce8 <HAL_DMA_IRQHandler+0xa48>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d045      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a86      	ldr	r2, [pc, #536]	; (8006cec <HAL_DMA_IRQHandler+0xa4c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d040      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a85      	ldr	r2, [pc, #532]	; (8006cf0 <HAL_DMA_IRQHandler+0xa50>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d03b      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a83      	ldr	r2, [pc, #524]	; (8006cf4 <HAL_DMA_IRQHandler+0xa54>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d036      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a82      	ldr	r2, [pc, #520]	; (8006cf8 <HAL_DMA_IRQHandler+0xa58>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d031      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a80      	ldr	r2, [pc, #512]	; (8006cfc <HAL_DMA_IRQHandler+0xa5c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d02c      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a7f      	ldr	r2, [pc, #508]	; (8006d00 <HAL_DMA_IRQHandler+0xa60>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d027      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a7d      	ldr	r2, [pc, #500]	; (8006d04 <HAL_DMA_IRQHandler+0xa64>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d022      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7c      	ldr	r2, [pc, #496]	; (8006d08 <HAL_DMA_IRQHandler+0xa68>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d01d      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7a      	ldr	r2, [pc, #488]	; (8006d0c <HAL_DMA_IRQHandler+0xa6c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d018      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a79      	ldr	r2, [pc, #484]	; (8006d10 <HAL_DMA_IRQHandler+0xa70>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a77      	ldr	r2, [pc, #476]	; (8006d14 <HAL_DMA_IRQHandler+0xa74>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a76      	ldr	r2, [pc, #472]	; (8006d18 <HAL_DMA_IRQHandler+0xa78>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a74      	ldr	r2, [pc, #464]	; (8006d1c <HAL_DMA_IRQHandler+0xa7c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_DMA_IRQHandler+0x8b8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a73      	ldr	r2, [pc, #460]	; (8006d20 <HAL_DMA_IRQHandler+0xa80>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d108      	bne.n	8006b6a <HAL_DMA_IRQHandler+0x8ca>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e007      	b.n	8006b7a <HAL_DMA_IRQHandler+0x8da>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0201 	bic.w	r2, r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d307      	bcc.n	8006b96 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f2      	bne.n	8006b7a <HAL_DMA_IRQHandler+0x8da>
 8006b94:	e000      	b.n	8006b98 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b96:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d004      	beq.n	8006bb0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2203      	movs	r2, #3
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006bae:	e003      	b.n	8006bb8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 82aa 	beq.w	800711e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
 8006bd2:	e2a4      	b.n	800711e <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_DMA_IRQHandler+0xa84>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d04a      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a51      	ldr	r2, [pc, #324]	; (8006d28 <HAL_DMA_IRQHandler+0xa88>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d045      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a4f      	ldr	r2, [pc, #316]	; (8006d2c <HAL_DMA_IRQHandler+0xa8c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d040      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a4e      	ldr	r2, [pc, #312]	; (8006d30 <HAL_DMA_IRQHandler+0xa90>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d03b      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a4c      	ldr	r2, [pc, #304]	; (8006d34 <HAL_DMA_IRQHandler+0xa94>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d036      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a4b      	ldr	r2, [pc, #300]	; (8006d38 <HAL_DMA_IRQHandler+0xa98>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d031      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a49      	ldr	r2, [pc, #292]	; (8006d3c <HAL_DMA_IRQHandler+0xa9c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d02c      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a48      	ldr	r2, [pc, #288]	; (8006d40 <HAL_DMA_IRQHandler+0xaa0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d027      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a46      	ldr	r2, [pc, #280]	; (8006d44 <HAL_DMA_IRQHandler+0xaa4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d022      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a45      	ldr	r2, [pc, #276]	; (8006d48 <HAL_DMA_IRQHandler+0xaa8>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d01d      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a43      	ldr	r2, [pc, #268]	; (8006d4c <HAL_DMA_IRQHandler+0xaac>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d018      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a42      	ldr	r2, [pc, #264]	; (8006d50 <HAL_DMA_IRQHandler+0xab0>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d013      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a40      	ldr	r2, [pc, #256]	; (8006d54 <HAL_DMA_IRQHandler+0xab4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00e      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a3f      	ldr	r2, [pc, #252]	; (8006d58 <HAL_DMA_IRQHandler+0xab8>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d009      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a3d      	ldr	r2, [pc, #244]	; (8006d5c <HAL_DMA_IRQHandler+0xabc>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x9d4>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <HAL_DMA_IRQHandler+0xac0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d101      	bne.n	8006c78 <HAL_DMA_IRQHandler+0x9d8>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <HAL_DMA_IRQHandler+0x9da>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 824f 	beq.w	800711e <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c8c:	f003 031f 	and.w	r3, r3, #31
 8006c90:	2204      	movs	r2, #4
 8006c92:	409a      	lsls	r2, r3
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80dd 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xbb8>
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80d7 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cae:	f003 031f 	and.w	r3, r3, #31
 8006cb2:	2204      	movs	r2, #4
 8006cb4:	409a      	lsls	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d059      	beq.n	8006d78 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d14a      	bne.n	8006d64 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8220 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce0:	e21a      	b.n	8007118 <HAL_DMA_IRQHandler+0xe78>
 8006ce2:	bf00      	nop
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8
 8006d24:	48022c08 	.word	0x48022c08
 8006d28:	48022c1c 	.word	0x48022c1c
 8006d2c:	48022c30 	.word	0x48022c30
 8006d30:	48022c44 	.word	0x48022c44
 8006d34:	48022c58 	.word	0x48022c58
 8006d38:	48022c6c 	.word	0x48022c6c
 8006d3c:	48022c80 	.word	0x48022c80
 8006d40:	48022c94 	.word	0x48022c94
 8006d44:	58025408 	.word	0x58025408
 8006d48:	5802541c 	.word	0x5802541c
 8006d4c:	58025430 	.word	0x58025430
 8006d50:	58025444 	.word	0x58025444
 8006d54:	58025458 	.word	0x58025458
 8006d58:	5802546c 	.word	0x5802546c
 8006d5c:	58025480 	.word	0x58025480
 8006d60:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 81d5 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d76:	e1cf      	b.n	8007118 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d160      	bne.n	8006e44 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a7f      	ldr	r2, [pc, #508]	; (8006f84 <HAL_DMA_IRQHandler+0xce4>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d04a      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a7d      	ldr	r2, [pc, #500]	; (8006f88 <HAL_DMA_IRQHandler+0xce8>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d045      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a7c      	ldr	r2, [pc, #496]	; (8006f8c <HAL_DMA_IRQHandler+0xcec>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d040      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a7a      	ldr	r2, [pc, #488]	; (8006f90 <HAL_DMA_IRQHandler+0xcf0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d03b      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a79      	ldr	r2, [pc, #484]	; (8006f94 <HAL_DMA_IRQHandler+0xcf4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d036      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a77      	ldr	r2, [pc, #476]	; (8006f98 <HAL_DMA_IRQHandler+0xcf8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d031      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a76      	ldr	r2, [pc, #472]	; (8006f9c <HAL_DMA_IRQHandler+0xcfc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d02c      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a74      	ldr	r2, [pc, #464]	; (8006fa0 <HAL_DMA_IRQHandler+0xd00>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d027      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a73      	ldr	r2, [pc, #460]	; (8006fa4 <HAL_DMA_IRQHandler+0xd04>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d022      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a71      	ldr	r2, [pc, #452]	; (8006fa8 <HAL_DMA_IRQHandler+0xd08>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d01d      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a70      	ldr	r2, [pc, #448]	; (8006fac <HAL_DMA_IRQHandler+0xd0c>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a6e      	ldr	r2, [pc, #440]	; (8006fb0 <HAL_DMA_IRQHandler+0xd10>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d013      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a6d      	ldr	r2, [pc, #436]	; (8006fb4 <HAL_DMA_IRQHandler+0xd14>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a6b      	ldr	r2, [pc, #428]	; (8006fb8 <HAL_DMA_IRQHandler+0xd18>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a6a      	ldr	r2, [pc, #424]	; (8006fbc <HAL_DMA_IRQHandler+0xd1c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_DMA_IRQHandler+0xb82>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a68      	ldr	r2, [pc, #416]	; (8006fc0 <HAL_DMA_IRQHandler+0xd20>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d108      	bne.n	8006e34 <HAL_DMA_IRQHandler+0xb94>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0208 	bic.w	r2, r2, #8
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e007      	b.n	8006e44 <HAL_DMA_IRQHandler+0xba4>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f022 0204 	bic.w	r2, r2, #4
 8006e42:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 8165 	beq.w	8007118 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e56:	e15f      	b.n	8007118 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2202      	movs	r2, #2
 8006e62:	409a      	lsls	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80c5 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xd58>
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 80bf 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2202      	movs	r2, #2
 8006e84:	409a      	lsls	r2, r3
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d018      	beq.n	8006ec6 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d109      	bne.n	8006eb2 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 813a 	beq.w	800711c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eb0:	e134      	b.n	800711c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8130 	beq.w	800711c <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ec4:	e12a      	b.n	800711c <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f003 0320 	and.w	r3, r3, #32
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 8089 	bne.w	8006fe4 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2b      	ldr	r2, [pc, #172]	; (8006f84 <HAL_DMA_IRQHandler+0xce4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d04a      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a29      	ldr	r2, [pc, #164]	; (8006f88 <HAL_DMA_IRQHandler+0xce8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d045      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a28      	ldr	r2, [pc, #160]	; (8006f8c <HAL_DMA_IRQHandler+0xcec>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d040      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a26      	ldr	r2, [pc, #152]	; (8006f90 <HAL_DMA_IRQHandler+0xcf0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d03b      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a25      	ldr	r2, [pc, #148]	; (8006f94 <HAL_DMA_IRQHandler+0xcf4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d036      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a23      	ldr	r2, [pc, #140]	; (8006f98 <HAL_DMA_IRQHandler+0xcf8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d031      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a22      	ldr	r2, [pc, #136]	; (8006f9c <HAL_DMA_IRQHandler+0xcfc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d02c      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a20      	ldr	r2, [pc, #128]	; (8006fa0 <HAL_DMA_IRQHandler+0xd00>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d027      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1f      	ldr	r2, [pc, #124]	; (8006fa4 <HAL_DMA_IRQHandler+0xd04>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <HAL_DMA_IRQHandler+0xd08>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d01d      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_DMA_IRQHandler+0xd0c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1a      	ldr	r2, [pc, #104]	; (8006fb0 <HAL_DMA_IRQHandler+0xd10>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <HAL_DMA_IRQHandler+0xd14>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a17      	ldr	r2, [pc, #92]	; (8006fb8 <HAL_DMA_IRQHandler+0xd18>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <HAL_DMA_IRQHandler+0xd1c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_DMA_IRQHandler+0xcd2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a14      	ldr	r2, [pc, #80]	; (8006fc0 <HAL_DMA_IRQHandler+0xd20>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d128      	bne.n	8006fc4 <HAL_DMA_IRQHandler+0xd24>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0214 	bic.w	r2, r2, #20
 8006f80:	601a      	str	r2, [r3, #0]
 8006f82:	e027      	b.n	8006fd4 <HAL_DMA_IRQHandler+0xd34>
 8006f84:	40020010 	.word	0x40020010
 8006f88:	40020028 	.word	0x40020028
 8006f8c:	40020040 	.word	0x40020040
 8006f90:	40020058 	.word	0x40020058
 8006f94:	40020070 	.word	0x40020070
 8006f98:	40020088 	.word	0x40020088
 8006f9c:	400200a0 	.word	0x400200a0
 8006fa0:	400200b8 	.word	0x400200b8
 8006fa4:	40020410 	.word	0x40020410
 8006fa8:	40020428 	.word	0x40020428
 8006fac:	40020440 	.word	0x40020440
 8006fb0:	40020458 	.word	0x40020458
 8006fb4:	40020470 	.word	0x40020470
 8006fb8:	40020488 	.word	0x40020488
 8006fbc:	400204a0 	.word	0x400204a0
 8006fc0:	400204b8 	.word	0x400204b8
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 020a 	bic.w	r2, r2, #10
 8006fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8097 	beq.w	800711c <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ff6:	e091      	b.n	800711c <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	2208      	movs	r2, #8
 8007002:	409a      	lsls	r2, r3
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	4013      	ands	r3, r2
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 8088 	beq.w	800711e <HAL_DMA_IRQHandler+0xe7e>
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 8082 	beq.w	800711e <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a41      	ldr	r2, [pc, #260]	; (8007124 <HAL_DMA_IRQHandler+0xe84>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d04a      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a3f      	ldr	r2, [pc, #252]	; (8007128 <HAL_DMA_IRQHandler+0xe88>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d045      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3e      	ldr	r2, [pc, #248]	; (800712c <HAL_DMA_IRQHandler+0xe8c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d040      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a3c      	ldr	r2, [pc, #240]	; (8007130 <HAL_DMA_IRQHandler+0xe90>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d03b      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3b      	ldr	r2, [pc, #236]	; (8007134 <HAL_DMA_IRQHandler+0xe94>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d036      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a39      	ldr	r2, [pc, #228]	; (8007138 <HAL_DMA_IRQHandler+0xe98>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d031      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a38      	ldr	r2, [pc, #224]	; (800713c <HAL_DMA_IRQHandler+0xe9c>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d02c      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a36      	ldr	r2, [pc, #216]	; (8007140 <HAL_DMA_IRQHandler+0xea0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d027      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a35      	ldr	r2, [pc, #212]	; (8007144 <HAL_DMA_IRQHandler+0xea4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d022      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a33      	ldr	r2, [pc, #204]	; (8007148 <HAL_DMA_IRQHandler+0xea8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d01d      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a32      	ldr	r2, [pc, #200]	; (800714c <HAL_DMA_IRQHandler+0xeac>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d018      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a30      	ldr	r2, [pc, #192]	; (8007150 <HAL_DMA_IRQHandler+0xeb0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d013      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a2f      	ldr	r2, [pc, #188]	; (8007154 <HAL_DMA_IRQHandler+0xeb4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00e      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a2d      	ldr	r2, [pc, #180]	; (8007158 <HAL_DMA_IRQHandler+0xeb8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d009      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2c      	ldr	r2, [pc, #176]	; (800715c <HAL_DMA_IRQHandler+0xebc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d004      	beq.n	80070ba <HAL_DMA_IRQHandler+0xe1a>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <HAL_DMA_IRQHandler+0xec0>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d108      	bne.n	80070cc <HAL_DMA_IRQHandler+0xe2c>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 021c 	bic.w	r2, r2, #28
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e007      	b.n	80070dc <HAL_DMA_IRQHandler+0xe3c>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 020e 	bic.w	r2, r2, #14
 80070da:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070e0:	f003 031f 	and.w	r3, r3, #31
 80070e4:	2201      	movs	r2, #1
 80070e6:	409a      	lsls	r2, r3
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	4798      	blx	r3
 8007112:	e004      	b.n	800711e <HAL_DMA_IRQHandler+0xe7e>
          return;
 8007114:	bf00      	nop
 8007116:	e002      	b.n	800711e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007118:	bf00      	nop
 800711a:	e000      	b.n	800711e <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800711c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800711e:	3728      	adds	r7, #40	; 0x28
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	40020010 	.word	0x40020010
 8007128:	40020028 	.word	0x40020028
 800712c:	40020040 	.word	0x40020040
 8007130:	40020058 	.word	0x40020058
 8007134:	40020070 	.word	0x40020070
 8007138:	40020088 	.word	0x40020088
 800713c:	400200a0 	.word	0x400200a0
 8007140:	400200b8 	.word	0x400200b8
 8007144:	40020410 	.word	0x40020410
 8007148:	40020428 	.word	0x40020428
 800714c:	40020440 	.word	0x40020440
 8007150:	40020458 	.word	0x40020458
 8007154:	40020470 	.word	0x40020470
 8007158:	40020488 	.word	0x40020488
 800715c:	400204a0 	.word	0x400204a0
 8007160:	400204b8 	.word	0x400204b8

08007164 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007164:	b480      	push	{r7}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800717c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a7f      	ldr	r2, [pc, #508]	; (8007380 <DMA_SetConfig+0x21c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d072      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a7d      	ldr	r2, [pc, #500]	; (8007384 <DMA_SetConfig+0x220>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d06d      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a7c      	ldr	r2, [pc, #496]	; (8007388 <DMA_SetConfig+0x224>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d068      	beq.n	800726e <DMA_SetConfig+0x10a>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a7a      	ldr	r2, [pc, #488]	; (800738c <DMA_SetConfig+0x228>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d063      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a79      	ldr	r2, [pc, #484]	; (8007390 <DMA_SetConfig+0x22c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d05e      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a77      	ldr	r2, [pc, #476]	; (8007394 <DMA_SetConfig+0x230>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d059      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a76      	ldr	r2, [pc, #472]	; (8007398 <DMA_SetConfig+0x234>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d054      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a74      	ldr	r2, [pc, #464]	; (800739c <DMA_SetConfig+0x238>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d04f      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a73      	ldr	r2, [pc, #460]	; (80073a0 <DMA_SetConfig+0x23c>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d04a      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a71      	ldr	r2, [pc, #452]	; (80073a4 <DMA_SetConfig+0x240>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d045      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a70      	ldr	r2, [pc, #448]	; (80073a8 <DMA_SetConfig+0x244>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d040      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a6e      	ldr	r2, [pc, #440]	; (80073ac <DMA_SetConfig+0x248>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d03b      	beq.n	800726e <DMA_SetConfig+0x10a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a6d      	ldr	r2, [pc, #436]	; (80073b0 <DMA_SetConfig+0x24c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d036      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a6b      	ldr	r2, [pc, #428]	; (80073b4 <DMA_SetConfig+0x250>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d031      	beq.n	800726e <DMA_SetConfig+0x10a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a6a      	ldr	r2, [pc, #424]	; (80073b8 <DMA_SetConfig+0x254>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d02c      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a68      	ldr	r2, [pc, #416]	; (80073bc <DMA_SetConfig+0x258>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d027      	beq.n	800726e <DMA_SetConfig+0x10a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a67      	ldr	r2, [pc, #412]	; (80073c0 <DMA_SetConfig+0x25c>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d022      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a65      	ldr	r2, [pc, #404]	; (80073c4 <DMA_SetConfig+0x260>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d01d      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a64      	ldr	r2, [pc, #400]	; (80073c8 <DMA_SetConfig+0x264>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d018      	beq.n	800726e <DMA_SetConfig+0x10a>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a62      	ldr	r2, [pc, #392]	; (80073cc <DMA_SetConfig+0x268>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d013      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a61      	ldr	r2, [pc, #388]	; (80073d0 <DMA_SetConfig+0x26c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00e      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a5f      	ldr	r2, [pc, #380]	; (80073d4 <DMA_SetConfig+0x270>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d009      	beq.n	800726e <DMA_SetConfig+0x10a>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5e      	ldr	r2, [pc, #376]	; (80073d8 <DMA_SetConfig+0x274>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d004      	beq.n	800726e <DMA_SetConfig+0x10a>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a5c      	ldr	r2, [pc, #368]	; (80073dc <DMA_SetConfig+0x278>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d101      	bne.n	8007272 <DMA_SetConfig+0x10e>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <DMA_SetConfig+0x110>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00d      	beq.n	8007294 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007280:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007292:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a39      	ldr	r2, [pc, #228]	; (8007380 <DMA_SetConfig+0x21c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d04a      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a38      	ldr	r2, [pc, #224]	; (8007384 <DMA_SetConfig+0x220>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d045      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a36      	ldr	r2, [pc, #216]	; (8007388 <DMA_SetConfig+0x224>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d040      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a35      	ldr	r2, [pc, #212]	; (800738c <DMA_SetConfig+0x228>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d03b      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a33      	ldr	r2, [pc, #204]	; (8007390 <DMA_SetConfig+0x22c>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d036      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a32      	ldr	r2, [pc, #200]	; (8007394 <DMA_SetConfig+0x230>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d031      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a30      	ldr	r2, [pc, #192]	; (8007398 <DMA_SetConfig+0x234>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d02c      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a2f      	ldr	r2, [pc, #188]	; (800739c <DMA_SetConfig+0x238>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d027      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a2d      	ldr	r2, [pc, #180]	; (80073a0 <DMA_SetConfig+0x23c>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d022      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a2c      	ldr	r2, [pc, #176]	; (80073a4 <DMA_SetConfig+0x240>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d01d      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a2a      	ldr	r2, [pc, #168]	; (80073a8 <DMA_SetConfig+0x244>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d018      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a29      	ldr	r2, [pc, #164]	; (80073ac <DMA_SetConfig+0x248>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d013      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a27      	ldr	r2, [pc, #156]	; (80073b0 <DMA_SetConfig+0x24c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00e      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <DMA_SetConfig+0x250>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d009      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <DMA_SetConfig+0x254>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d004      	beq.n	8007334 <DMA_SetConfig+0x1d0>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a23      	ldr	r2, [pc, #140]	; (80073bc <DMA_SetConfig+0x258>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d101      	bne.n	8007338 <DMA_SetConfig+0x1d4>
 8007334:	2301      	movs	r3, #1
 8007336:	e000      	b.n	800733a <DMA_SetConfig+0x1d6>
 8007338:	2300      	movs	r3, #0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d059      	beq.n	80073f2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	223f      	movs	r2, #63	; 0x3f
 8007348:	409a      	lsls	r2, r3
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800735c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	2b40      	cmp	r3, #64	; 0x40
 800736c:	d138      	bne.n	80073e0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800737e:	e0ae      	b.n	80074de <DMA_SetConfig+0x37a>
 8007380:	40020010 	.word	0x40020010
 8007384:	40020028 	.word	0x40020028
 8007388:	40020040 	.word	0x40020040
 800738c:	40020058 	.word	0x40020058
 8007390:	40020070 	.word	0x40020070
 8007394:	40020088 	.word	0x40020088
 8007398:	400200a0 	.word	0x400200a0
 800739c:	400200b8 	.word	0x400200b8
 80073a0:	40020410 	.word	0x40020410
 80073a4:	40020428 	.word	0x40020428
 80073a8:	40020440 	.word	0x40020440
 80073ac:	40020458 	.word	0x40020458
 80073b0:	40020470 	.word	0x40020470
 80073b4:	40020488 	.word	0x40020488
 80073b8:	400204a0 	.word	0x400204a0
 80073bc:	400204b8 	.word	0x400204b8
 80073c0:	58025408 	.word	0x58025408
 80073c4:	5802541c 	.word	0x5802541c
 80073c8:	58025430 	.word	0x58025430
 80073cc:	58025444 	.word	0x58025444
 80073d0:	58025458 	.word	0x58025458
 80073d4:	5802546c 	.word	0x5802546c
 80073d8:	58025480 	.word	0x58025480
 80073dc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68ba      	ldr	r2, [r7, #8]
 80073e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
}
 80073f0:	e075      	b.n	80074de <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3d      	ldr	r2, [pc, #244]	; (80074ec <DMA_SetConfig+0x388>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d04a      	beq.n	8007492 <DMA_SetConfig+0x32e>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a3b      	ldr	r2, [pc, #236]	; (80074f0 <DMA_SetConfig+0x38c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d045      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3a      	ldr	r2, [pc, #232]	; (80074f4 <DMA_SetConfig+0x390>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d040      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a38      	ldr	r2, [pc, #224]	; (80074f8 <DMA_SetConfig+0x394>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d03b      	beq.n	8007492 <DMA_SetConfig+0x32e>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a37      	ldr	r2, [pc, #220]	; (80074fc <DMA_SetConfig+0x398>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d036      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a35      	ldr	r2, [pc, #212]	; (8007500 <DMA_SetConfig+0x39c>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d031      	beq.n	8007492 <DMA_SetConfig+0x32e>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a34      	ldr	r2, [pc, #208]	; (8007504 <DMA_SetConfig+0x3a0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d02c      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a32      	ldr	r2, [pc, #200]	; (8007508 <DMA_SetConfig+0x3a4>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d027      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a31      	ldr	r2, [pc, #196]	; (800750c <DMA_SetConfig+0x3a8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d022      	beq.n	8007492 <DMA_SetConfig+0x32e>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a2f      	ldr	r2, [pc, #188]	; (8007510 <DMA_SetConfig+0x3ac>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d01d      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2e      	ldr	r2, [pc, #184]	; (8007514 <DMA_SetConfig+0x3b0>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d018      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2c      	ldr	r2, [pc, #176]	; (8007518 <DMA_SetConfig+0x3b4>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d013      	beq.n	8007492 <DMA_SetConfig+0x32e>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2b      	ldr	r2, [pc, #172]	; (800751c <DMA_SetConfig+0x3b8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d00e      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a29      	ldr	r2, [pc, #164]	; (8007520 <DMA_SetConfig+0x3bc>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d009      	beq.n	8007492 <DMA_SetConfig+0x32e>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a28      	ldr	r2, [pc, #160]	; (8007524 <DMA_SetConfig+0x3c0>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d004      	beq.n	8007492 <DMA_SetConfig+0x32e>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a26      	ldr	r2, [pc, #152]	; (8007528 <DMA_SetConfig+0x3c4>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d101      	bne.n	8007496 <DMA_SetConfig+0x332>
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <DMA_SetConfig+0x334>
 8007496:	2300      	movs	r3, #0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d020      	beq.n	80074de <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a0:	f003 031f 	and.w	r3, r3, #31
 80074a4:	2201      	movs	r2, #1
 80074a6:	409a      	lsls	r2, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	2b40      	cmp	r3, #64	; 0x40
 80074ba:	d108      	bne.n	80074ce <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	60da      	str	r2, [r3, #12]
}
 80074cc:	e007      	b.n	80074de <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	687a      	ldr	r2, [r7, #4]
 80074dc:	60da      	str	r2, [r3, #12]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	48022c08 	.word	0x48022c08
 80074f0:	48022c1c 	.word	0x48022c1c
 80074f4:	48022c30 	.word	0x48022c30
 80074f8:	48022c44 	.word	0x48022c44
 80074fc:	48022c58 	.word	0x48022c58
 8007500:	48022c6c 	.word	0x48022c6c
 8007504:	48022c80 	.word	0x48022c80
 8007508:	48022c94 	.word	0x48022c94
 800750c:	58025408 	.word	0x58025408
 8007510:	5802541c 	.word	0x5802541c
 8007514:	58025430 	.word	0x58025430
 8007518:	58025444 	.word	0x58025444
 800751c:	58025458 	.word	0x58025458
 8007520:	5802546c 	.word	0x5802546c
 8007524:	58025480 	.word	0x58025480
 8007528:	58025494 	.word	0x58025494

0800752c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800752c:	b480      	push	{r7}
 800752e:	b085      	sub	sp, #20
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a42      	ldr	r2, [pc, #264]	; (8007644 <DMA_CalcBaseAndBitshift+0x118>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d04a      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a41      	ldr	r2, [pc, #260]	; (8007648 <DMA_CalcBaseAndBitshift+0x11c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d045      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a3f      	ldr	r2, [pc, #252]	; (800764c <DMA_CalcBaseAndBitshift+0x120>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d040      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a3e      	ldr	r2, [pc, #248]	; (8007650 <DMA_CalcBaseAndBitshift+0x124>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d03b      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a3c      	ldr	r2, [pc, #240]	; (8007654 <DMA_CalcBaseAndBitshift+0x128>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d036      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a3b      	ldr	r2, [pc, #236]	; (8007658 <DMA_CalcBaseAndBitshift+0x12c>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d031      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a39      	ldr	r2, [pc, #228]	; (800765c <DMA_CalcBaseAndBitshift+0x130>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d02c      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a38      	ldr	r2, [pc, #224]	; (8007660 <DMA_CalcBaseAndBitshift+0x134>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d027      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a36      	ldr	r2, [pc, #216]	; (8007664 <DMA_CalcBaseAndBitshift+0x138>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d022      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a35      	ldr	r2, [pc, #212]	; (8007668 <DMA_CalcBaseAndBitshift+0x13c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d01d      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a33      	ldr	r2, [pc, #204]	; (800766c <DMA_CalcBaseAndBitshift+0x140>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a32      	ldr	r2, [pc, #200]	; (8007670 <DMA_CalcBaseAndBitshift+0x144>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d013      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a30      	ldr	r2, [pc, #192]	; (8007674 <DMA_CalcBaseAndBitshift+0x148>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a2f      	ldr	r2, [pc, #188]	; (8007678 <DMA_CalcBaseAndBitshift+0x14c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2d      	ldr	r2, [pc, #180]	; (800767c <DMA_CalcBaseAndBitshift+0x150>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <DMA_CalcBaseAndBitshift+0xa8>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a2c      	ldr	r2, [pc, #176]	; (8007680 <DMA_CalcBaseAndBitshift+0x154>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d101      	bne.n	80075d8 <DMA_CalcBaseAndBitshift+0xac>
 80075d4:	2301      	movs	r3, #1
 80075d6:	e000      	b.n	80075da <DMA_CalcBaseAndBitshift+0xae>
 80075d8:	2300      	movs	r3, #0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d024      	beq.n	8007628 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	3b10      	subs	r3, #16
 80075e6:	4a27      	ldr	r2, [pc, #156]	; (8007684 <DMA_CalcBaseAndBitshift+0x158>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	091b      	lsrs	r3, r3, #4
 80075ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	4a24      	ldr	r2, [pc, #144]	; (8007688 <DMA_CalcBaseAndBitshift+0x15c>)
 80075f8:	5cd3      	ldrb	r3, [r2, r3]
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2b03      	cmp	r3, #3
 8007604:	d908      	bls.n	8007618 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	4b1f      	ldr	r3, [pc, #124]	; (800768c <DMA_CalcBaseAndBitshift+0x160>)
 800760e:	4013      	ands	r3, r2
 8007610:	1d1a      	adds	r2, r3, #4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	659a      	str	r2, [r3, #88]	; 0x58
 8007616:	e00d      	b.n	8007634 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	4b1b      	ldr	r3, [pc, #108]	; (800768c <DMA_CalcBaseAndBitshift+0x160>)
 8007620:	4013      	ands	r3, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6593      	str	r3, [r2, #88]	; 0x58
 8007626:	e005      	b.n	8007634 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr
 8007644:	40020010 	.word	0x40020010
 8007648:	40020028 	.word	0x40020028
 800764c:	40020040 	.word	0x40020040
 8007650:	40020058 	.word	0x40020058
 8007654:	40020070 	.word	0x40020070
 8007658:	40020088 	.word	0x40020088
 800765c:	400200a0 	.word	0x400200a0
 8007660:	400200b8 	.word	0x400200b8
 8007664:	40020410 	.word	0x40020410
 8007668:	40020428 	.word	0x40020428
 800766c:	40020440 	.word	0x40020440
 8007670:	40020458 	.word	0x40020458
 8007674:	40020470 	.word	0x40020470
 8007678:	40020488 	.word	0x40020488
 800767c:	400204a0 	.word	0x400204a0
 8007680:	400204b8 	.word	0x400204b8
 8007684:	aaaaaaab 	.word	0xaaaaaaab
 8007688:	08010c94 	.word	0x08010c94
 800768c:	fffffc00 	.word	0xfffffc00

08007690 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d120      	bne.n	80076e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	2b03      	cmp	r3, #3
 80076aa:	d858      	bhi.n	800775e <DMA_CheckFifoParam+0xce>
 80076ac:	a201      	add	r2, pc, #4	; (adr r2, 80076b4 <DMA_CheckFifoParam+0x24>)
 80076ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b2:	bf00      	nop
 80076b4:	080076c5 	.word	0x080076c5
 80076b8:	080076d7 	.word	0x080076d7
 80076bc:	080076c5 	.word	0x080076c5
 80076c0:	0800775f 	.word	0x0800775f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d048      	beq.n	8007762 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076d4:	e045      	b.n	8007762 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076de:	d142      	bne.n	8007766 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076e4:	e03f      	b.n	8007766 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076ee:	d123      	bne.n	8007738 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d838      	bhi.n	800776a <DMA_CheckFifoParam+0xda>
 80076f8:	a201      	add	r2, pc, #4	; (adr r2, 8007700 <DMA_CheckFifoParam+0x70>)
 80076fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fe:	bf00      	nop
 8007700:	08007711 	.word	0x08007711
 8007704:	08007717 	.word	0x08007717
 8007708:	08007711 	.word	0x08007711
 800770c:	08007729 	.word	0x08007729
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
        break;
 8007714:	e030      	b.n	8007778 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d025      	beq.n	800776e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007726:	e022      	b.n	800776e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007730:	d11f      	bne.n	8007772 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007736:	e01c      	b.n	8007772 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773c:	2b02      	cmp	r3, #2
 800773e:	d902      	bls.n	8007746 <DMA_CheckFifoParam+0xb6>
 8007740:	2b03      	cmp	r3, #3
 8007742:	d003      	beq.n	800774c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007744:	e018      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	73fb      	strb	r3, [r7, #15]
        break;
 800774a:	e015      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007750:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00e      	beq.n	8007776 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]
    break;
 800775c:	e00b      	b.n	8007776 <DMA_CheckFifoParam+0xe6>
        break;
 800775e:	bf00      	nop
 8007760:	e00a      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        break;
 8007762:	bf00      	nop
 8007764:	e008      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        break;
 8007766:	bf00      	nop
 8007768:	e006      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        break;
 800776a:	bf00      	nop
 800776c:	e004      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        break;
 800776e:	bf00      	nop
 8007770:	e002      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
        break;
 8007772:	bf00      	nop
 8007774:	e000      	b.n	8007778 <DMA_CheckFifoParam+0xe8>
    break;
 8007776:	bf00      	nop
    }
  }

  return status;
 8007778:	7bfb      	ldrb	r3, [r7, #15]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a38      	ldr	r2, [pc, #224]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a36      	ldr	r2, [pc, #216]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a35      	ldr	r2, [pc, #212]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a33      	ldr	r2, [pc, #204]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a32      	ldr	r2, [pc, #200]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a30      	ldr	r2, [pc, #192]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a2f      	ldr	r2, [pc, #188]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a2d      	ldr	r2, [pc, #180]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d101      	bne.n	80077ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077ea:	2300      	movs	r3, #0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d01a      	beq.n	8007826 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	3b08      	subs	r3, #8
 80077f8:	4a28      	ldr	r2, [pc, #160]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	091b      	lsrs	r3, r3, #4
 8007800:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4b26      	ldr	r3, [pc, #152]	; (80078a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a24      	ldr	r2, [pc, #144]	; (80078a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007814:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2201      	movs	r2, #1
 800781e:	409a      	lsls	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007824:	e024      	b.n	8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	3b10      	subs	r3, #16
 800782e:	4a1e      	ldr	r2, [pc, #120]	; (80078a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007830:	fba2 2303 	umull	r2, r3, r2, r3
 8007834:	091b      	lsrs	r3, r3, #4
 8007836:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	4a1c      	ldr	r2, [pc, #112]	; (80078ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d806      	bhi.n	800784e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4a1b      	ldr	r2, [pc, #108]	; (80078b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d902      	bls.n	800784e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3308      	adds	r3, #8
 800784c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4b18      	ldr	r3, [pc, #96]	; (80078b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	461a      	mov	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007860:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	2201      	movs	r2, #1
 800786a:	409a      	lsls	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007870:	bf00      	nop
 8007872:	3714      	adds	r7, #20
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	58025408 	.word	0x58025408
 8007880:	5802541c 	.word	0x5802541c
 8007884:	58025430 	.word	0x58025430
 8007888:	58025444 	.word	0x58025444
 800788c:	58025458 	.word	0x58025458
 8007890:	5802546c 	.word	0x5802546c
 8007894:	58025480 	.word	0x58025480
 8007898:	58025494 	.word	0x58025494
 800789c:	cccccccd 	.word	0xcccccccd
 80078a0:	16009600 	.word	0x16009600
 80078a4:	58025880 	.word	0x58025880
 80078a8:	aaaaaaab 	.word	0xaaaaaaab
 80078ac:	400204b8 	.word	0x400204b8
 80078b0:	4002040f 	.word	0x4002040f
 80078b4:	10008200 	.word	0x10008200
 80078b8:	40020880 	.word	0x40020880

080078bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d04a      	beq.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d847      	bhi.n	8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a25      	ldr	r2, [pc, #148]	; (8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d022      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a24      	ldr	r2, [pc, #144]	; (8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d01d      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a22      	ldr	r2, [pc, #136]	; (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d018      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a21      	ldr	r2, [pc, #132]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d013      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a1f      	ldr	r2, [pc, #124]	; (8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00e      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d009      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1c      	ldr	r2, [pc, #112]	; (800798c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d004      	beq.n	8007928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d101      	bne.n	800792c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00a      	beq.n	8007948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4b17      	ldr	r3, [pc, #92]	; (8007994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007944:	671a      	str	r2, [r3, #112]	; 0x70
 8007946:	e009      	b.n	800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	4b14      	ldr	r3, [pc, #80]	; (800799c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	461a      	mov	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a11      	ldr	r2, [pc, #68]	; (80079a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800795a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	3b01      	subs	r3, #1
 8007960:	2201      	movs	r2, #1
 8007962:	409a      	lsls	r2, r3
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007968:	bf00      	nop
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	58025408 	.word	0x58025408
 8007978:	5802541c 	.word	0x5802541c
 800797c:	58025430 	.word	0x58025430
 8007980:	58025444 	.word	0x58025444
 8007984:	58025458 	.word	0x58025458
 8007988:	5802546c 	.word	0x5802546c
 800798c:	58025480 	.word	0x58025480
 8007990:	58025494 	.word	0x58025494
 8007994:	1600963f 	.word	0x1600963f
 8007998:	58025940 	.word	0x58025940
 800799c:	1000823f 	.word	0x1000823f
 80079a0:	40020940 	.word	0x40020940

080079a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e04f      	b.n	8007a56 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d106      	bne.n	80079d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7f9 f800 	bl	80009d0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b20      	ldr	r3, [pc, #128]	; (8007a60 <HAL_DMA2D_Init+0xbc>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6851      	ldr	r1, [r2, #4]
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	69d2      	ldr	r2, [r2, #28]
 80079ea:	4311      	orrs	r1, r2
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	6812      	ldr	r2, [r2, #0]
 80079f0:	430b      	orrs	r3, r1
 80079f2:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079fa:	4b1a      	ldr	r3, [pc, #104]	; (8007a64 <HAL_DMA2D_Init+0xc0>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6891      	ldr	r1, [r2, #8]
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6992      	ldr	r2, [r2, #24]
 8007a06:	4311      	orrs	r1, r2
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6812      	ldr	r2, [r2, #0]
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <HAL_DMA2D_Init+0xc4>)
 8007a18:	4013      	ands	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68d1      	ldr	r1, [r2, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	430b      	orrs	r3, r1
 8007a24:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	051a      	lsls	r2, r3, #20
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	055b      	lsls	r3, r3, #21
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	fff8ffbf 	.word	0xfff8ffbf
 8007a64:	fffffef8 	.word	0xfffffef8
 8007a68:	ffff0000 	.word	0xffff0000

08007a6c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b086      	sub	sp, #24
 8007a70:	af02      	add	r7, sp, #8
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_DMA2D_Start+0x1c>
 8007a84:	2302      	movs	r3, #2
 8007a86:	e018      	b.n	8007aba <HAL_DMA2D_Start+0x4e>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	68b9      	ldr	r1, [r7, #8]
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f000 fab4 	bl	8008010 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b086      	sub	sp, #24
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8007acc:	2300      	movs	r3, #0
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d056      	beq.n	8007b8c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ade:	f7fc fc73 	bl	80043c8 <HAL_GetTick>
 8007ae2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007ae4:	e04b      	b.n	8007b7e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d023      	beq.n	8007b40 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b06:	f043 0202 	orr.w	r2, r3, #2
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d005      	beq.n	8007b24 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1c:	f043 0201 	orr.w	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2221      	movs	r2, #33	; 0x21
 8007b2a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2204      	movs	r2, #4
 8007b30:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e0a5      	b.n	8007c8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b46:	d01a      	beq.n	8007b7e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007b48:	f7fc fc3e 	bl	80043c8 <HAL_GetTick>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	1ad3      	subs	r3, r2, r3
 8007b52:	683a      	ldr	r2, [r7, #0]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <HAL_DMA2D_PollForTransfer+0x9c>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10f      	bne.n	8007b7e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b62:	f043 0220 	orr.w	r2, r3, #32
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2203      	movs	r2, #3
 8007b6e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	e086      	b.n	8007c8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0ac      	beq.n	8007ae6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9e:	f003 0320 	and.w	r3, r3, #32
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d061      	beq.n	8007c72 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bae:	f7fc fc0b 	bl	80043c8 <HAL_GetTick>
 8007bb2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007bb4:	e056      	b.n	8007c64 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d02e      	beq.n	8007c26 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d005      	beq.n	8007bde <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd6:	f043 0204 	orr.w	r2, r3, #4
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d005      	beq.n	8007bf4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bec:	f043 0202 	orr.w	r2, r3, #2
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c02:	f043 0201 	orr.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2229      	movs	r2, #41	; 0x29
 8007c10:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2204      	movs	r2, #4
 8007c16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e032      	b.n	8007c8c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c2c:	d01a      	beq.n	8007c64 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fc fbcb 	bl	80043c8 <HAL_GetTick>
 8007c32:	4602      	mov	r2, r0
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d302      	bcc.n	8007c44 <HAL_DMA2D_PollForTransfer+0x182>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10f      	bne.n	8007c64 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c48:	f043 0220 	orr.w	r2, r3, #32
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2203      	movs	r2, #3
 8007c54:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e013      	b.n	8007c8c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f003 0310 	and.w	r3, r3, #16
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0a1      	beq.n	8007bb6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	2212      	movs	r2, #18
 8007c78:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3718      	adds	r7, #24
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d026      	beq.n	8007d04 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d021      	beq.n	8007d04 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cce:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cd4:	f043 0201 	orr.w	r2, r3, #1
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2204      	movs	r2, #4
 8007ce8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d026      	beq.n	8007d5c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d021      	beq.n	8007d5c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d26:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2220      	movs	r2, #32
 8007d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d34:	f043 0202 	orr.w	r2, r3, #2
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2204      	movs	r2, #4
 8007d40:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d003      	beq.n	8007d5c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 0308 	and.w	r3, r3, #8
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d026      	beq.n	8007db4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d021      	beq.n	8007db4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d7e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2208      	movs	r2, #8
 8007d86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d8c:	f043 0204 	orr.w	r2, r3, #4
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2204      	movs	r2, #4
 8007d98:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f003 0304 	and.w	r3, r3, #4
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d013      	beq.n	8007de6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00e      	beq.n	8007de6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dd6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2204      	movs	r2, #4
 8007dde:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f853 	bl	8007e8c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d024      	beq.n	8007e3a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01f      	beq.n	8007e3a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e08:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2202      	movs	r2, #2
 8007e10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f003 0310 	and.w	r3, r3, #16
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01f      	beq.n	8007e84 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d01a      	beq.n	8007e84 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e5c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2210      	movs	r2, #16
 8007e64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f80e 	bl	8007ea0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8007e84:	bf00      	nop
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8007ed0:	2b01      	cmp	r3, #1
 8007ed2:	d101      	bne.n	8007ed8 <HAL_DMA2D_ConfigLayer+0x24>
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	e092      	b.n	8007ffe <HAL_DMA2D_ConfigLayer+0x14a>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	3328      	adds	r3, #40	; 0x28
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	685a      	ldr	r2, [r3, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	041b      	lsls	r3, r3, #16
 8007f04:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f0c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8007f14:	4313      	orrs	r3, r2
 8007f16:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8007f18:	4b3c      	ldr	r3, [pc, #240]	; (800800c <HAL_DMA2D_ConfigLayer+0x158>)
 8007f1a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	2b0a      	cmp	r3, #10
 8007f22:	d003      	beq.n	8007f2c <HAL_DMA2D_ConfigLayer+0x78>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	2b09      	cmp	r3, #9
 8007f2a:	d107      	bne.n	8007f3c <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007f34:	693a      	ldr	r2, [r7, #16]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	e005      	b.n	8007f48 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	061b      	lsls	r3, r3, #24
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	4313      	orrs	r3, r2
 8007f46:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d120      	bne.n	8007f90 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	43db      	mvns	r3, r3
 8007f58:	ea02 0103 	and.w	r1, r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2b0a      	cmp	r3, #10
 8007f76:	d003      	beq.n	8007f80 <HAL_DMA2D_ConfigLayer+0xcc>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	d135      	bne.n	8007fec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8007f8e:	e02d      	b.n	8007fec <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b0b      	cmp	r3, #11
 8007f96:	d109      	bne.n	8007fac <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	049b      	lsls	r3, r3, #18
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8007faa:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69da      	ldr	r2, [r3, #28]
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	43db      	mvns	r3, r3
 8007fb6:	ea02 0103 	and.w	r1, r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	693a      	ldr	r2, [r7, #16]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	2b0a      	cmp	r3, #10
 8007fd4:	d003      	beq.n	8007fde <HAL_DMA2D_ConfigLayer+0x12a>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	2b09      	cmp	r3, #9
 8007fdc:	d106      	bne.n	8007fec <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8007fea:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	371c      	adds	r7, #28
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	ff33000f 	.word	0xff33000f

08008010 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8008010:	b480      	push	{r7}
 8008012:	b08b      	sub	sp, #44	; 0x2c
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
 800801c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008024:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	041a      	lsls	r2, r3, #16
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	431a      	orrs	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	430a      	orrs	r2, r1
 8008036:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008048:	d174      	bne.n	8008134 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008050:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008058:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008060:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d108      	bne.n	8008082 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8008070:	69ba      	ldr	r2, [r7, #24]
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	431a      	orrs	r2, r3
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	4313      	orrs	r3, r2
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	4313      	orrs	r3, r2
 800807e:	627b      	str	r3, [r7, #36]	; 0x24
 8008080:	e053      	b.n	800812a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d106      	bne.n	8008098 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800808a:	69ba      	ldr	r2, [r7, #24]
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	4313      	orrs	r3, r2
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
 8008096:	e048      	b.n	800812a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	2b02      	cmp	r3, #2
 800809e:	d111      	bne.n	80080c4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	0cdb      	lsrs	r3, r3, #19
 80080a4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	0a9b      	lsrs	r3, r3, #10
 80080aa:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	08db      	lsrs	r3, r3, #3
 80080b0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	02db      	lsls	r3, r3, #11
 80080ba:	4313      	orrs	r3, r2
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4313      	orrs	r3, r2
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
 80080c2:	e032      	b.n	800812a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	2b03      	cmp	r3, #3
 80080ca:	d117      	bne.n	80080fc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	0fdb      	lsrs	r3, r3, #31
 80080d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	0cdb      	lsrs	r3, r3, #19
 80080d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	0adb      	lsrs	r3, r3, #11
 80080dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	08db      	lsrs	r3, r3, #3
 80080e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	029b      	lsls	r3, r3, #10
 80080ec:	431a      	orrs	r2, r3
 80080ee:	6a3b      	ldr	r3, [r7, #32]
 80080f0:	03db      	lsls	r3, r3, #15
 80080f2:	4313      	orrs	r3, r2
 80080f4:	697a      	ldr	r2, [r7, #20]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	627b      	str	r3, [r7, #36]	; 0x24
 80080fa:	e016      	b.n	800812a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	0d1b      	lsrs	r3, r3, #20
 8008106:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	0b1b      	lsrs	r3, r3, #12
 800810c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	091b      	lsrs	r3, r3, #4
 8008112:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	011a      	lsls	r2, r3, #4
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	431a      	orrs	r2, r3
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	031b      	lsls	r3, r3, #12
 8008122:	4313      	orrs	r3, r2
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008130:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8008132:	e00d      	b.n	8008150 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800813c:	d104      	bne.n	8008148 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	615a      	str	r2, [r3, #20]
}
 8008146:	e003      	b.n	8008150 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	60da      	str	r2, [r3, #12]
}
 8008150:	bf00      	nop
 8008152:	372c      	adds	r7, #44	; 0x2c
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800816a:	2300      	movs	r3, #0
 800816c:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	d105      	bne.n	8008182 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800817c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e315      	b.n	80087ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800818c:	2302      	movs	r3, #2
 800818e:	e30e      	b.n	80087ae <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	f040 82fd 	bne.w	80087a0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2202      	movs	r2, #2
 80081aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a82      	ldr	r2, [pc, #520]	; (80083c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d04a      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a81      	ldr	r2, [pc, #516]	; (80083c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d045      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a7f      	ldr	r2, [pc, #508]	; (80083cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d040      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a7e      	ldr	r2, [pc, #504]	; (80083d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d03b      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a7c      	ldr	r2, [pc, #496]	; (80083d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d036      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a7b      	ldr	r2, [pc, #492]	; (80083d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d031      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a79      	ldr	r2, [pc, #484]	; (80083dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d02c      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a78      	ldr	r2, [pc, #480]	; (80083e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d027      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a76      	ldr	r2, [pc, #472]	; (80083e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d022      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a75      	ldr	r2, [pc, #468]	; (80083e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d01d      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a73      	ldr	r2, [pc, #460]	; (80083ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d018      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a72      	ldr	r2, [pc, #456]	; (80083f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d013      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a70      	ldr	r2, [pc, #448]	; (80083f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00e      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a6f      	ldr	r2, [pc, #444]	; (80083f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d009      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a6d      	ldr	r2, [pc, #436]	; (80083fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d004      	beq.n	8008254 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a6c      	ldr	r2, [pc, #432]	; (8008400 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d101      	bne.n	8008258 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8008254:	2301      	movs	r3, #1
 8008256:	e000      	b.n	800825a <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8008258:	2300      	movs	r3, #0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d018      	beq.n	8008290 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800826c:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827a:	3308      	adds	r3, #8
 800827c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008282:	f003 031f 	and.w	r3, r3, #31
 8008286:	223f      	movs	r2, #63	; 0x3f
 8008288:	409a      	lsls	r2, r3
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e018      	b.n	80082c2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	f248 0320 	movw	r3, #32800	; 0x8020
 800829e:	430b      	orrs	r3, r1
 80082a0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ae:	3304      	adds	r3, #4
 80082b0:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b6:	f003 031f 	and.w	r3, r3, #31
 80082ba:	2201      	movs	r2, #1
 80082bc:	409a      	lsls	r2, r3
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 fb41 	bl	8008950 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a3c      	ldr	r2, [pc, #240]	; (80083c4 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d072      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a3a      	ldr	r2, [pc, #232]	; (80083c8 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d06d      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a39      	ldr	r2, [pc, #228]	; (80083cc <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d068      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a37      	ldr	r2, [pc, #220]	; (80083d0 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d063      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a36      	ldr	r2, [pc, #216]	; (80083d4 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d05e      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a34      	ldr	r2, [pc, #208]	; (80083d8 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d059      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a33      	ldr	r2, [pc, #204]	; (80083dc <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d054      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a31      	ldr	r2, [pc, #196]	; (80083e0 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d04f      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a30      	ldr	r2, [pc, #192]	; (80083e4 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d04a      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a2e      	ldr	r2, [pc, #184]	; (80083e8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d045      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a2d      	ldr	r2, [pc, #180]	; (80083ec <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d040      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d03b      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a2a      	ldr	r2, [pc, #168]	; (80083f4 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d036      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a28      	ldr	r2, [pc, #160]	; (80083f8 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d031      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a27      	ldr	r2, [pc, #156]	; (80083fc <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d02c      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a25      	ldr	r2, [pc, #148]	; (8008400 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d027      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a24      	ldr	r2, [pc, #144]	; (8008404 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d022      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a22      	ldr	r2, [pc, #136]	; (8008408 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d01d      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a21      	ldr	r2, [pc, #132]	; (800840c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d018      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a1f      	ldr	r2, [pc, #124]	; (8008410 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d013      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a1e      	ldr	r2, [pc, #120]	; (8008414 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00e      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d009      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a1b      	ldr	r2, [pc, #108]	; (800841c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d004      	beq.n	80083be <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a19      	ldr	r2, [pc, #100]	; (8008420 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d132      	bne.n	8008424 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80083be:	2301      	movs	r3, #1
 80083c0:	e031      	b.n	8008426 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80083c2:	bf00      	nop
 80083c4:	40020010 	.word	0x40020010
 80083c8:	40020028 	.word	0x40020028
 80083cc:	40020040 	.word	0x40020040
 80083d0:	40020058 	.word	0x40020058
 80083d4:	40020070 	.word	0x40020070
 80083d8:	40020088 	.word	0x40020088
 80083dc:	400200a0 	.word	0x400200a0
 80083e0:	400200b8 	.word	0x400200b8
 80083e4:	40020410 	.word	0x40020410
 80083e8:	40020428 	.word	0x40020428
 80083ec:	40020440 	.word	0x40020440
 80083f0:	40020458 	.word	0x40020458
 80083f4:	40020470 	.word	0x40020470
 80083f8:	40020488 	.word	0x40020488
 80083fc:	400204a0 	.word	0x400204a0
 8008400:	400204b8 	.word	0x400204b8
 8008404:	58025408 	.word	0x58025408
 8008408:	5802541c 	.word	0x5802541c
 800840c:	58025430 	.word	0x58025430
 8008410:	58025444 	.word	0x58025444
 8008414:	58025458 	.word	0x58025458
 8008418:	5802546c 	.word	0x5802546c
 800841c:	58025480 	.word	0x58025480
 8008420:	58025494 	.word	0x58025494
 8008424:	2300      	movs	r3, #0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00d      	beq.n	8008446 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008432:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008444:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a3b      	ldr	r2, [pc, #236]	; (8008538 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d04a      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a39      	ldr	r2, [pc, #228]	; (800853c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d045      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a38      	ldr	r2, [pc, #224]	; (8008540 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d040      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a36      	ldr	r2, [pc, #216]	; (8008544 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d03b      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a35      	ldr	r2, [pc, #212]	; (8008548 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d036      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a33      	ldr	r2, [pc, #204]	; (800854c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d031      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a32      	ldr	r2, [pc, #200]	; (8008550 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d02c      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a30      	ldr	r2, [pc, #192]	; (8008554 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d027      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a2f      	ldr	r2, [pc, #188]	; (8008558 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d022      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a2d      	ldr	r2, [pc, #180]	; (800855c <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d01d      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a2c      	ldr	r2, [pc, #176]	; (8008560 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d018      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a2a      	ldr	r2, [pc, #168]	; (8008564 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d013      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d00e      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a27      	ldr	r2, [pc, #156]	; (800856c <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d009      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a26      	ldr	r2, [pc, #152]	; (8008570 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d004      	beq.n	80084e6 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a24      	ldr	r2, [pc, #144]	; (8008574 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80084e6:	2301      	movs	r3, #1
 80084e8:	e000      	b.n	80084ec <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80084ea:	2300      	movs	r3, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d043      	beq.n	8008578 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f023 021e 	bic.w	r2, r3, #30
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f042 0216 	orr.w	r2, r2, #22
 8008502:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	695a      	ldr	r2, [r3, #20]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008512:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d103      	bne.n	8008524 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008520:	2b00      	cmp	r3, #0
 8008522:	d043      	beq.n	80085ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f042 0208 	orr.w	r2, r2, #8
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	e03a      	b.n	80085ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8008536:	bf00      	nop
 8008538:	40020010 	.word	0x40020010
 800853c:	40020028 	.word	0x40020028
 8008540:	40020040 	.word	0x40020040
 8008544:	40020058 	.word	0x40020058
 8008548:	40020070 	.word	0x40020070
 800854c:	40020088 	.word	0x40020088
 8008550:	400200a0 	.word	0x400200a0
 8008554:	400200b8 	.word	0x400200b8
 8008558:	40020410 	.word	0x40020410
 800855c:	40020428 	.word	0x40020428
 8008560:	40020440 	.word	0x40020440
 8008564:	40020458 	.word	0x40020458
 8008568:	40020470 	.word	0x40020470
 800856c:	40020488 	.word	0x40020488
 8008570:	400204a0 	.word	0x400204a0
 8008574:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f023 020e 	bic.w	r2, r3, #14
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 020a 	orr.w	r2, r2, #10
 800858a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	d103      	bne.n	800859c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008598:	2b00      	cmp	r3, #0
 800859a:	d007      	beq.n	80085ac <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0204 	orr.w	r2, r2, #4
 80085aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a81      	ldr	r2, [pc, #516]	; (80087b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d072      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a80      	ldr	r2, [pc, #512]	; (80087bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d06d      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a7e      	ldr	r2, [pc, #504]	; (80087c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d068      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a7d      	ldr	r2, [pc, #500]	; (80087c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d063      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a7b      	ldr	r2, [pc, #492]	; (80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d05e      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a7a      	ldr	r2, [pc, #488]	; (80087cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d059      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a78      	ldr	r2, [pc, #480]	; (80087d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d054      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a77      	ldr	r2, [pc, #476]	; (80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d04f      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a75      	ldr	r2, [pc, #468]	; (80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d04a      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a74      	ldr	r2, [pc, #464]	; (80087dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d045      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a72      	ldr	r2, [pc, #456]	; (80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d040      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a71      	ldr	r2, [pc, #452]	; (80087e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d03b      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a6f      	ldr	r2, [pc, #444]	; (80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d036      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a6e      	ldr	r2, [pc, #440]	; (80087ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d031      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a6c      	ldr	r2, [pc, #432]	; (80087f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d02c      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a6b      	ldr	r2, [pc, #428]	; (80087f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d027      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a69      	ldr	r2, [pc, #420]	; (80087f8 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d022      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a68      	ldr	r2, [pc, #416]	; (80087fc <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d01d      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a66      	ldr	r2, [pc, #408]	; (8008800 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d018      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a65      	ldr	r2, [pc, #404]	; (8008804 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d013      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a63      	ldr	r2, [pc, #396]	; (8008808 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d00e      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a62      	ldr	r2, [pc, #392]	; (800880c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d009      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a60      	ldr	r2, [pc, #384]	; (8008810 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d004      	beq.n	800869c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a5f      	ldr	r2, [pc, #380]	; (8008814 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d101      	bne.n	80086a0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80086a0:	2300      	movs	r3, #0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d01a      	beq.n	80086dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d007      	beq.n	80086c4 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d007      	beq.n	80086dc <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a35      	ldr	r2, [pc, #212]	; (80087b8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d04a      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a34      	ldr	r2, [pc, #208]	; (80087bc <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d045      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a32      	ldr	r2, [pc, #200]	; (80087c0 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d040      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a31      	ldr	r2, [pc, #196]	; (80087c4 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d03b      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a2f      	ldr	r2, [pc, #188]	; (80087c8 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d036      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a2e      	ldr	r2, [pc, #184]	; (80087cc <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d031      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2c      	ldr	r2, [pc, #176]	; (80087d0 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d02c      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2b      	ldr	r2, [pc, #172]	; (80087d4 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d027      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a29      	ldr	r2, [pc, #164]	; (80087d8 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d022      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a28      	ldr	r2, [pc, #160]	; (80087dc <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d01d      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a26      	ldr	r2, [pc, #152]	; (80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d018      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a25      	ldr	r2, [pc, #148]	; (80087e4 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d013      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a23      	ldr	r2, [pc, #140]	; (80087e8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d00e      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a22      	ldr	r2, [pc, #136]	; (80087ec <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d009      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a20      	ldr	r2, [pc, #128]	; (80087f0 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d004      	beq.n	800877c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a1f      	ldr	r2, [pc, #124]	; (80087f4 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d108      	bne.n	800878e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f042 0201 	orr.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	e00e      	b.n	80087ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f042 0201 	orr.w	r2, r2, #1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	e005      	b.n	80087ac <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	40020010 	.word	0x40020010
 80087bc:	40020028 	.word	0x40020028
 80087c0:	40020040 	.word	0x40020040
 80087c4:	40020058 	.word	0x40020058
 80087c8:	40020070 	.word	0x40020070
 80087cc:	40020088 	.word	0x40020088
 80087d0:	400200a0 	.word	0x400200a0
 80087d4:	400200b8 	.word	0x400200b8
 80087d8:	40020410 	.word	0x40020410
 80087dc:	40020428 	.word	0x40020428
 80087e0:	40020440 	.word	0x40020440
 80087e4:	40020458 	.word	0x40020458
 80087e8:	40020470 	.word	0x40020470
 80087ec:	40020488 	.word	0x40020488
 80087f0:	400204a0 	.word	0x400204a0
 80087f4:	400204b8 	.word	0x400204b8
 80087f8:	58025408 	.word	0x58025408
 80087fc:	5802541c 	.word	0x5802541c
 8008800:	58025430 	.word	0x58025430
 8008804:	58025444 	.word	0x58025444
 8008808:	58025458 	.word	0x58025458
 800880c:	5802546c 	.word	0x5802546c
 8008810:	58025480 	.word	0x58025480
 8008814:	58025494 	.word	0x58025494

08008818 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a39      	ldr	r2, [pc, #228]	; (8008910 <HAL_DMAEx_ChangeMemory+0xf8>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d04a      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a37      	ldr	r2, [pc, #220]	; (8008914 <HAL_DMAEx_ChangeMemory+0xfc>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d045      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a36      	ldr	r2, [pc, #216]	; (8008918 <HAL_DMAEx_ChangeMemory+0x100>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d040      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a34      	ldr	r2, [pc, #208]	; (800891c <HAL_DMAEx_ChangeMemory+0x104>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d03b      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a33      	ldr	r2, [pc, #204]	; (8008920 <HAL_DMAEx_ChangeMemory+0x108>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d036      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a31      	ldr	r2, [pc, #196]	; (8008924 <HAL_DMAEx_ChangeMemory+0x10c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d031      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a30      	ldr	r2, [pc, #192]	; (8008928 <HAL_DMAEx_ChangeMemory+0x110>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d02c      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a2e      	ldr	r2, [pc, #184]	; (800892c <HAL_DMAEx_ChangeMemory+0x114>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d027      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a2d      	ldr	r2, [pc, #180]	; (8008930 <HAL_DMAEx_ChangeMemory+0x118>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d022      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a2b      	ldr	r2, [pc, #172]	; (8008934 <HAL_DMAEx_ChangeMemory+0x11c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d01d      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a2a      	ldr	r2, [pc, #168]	; (8008938 <HAL_DMAEx_ChangeMemory+0x120>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d018      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a28      	ldr	r2, [pc, #160]	; (800893c <HAL_DMAEx_ChangeMemory+0x124>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d013      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a27      	ldr	r2, [pc, #156]	; (8008940 <HAL_DMAEx_ChangeMemory+0x128>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d00e      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a25      	ldr	r2, [pc, #148]	; (8008944 <HAL_DMAEx_ChangeMemory+0x12c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d009      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a24      	ldr	r2, [pc, #144]	; (8008948 <HAL_DMAEx_ChangeMemory+0x130>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d004      	beq.n	80088c6 <HAL_DMAEx_ChangeMemory+0xae>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a22      	ldr	r2, [pc, #136]	; (800894c <HAL_DMAEx_ChangeMemory+0x134>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <HAL_DMAEx_ChangeMemory+0xb2>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <HAL_DMAEx_ChangeMemory+0xb4>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00c      	beq.n	80088ea <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80088d0:	79fb      	ldrb	r3, [r7, #7]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d104      	bne.n	80088e0 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	e010      	b.n	8008902 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	611a      	str	r2, [r3, #16]
 80088e8:	e00b      	b.n	8008902 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d104      	bne.n	80088fa <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68ba      	ldr	r2, [r7, #8]
 80088f6:	60da      	str	r2, [r3, #12]
 80088f8:	e003      	b.n	8008902 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40020010 	.word	0x40020010
 8008914:	40020028 	.word	0x40020028
 8008918:	40020040 	.word	0x40020040
 800891c:	40020058 	.word	0x40020058
 8008920:	40020070 	.word	0x40020070
 8008924:	40020088 	.word	0x40020088
 8008928:	400200a0 	.word	0x400200a0
 800892c:	400200b8 	.word	0x400200b8
 8008930:	40020410 	.word	0x40020410
 8008934:	40020428 	.word	0x40020428
 8008938:	40020440 	.word	0x40020440
 800893c:	40020458 	.word	0x40020458
 8008940:	40020470 	.word	0x40020470
 8008944:	40020488 	.word	0x40020488
 8008948:	400204a0 	.word	0x400204a0
 800894c:	400204b8 	.word	0x400204b8

08008950 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	60f8      	str	r0, [r7, #12]
 8008958:	60b9      	str	r1, [r7, #8]
 800895a:	607a      	str	r2, [r7, #4]
 800895c:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a46      	ldr	r2, [pc, #280]	; (8008a7c <DMA_MultiBufferSetConfig+0x12c>)
 8008964:	4293      	cmp	r3, r2
 8008966:	d04a      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a44      	ldr	r2, [pc, #272]	; (8008a80 <DMA_MultiBufferSetConfig+0x130>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d045      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a43      	ldr	r2, [pc, #268]	; (8008a84 <DMA_MultiBufferSetConfig+0x134>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d040      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a41      	ldr	r2, [pc, #260]	; (8008a88 <DMA_MultiBufferSetConfig+0x138>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d03b      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a40      	ldr	r2, [pc, #256]	; (8008a8c <DMA_MultiBufferSetConfig+0x13c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d036      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a3e      	ldr	r2, [pc, #248]	; (8008a90 <DMA_MultiBufferSetConfig+0x140>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d031      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a3d      	ldr	r2, [pc, #244]	; (8008a94 <DMA_MultiBufferSetConfig+0x144>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d02c      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a3b      	ldr	r2, [pc, #236]	; (8008a98 <DMA_MultiBufferSetConfig+0x148>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d027      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a3a      	ldr	r2, [pc, #232]	; (8008a9c <DMA_MultiBufferSetConfig+0x14c>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d022      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a38      	ldr	r2, [pc, #224]	; (8008aa0 <DMA_MultiBufferSetConfig+0x150>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d01d      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a37      	ldr	r2, [pc, #220]	; (8008aa4 <DMA_MultiBufferSetConfig+0x154>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d018      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a35      	ldr	r2, [pc, #212]	; (8008aa8 <DMA_MultiBufferSetConfig+0x158>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d013      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a34      	ldr	r2, [pc, #208]	; (8008aac <DMA_MultiBufferSetConfig+0x15c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00e      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a32      	ldr	r2, [pc, #200]	; (8008ab0 <DMA_MultiBufferSetConfig+0x160>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d009      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a31      	ldr	r2, [pc, #196]	; (8008ab4 <DMA_MultiBufferSetConfig+0x164>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d004      	beq.n	80089fe <DMA_MultiBufferSetConfig+0xae>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <DMA_MultiBufferSetConfig+0x168>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d101      	bne.n	8008a02 <DMA_MultiBufferSetConfig+0xb2>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <DMA_MultiBufferSetConfig+0xb4>
 8008a02:	2300      	movs	r3, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d019      	beq.n	8008a3c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	683a      	ldr	r2, [r7, #0]
 8008a0e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	2b40      	cmp	r3, #64	; 0x40
 8008a16:	d108      	bne.n	8008a2a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8008a28:	e021      	b.n	8008a6e <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	60da      	str	r2, [r3, #12]
}
 8008a3a:	e018      	b.n	8008a6e <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b40      	cmp	r3, #64	; 0x40
 8008a4a:	d108      	bne.n	8008a5e <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	60da      	str	r2, [r3, #12]
}
 8008a5c:	e007      	b.n	8008a6e <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	60da      	str	r2, [r3, #12]
}
 8008a6e:	bf00      	nop
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	40020010 	.word	0x40020010
 8008a80:	40020028 	.word	0x40020028
 8008a84:	40020040 	.word	0x40020040
 8008a88:	40020058 	.word	0x40020058
 8008a8c:	40020070 	.word	0x40020070
 8008a90:	40020088 	.word	0x40020088
 8008a94:	400200a0 	.word	0x400200a0
 8008a98:	400200b8 	.word	0x400200b8
 8008a9c:	40020410 	.word	0x40020410
 8008aa0:	40020428 	.word	0x40020428
 8008aa4:	40020440 	.word	0x40020440
 8008aa8:	40020458 	.word	0x40020458
 8008aac:	40020470 	.word	0x40020470
 8008ab0:	40020488 	.word	0x40020488
 8008ab4:	400204a0 	.word	0x400204a0
 8008ab8:	400204b8 	.word	0x400204b8

08008abc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b089      	sub	sp, #36	; 0x24
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008aca:	4b89      	ldr	r3, [pc, #548]	; (8008cf0 <HAL_GPIO_Init+0x234>)
 8008acc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008ace:	e194      	b.n	8008dfa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	2101      	movs	r1, #1
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8008adc:	4013      	ands	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	f000 8186 	beq.w	8008df4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f003 0303 	and.w	r3, r3, #3
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d005      	beq.n	8008b00 <HAL_GPIO_Init+0x44>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	f003 0303 	and.w	r3, r3, #3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d130      	bne.n	8008b62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b10:	43db      	mvns	r3, r3
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	4013      	ands	r3, r2
 8008b16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	005b      	lsls	r3, r3, #1
 8008b20:	fa02 f303 	lsl.w	r3, r2, r3
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b36:	2201      	movs	r2, #1
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	f003 0201 	and.w	r2, r3, #1
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	fa02 f303 	lsl.w	r3, r2, r3
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	69ba      	ldr	r2, [r7, #24]
 8008b60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	f003 0303 	and.w	r3, r3, #3
 8008b6a:	2b03      	cmp	r3, #3
 8008b6c:	d017      	beq.n	8008b9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	2203      	movs	r2, #3
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	4013      	ands	r3, r2
 8008b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	4313      	orrs	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f003 0303 	and.w	r3, r3, #3
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d123      	bne.n	8008bf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	08da      	lsrs	r2, r3, #3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3208      	adds	r2, #8
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	220f      	movs	r2, #15
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43db      	mvns	r3, r3
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	4013      	ands	r3, r2
 8008bcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	691a      	ldr	r2, [r3, #16]
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f003 0307 	and.w	r3, r3, #7
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	fa02 f303 	lsl.w	r3, r2, r3
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	4313      	orrs	r3, r2
 8008be2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	08da      	lsrs	r2, r3, #3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	3208      	adds	r2, #8
 8008bec:	69b9      	ldr	r1, [r7, #24]
 8008bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	2203      	movs	r2, #3
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	69ba      	ldr	r2, [r7, #24]
 8008c06:	4013      	ands	r3, r2
 8008c08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f003 0203 	and.w	r2, r3, #3
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	69ba      	ldr	r2, [r7, #24]
 8008c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 80e0 	beq.w	8008df4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c34:	4b2f      	ldr	r3, [pc, #188]	; (8008cf4 <HAL_GPIO_Init+0x238>)
 8008c36:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008c3a:	4a2e      	ldr	r2, [pc, #184]	; (8008cf4 <HAL_GPIO_Init+0x238>)
 8008c3c:	f043 0302 	orr.w	r3, r3, #2
 8008c40:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8008c44:	4b2b      	ldr	r3, [pc, #172]	; (8008cf4 <HAL_GPIO_Init+0x238>)
 8008c46:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c52:	4a29      	ldr	r2, [pc, #164]	; (8008cf8 <HAL_GPIO_Init+0x23c>)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	3302      	adds	r3, #2
 8008c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	220f      	movs	r2, #15
 8008c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	4013      	ands	r3, r2
 8008c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a20      	ldr	r2, [pc, #128]	; (8008cfc <HAL_GPIO_Init+0x240>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d052      	beq.n	8008d24 <HAL_GPIO_Init+0x268>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a1f      	ldr	r2, [pc, #124]	; (8008d00 <HAL_GPIO_Init+0x244>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d031      	beq.n	8008cea <HAL_GPIO_Init+0x22e>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a1e      	ldr	r2, [pc, #120]	; (8008d04 <HAL_GPIO_Init+0x248>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d02b      	beq.n	8008ce6 <HAL_GPIO_Init+0x22a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <HAL_GPIO_Init+0x24c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d025      	beq.n	8008ce2 <HAL_GPIO_Init+0x226>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a1c      	ldr	r2, [pc, #112]	; (8008d0c <HAL_GPIO_Init+0x250>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01f      	beq.n	8008cde <HAL_GPIO_Init+0x222>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1b      	ldr	r2, [pc, #108]	; (8008d10 <HAL_GPIO_Init+0x254>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d019      	beq.n	8008cda <HAL_GPIO_Init+0x21e>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <HAL_GPIO_Init+0x258>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <HAL_GPIO_Init+0x21a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <HAL_GPIO_Init+0x25c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00d      	beq.n	8008cd2 <HAL_GPIO_Init+0x216>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a18      	ldr	r2, [pc, #96]	; (8008d1c <HAL_GPIO_Init+0x260>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d007      	beq.n	8008cce <HAL_GPIO_Init+0x212>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a17      	ldr	r2, [pc, #92]	; (8008d20 <HAL_GPIO_Init+0x264>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d101      	bne.n	8008cca <HAL_GPIO_Init+0x20e>
 8008cc6:	2309      	movs	r3, #9
 8008cc8:	e02d      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cca:	230a      	movs	r3, #10
 8008ccc:	e02b      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cce:	2308      	movs	r3, #8
 8008cd0:	e029      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cd2:	2307      	movs	r3, #7
 8008cd4:	e027      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cd6:	2306      	movs	r3, #6
 8008cd8:	e025      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cda:	2305      	movs	r3, #5
 8008cdc:	e023      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cde:	2304      	movs	r3, #4
 8008ce0:	e021      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e01f      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	e01d      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cea:	2301      	movs	r3, #1
 8008cec:	e01b      	b.n	8008d26 <HAL_GPIO_Init+0x26a>
 8008cee:	bf00      	nop
 8008cf0:	58000080 	.word	0x58000080
 8008cf4:	58024400 	.word	0x58024400
 8008cf8:	58000400 	.word	0x58000400
 8008cfc:	58020000 	.word	0x58020000
 8008d00:	58020400 	.word	0x58020400
 8008d04:	58020800 	.word	0x58020800
 8008d08:	58020c00 	.word	0x58020c00
 8008d0c:	58021000 	.word	0x58021000
 8008d10:	58021400 	.word	0x58021400
 8008d14:	58021800 	.word	0x58021800
 8008d18:	58021c00 	.word	0x58021c00
 8008d1c:	58022000 	.word	0x58022000
 8008d20:	58022400 	.word	0x58022400
 8008d24:	2300      	movs	r3, #0
 8008d26:	69fa      	ldr	r2, [r7, #28]
 8008d28:	f002 0203 	and.w	r2, r2, #3
 8008d2c:	0092      	lsls	r2, r2, #2
 8008d2e:	4093      	lsls	r3, r2
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d36:	4938      	ldr	r1, [pc, #224]	; (8008e18 <HAL_GPIO_Init+0x35c>)
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	089b      	lsrs	r3, r3, #2
 8008d3c:	3302      	adds	r3, #2
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	43db      	mvns	r3, r3
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	4013      	ands	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d003      	beq.n	8008d6a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d76:	685b      	ldr	r3, [r3, #4]
 8008d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	4013      	ands	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d003      	beq.n	8008d98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	43db      	mvns	r3, r3
 8008daa:	69ba      	ldr	r2, [r7, #24]
 8008dac:	4013      	ands	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	43db      	mvns	r3, r3
 8008dd4:	69ba      	ldr	r2, [r7, #24]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	3301      	adds	r3, #1
 8008df8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	fa22 f303 	lsr.w	r3, r2, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f47f ae63 	bne.w	8008ad0 <HAL_GPIO_Init+0x14>
  }
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	3724      	adds	r7, #36	; 0x24
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr
 8008e18:	58000400 	.word	0x58000400

08008e1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b087      	sub	sp, #28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008e26:	2300      	movs	r3, #0
 8008e28:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008e2a:	4b75      	ldr	r3, [pc, #468]	; (8009000 <HAL_GPIO_DeInit+0x1e4>)
 8008e2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8008e2e:	e0d9      	b.n	8008fe4 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008e30:	2201      	movs	r2, #1
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	683a      	ldr	r2, [r7, #0]
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 80cc 	beq.w	8008fde <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008e46:	4a6f      	ldr	r2, [pc, #444]	; (8009004 <HAL_GPIO_DeInit+0x1e8>)
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e52:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4013      	ands	r3, r2
 8008e66:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a67      	ldr	r2, [pc, #412]	; (8009008 <HAL_GPIO_DeInit+0x1ec>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d037      	beq.n	8008ee0 <HAL_GPIO_DeInit+0xc4>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a66      	ldr	r2, [pc, #408]	; (800900c <HAL_GPIO_DeInit+0x1f0>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d031      	beq.n	8008edc <HAL_GPIO_DeInit+0xc0>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a65      	ldr	r2, [pc, #404]	; (8009010 <HAL_GPIO_DeInit+0x1f4>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d02b      	beq.n	8008ed8 <HAL_GPIO_DeInit+0xbc>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4a64      	ldr	r2, [pc, #400]	; (8009014 <HAL_GPIO_DeInit+0x1f8>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d025      	beq.n	8008ed4 <HAL_GPIO_DeInit+0xb8>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	4a63      	ldr	r2, [pc, #396]	; (8009018 <HAL_GPIO_DeInit+0x1fc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d01f      	beq.n	8008ed0 <HAL_GPIO_DeInit+0xb4>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a62      	ldr	r2, [pc, #392]	; (800901c <HAL_GPIO_DeInit+0x200>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d019      	beq.n	8008ecc <HAL_GPIO_DeInit+0xb0>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a61      	ldr	r2, [pc, #388]	; (8009020 <HAL_GPIO_DeInit+0x204>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d013      	beq.n	8008ec8 <HAL_GPIO_DeInit+0xac>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a60      	ldr	r2, [pc, #384]	; (8009024 <HAL_GPIO_DeInit+0x208>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00d      	beq.n	8008ec4 <HAL_GPIO_DeInit+0xa8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a5f      	ldr	r2, [pc, #380]	; (8009028 <HAL_GPIO_DeInit+0x20c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d007      	beq.n	8008ec0 <HAL_GPIO_DeInit+0xa4>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a5e      	ldr	r2, [pc, #376]	; (800902c <HAL_GPIO_DeInit+0x210>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d101      	bne.n	8008ebc <HAL_GPIO_DeInit+0xa0>
 8008eb8:	2309      	movs	r3, #9
 8008eba:	e012      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ebc:	230a      	movs	r3, #10
 8008ebe:	e010      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ec0:	2308      	movs	r3, #8
 8008ec2:	e00e      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ec4:	2307      	movs	r3, #7
 8008ec6:	e00c      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ec8:	2306      	movs	r3, #6
 8008eca:	e00a      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ecc:	2305      	movs	r3, #5
 8008ece:	e008      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	e006      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e004      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	e002      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008edc:	2301      	movs	r3, #1
 8008ede:	e000      	b.n	8008ee2 <HAL_GPIO_DeInit+0xc6>
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	f002 0203 	and.w	r2, r2, #3
 8008ee8:	0092      	lsls	r2, r2, #2
 8008eea:	4093      	lsls	r3, r2
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d136      	bne.n	8008f60 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	401a      	ands	r2, r3
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	43db      	mvns	r3, r3
 8008f08:	401a      	ands	r2, r3
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8008f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	43db      	mvns	r3, r3
 8008f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f2e:	4013      	ands	r3, r2
 8008f30:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f003 0303 	and.w	r3, r3, #3
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	220f      	movs	r2, #15
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008f42:	4a30      	ldr	r2, [pc, #192]	; (8009004 <HAL_GPIO_DeInit+0x1e8>)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	089b      	lsrs	r3, r3, #2
 8008f48:	3302      	adds	r3, #2
 8008f4a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	43da      	mvns	r2, r3
 8008f52:	482c      	ldr	r0, [pc, #176]	; (8009004 <HAL_GPIO_DeInit+0x1e8>)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	089b      	lsrs	r3, r3, #2
 8008f58:	400a      	ands	r2, r1
 8008f5a:	3302      	adds	r3, #2
 8008f5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	2103      	movs	r1, #3
 8008f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	08da      	lsrs	r2, r3, #3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3208      	adds	r2, #8
 8008f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	220f      	movs	r2, #15
 8008f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8e:	43db      	mvns	r3, r3
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	08d2      	lsrs	r2, r2, #3
 8008f94:	4019      	ands	r1, r3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3208      	adds	r2, #8
 8008f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68da      	ldr	r2, [r3, #12]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	2103      	movs	r1, #3
 8008fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fac:	43db      	mvns	r3, r3
 8008fae:	401a      	ands	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	2101      	movs	r1, #1
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc0:	43db      	mvns	r3, r3
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	689a      	ldr	r2, [r3, #8]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	2103      	movs	r1, #3
 8008fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fd6:	43db      	mvns	r3, r3
 8008fd8:	401a      	ands	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f47f af1f 	bne.w	8008e30 <HAL_GPIO_DeInit+0x14>
  }
}
 8008ff2:	bf00      	nop
 8008ff4:	bf00      	nop
 8008ff6:	371c      	adds	r7, #28
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr
 8009000:	58000080 	.word	0x58000080
 8009004:	58000400 	.word	0x58000400
 8009008:	58020000 	.word	0x58020000
 800900c:	58020400 	.word	0x58020400
 8009010:	58020800 	.word	0x58020800
 8009014:	58020c00 	.word	0x58020c00
 8009018:	58021000 	.word	0x58021000
 800901c:	58021400 	.word	0x58021400
 8009020:	58021800 	.word	0x58021800
 8009024:	58021c00 	.word	0x58021c00
 8009028:	58022000 	.word	0x58022000
 800902c:	58022400 	.word	0x58022400

08009030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	807b      	strh	r3, [r7, #2]
 800903c:	4613      	mov	r3, r2
 800903e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009040:	787b      	ldrb	r3, [r7, #1]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009046:	887a      	ldrh	r2, [r7, #2]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800904c:	e003      	b.n	8009056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	041a      	lsls	r2, r3, #16
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	619a      	str	r2, [r3, #24]
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009062:	b480      	push	{r7}
 8009064:	b085      	sub	sp, #20
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
 800906a:	460b      	mov	r3, r1
 800906c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	695b      	ldr	r3, [r3, #20]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009074:	887a      	ldrh	r2, [r7, #2]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	4013      	ands	r3, r2
 800907a:	041a      	lsls	r2, r3, #16
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	43d9      	mvns	r1, r3
 8009080:	887b      	ldrh	r3, [r7, #2]
 8009082:	400b      	ands	r3, r1
 8009084:	431a      	orrs	r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	619a      	str	r2, [r3, #24]
}
 800908a:	bf00      	nop
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr
	...

08009098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d101      	bne.n	80090aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090a6:	2301      	movs	r3, #1
 80090a8:	e07f      	b.n	80091aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d106      	bne.n	80090c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 f8a9 	bl	8009216 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2224      	movs	r2, #36	; 0x24
 80090c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80090e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	689a      	ldr	r2, [r3, #8]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80090f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68db      	ldr	r3, [r3, #12]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d107      	bne.n	8009112 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800910e:	609a      	str	r2, [r3, #8]
 8009110:	e006      	b.n	8009120 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	689a      	ldr	r2, [r3, #8]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800911e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d104      	bne.n	8009132 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6859      	ldr	r1, [r3, #4]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	4b1d      	ldr	r3, [pc, #116]	; (80091b4 <HAL_I2C_Init+0x11c>)
 800913e:	430b      	orrs	r3, r1
 8009140:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009150:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	691a      	ldr	r2, [r3, #16]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	69d9      	ldr	r1, [r3, #28]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a1a      	ldr	r2, [r3, #32]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	430a      	orrs	r2, r1
 800917a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	02008000 	.word	0x02008000

080091b8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d101      	bne.n	80091ca <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80091c6:	2301      	movs	r3, #1
 80091c8:	e021      	b.n	800920e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2224      	movs	r2, #36	; 0x24
 80091ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0201 	bic.w	r2, r2, #1
 80091e0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f821 	bl	800922a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009216:	b480      	push	{r7}
 8009218:	b083      	sub	sp, #12
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800921e:	bf00      	nop
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800922a:	b480      	push	{r7}
 800922c:	b083      	sub	sp, #12
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009232:	bf00      	nop
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr
	...

08009240 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b088      	sub	sp, #32
 8009244:	af02      	add	r7, sp, #8
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	461a      	mov	r2, r3
 800924e:	4603      	mov	r3, r0
 8009250:	817b      	strh	r3, [r7, #10]
 8009252:	460b      	mov	r3, r1
 8009254:	813b      	strh	r3, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009260:	b2db      	uxtb	r3, r3
 8009262:	2b20      	cmp	r3, #32
 8009264:	f040 80f9 	bne.w	800945a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <HAL_I2C_Mem_Write+0x34>
 800926e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d105      	bne.n	8009280 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f44f 7200 	mov.w	r2, #512	; 0x200
 800927a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e0ed      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009286:	2b01      	cmp	r3, #1
 8009288:	d101      	bne.n	800928e <HAL_I2C_Mem_Write+0x4e>
 800928a:	2302      	movs	r3, #2
 800928c:	e0e6      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2201      	movs	r2, #1
 8009292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009296:	f7fb f897 	bl	80043c8 <HAL_GetTick>
 800929a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	9300      	str	r3, [sp, #0]
 80092a0:	2319      	movs	r3, #25
 80092a2:	2201      	movs	r2, #1
 80092a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fadd 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0d1      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2221      	movs	r2, #33	; 0x21
 80092bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2240      	movs	r2, #64	; 0x40
 80092c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2200      	movs	r2, #0
 80092cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a3a      	ldr	r2, [r7, #32]
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80092d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092e0:	88f8      	ldrh	r0, [r7, #6]
 80092e2:	893a      	ldrh	r2, [r7, #8]
 80092e4:	8979      	ldrh	r1, [r7, #10]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	4603      	mov	r3, r0
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f000 f9ed 	bl	80096d0 <I2C_RequestMemoryWrite>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e0a9      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800930c:	b29b      	uxth	r3, r3
 800930e:	2bff      	cmp	r3, #255	; 0xff
 8009310:	d90e      	bls.n	8009330 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	22ff      	movs	r2, #255	; 0xff
 8009316:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800931c:	b2da      	uxtb	r2, r3
 800931e:	8979      	ldrh	r1, [r7, #10]
 8009320:	2300      	movs	r3, #0
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fc57 	bl	8009bdc <I2C_TransferConfig>
 800932e:	e00f      	b.n	8009350 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933e:	b2da      	uxtb	r2, r3
 8009340:	8979      	ldrh	r1, [r7, #10]
 8009342:	2300      	movs	r3, #0
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fc46 	bl	8009bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009350:	697a      	ldr	r2, [r7, #20]
 8009352:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009354:	68f8      	ldr	r0, [r7, #12]
 8009356:	f000 fad6 	bl	8009906 <I2C_WaitOnTXISFlagUntilTimeout>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	e07b      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009368:	781a      	ldrb	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	1c5a      	adds	r2, r3, #1
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800937e:	b29b      	uxth	r3, r3
 8009380:	3b01      	subs	r3, #1
 8009382:	b29a      	uxth	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d034      	beq.n	8009408 <HAL_I2C_Mem_Write+0x1c8>
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d130      	bne.n	8009408 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	2200      	movs	r2, #0
 80093ae:	2180      	movs	r1, #128	; 0x80
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 fa59 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e04d      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	2bff      	cmp	r3, #255	; 0xff
 80093c8:	d90e      	bls.n	80093e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	22ff      	movs	r2, #255	; 0xff
 80093ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	8979      	ldrh	r1, [r7, #10]
 80093d8:	2300      	movs	r3, #0
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093e0:	68f8      	ldr	r0, [r7, #12]
 80093e2:	f000 fbfb 	bl	8009bdc <I2C_TransferConfig>
 80093e6:	e00f      	b.n	8009408 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	8979      	ldrh	r1, [r7, #10]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9300      	str	r3, [sp, #0]
 80093fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f000 fbea 	bl	8009bdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d19e      	bne.n	8009350 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 fabc 	bl	8009994 <I2C_WaitOnSTOPFlagUntilTimeout>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e01a      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2220      	movs	r2, #32
 800942c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b0a      	ldr	r3, [pc, #40]	; (8009464 <HAL_I2C_Mem_Write+0x224>)
 800943a:	400b      	ands	r3, r1
 800943c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	e000      	b.n	800945c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800945a:	2302      	movs	r3, #2
  }
}
 800945c:	4618      	mov	r0, r3
 800945e:	3718      	adds	r7, #24
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	fe00e800 	.word	0xfe00e800

08009468 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	4608      	mov	r0, r1
 8009472:	4611      	mov	r1, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4603      	mov	r3, r0
 8009478:	817b      	strh	r3, [r7, #10]
 800947a:	460b      	mov	r3, r1
 800947c:	813b      	strh	r3, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b20      	cmp	r3, #32
 800948c:	f040 80fd 	bne.w	800968a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d002      	beq.n	800949c <HAL_I2C_Mem_Read+0x34>
 8009496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d105      	bne.n	80094a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e0f1      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_I2C_Mem_Read+0x4e>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e0ea      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094be:	f7fa ff83 	bl	80043c8 <HAL_GetTick>
 80094c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	9300      	str	r3, [sp, #0]
 80094c8:	2319      	movs	r3, #25
 80094ca:	2201      	movs	r2, #1
 80094cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f9c9 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0d5      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2222      	movs	r2, #34	; 0x22
 80094e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2240      	movs	r2, #64	; 0x40
 80094ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a3a      	ldr	r2, [r7, #32]
 80094fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009500:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009508:	88f8      	ldrh	r0, [r7, #6]
 800950a:	893a      	ldrh	r2, [r7, #8]
 800950c:	8979      	ldrh	r1, [r7, #10]
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	9301      	str	r3, [sp, #4]
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	4603      	mov	r3, r0
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f000 f92d 	bl	8009778 <I2C_RequestMemoryRead>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e0ad      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009534:	b29b      	uxth	r3, r3
 8009536:	2bff      	cmp	r3, #255	; 0xff
 8009538:	d90e      	bls.n	8009558 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	22ff      	movs	r2, #255	; 0xff
 800953e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009544:	b2da      	uxtb	r2, r3
 8009546:	8979      	ldrh	r1, [r7, #10]
 8009548:	4b52      	ldr	r3, [pc, #328]	; (8009694 <HAL_I2C_Mem_Read+0x22c>)
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fb43 	bl	8009bdc <I2C_TransferConfig>
 8009556:	e00f      	b.n	8009578 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009566:	b2da      	uxtb	r2, r3
 8009568:	8979      	ldrh	r1, [r7, #10]
 800956a:	4b4a      	ldr	r3, [pc, #296]	; (8009694 <HAL_I2C_Mem_Read+0x22c>)
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fb32 	bl	8009bdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	2200      	movs	r2, #0
 8009580:	2104      	movs	r1, #4
 8009582:	68f8      	ldr	r0, [r7, #12]
 8009584:	f000 f970 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 8009588:	4603      	mov	r3, r0
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e07c      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	b2d2      	uxtb	r2, r2
 800959e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ae:	3b01      	subs	r3, #1
 80095b0:	b29a      	uxth	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	3b01      	subs	r3, #1
 80095be:	b29a      	uxth	r2, r3
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d034      	beq.n	8009638 <HAL_I2C_Mem_Read+0x1d0>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d130      	bne.n	8009638 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095dc:	2200      	movs	r2, #0
 80095de:	2180      	movs	r1, #128	; 0x80
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f941 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	e04d      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	2bff      	cmp	r3, #255	; 0xff
 80095f8:	d90e      	bls.n	8009618 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	22ff      	movs	r2, #255	; 0xff
 80095fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009604:	b2da      	uxtb	r2, r3
 8009606:	8979      	ldrh	r1, [r7, #10]
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 fae3 	bl	8009bdc <I2C_TransferConfig>
 8009616:	e00f      	b.n	8009638 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	b2da      	uxtb	r2, r3
 8009628:	8979      	ldrh	r1, [r7, #10]
 800962a:	2300      	movs	r3, #0
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 fad2 	bl	8009bdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963c:	b29b      	uxth	r3, r3
 800963e:	2b00      	cmp	r3, #0
 8009640:	d19a      	bne.n	8009578 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f9a4 	bl	8009994 <I2C_WaitOnSTOPFlagUntilTimeout>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e01a      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2220      	movs	r2, #32
 800965c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6859      	ldr	r1, [r3, #4]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	4b0b      	ldr	r3, [pc, #44]	; (8009698 <HAL_I2C_Mem_Read+0x230>)
 800966a:	400b      	ands	r3, r1
 800966c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2200      	movs	r2, #0
 8009682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	e000      	b.n	800968c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800968a:	2302      	movs	r3, #2
  }
}
 800968c:	4618      	mov	r0, r3
 800968e:	3718      	adds	r7, #24
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	80002400 	.word	0x80002400
 8009698:	fe00e800 	.word	0xfe00e800

0800969c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80096aa:	b2db      	uxtb	r3, r3
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	4608      	mov	r0, r1
 80096da:	4611      	mov	r1, r2
 80096dc:	461a      	mov	r2, r3
 80096de:	4603      	mov	r3, r0
 80096e0:	817b      	strh	r3, [r7, #10]
 80096e2:	460b      	mov	r3, r1
 80096e4:	813b      	strh	r3, [r7, #8]
 80096e6:	4613      	mov	r3, r2
 80096e8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	8979      	ldrh	r1, [r7, #10]
 80096f0:	4b20      	ldr	r3, [pc, #128]	; (8009774 <I2C_RequestMemoryWrite+0xa4>)
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096f8:	68f8      	ldr	r0, [r7, #12]
 80096fa:	f000 fa6f 	bl	8009bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096fe:	69fa      	ldr	r2, [r7, #28]
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 f8ff 	bl	8009906 <I2C_WaitOnTXISFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d001      	beq.n	8009712 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e02c      	b.n	800976c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009712:	88fb      	ldrh	r3, [r7, #6]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d105      	bne.n	8009724 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009718:	893b      	ldrh	r3, [r7, #8]
 800971a:	b2da      	uxtb	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	629a      	str	r2, [r3, #40]	; 0x28
 8009722:	e015      	b.n	8009750 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009724:	893b      	ldrh	r3, [r7, #8]
 8009726:	0a1b      	lsrs	r3, r3, #8
 8009728:	b29b      	uxth	r3, r3
 800972a:	b2da      	uxtb	r2, r3
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	69b9      	ldr	r1, [r7, #24]
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f000 f8e5 	bl	8009906 <I2C_WaitOnTXISFlagUntilTimeout>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e012      	b.n	800976c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009746:	893b      	ldrh	r3, [r7, #8]
 8009748:	b2da      	uxtb	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	69bb      	ldr	r3, [r7, #24]
 8009756:	2200      	movs	r2, #0
 8009758:	2180      	movs	r1, #128	; 0x80
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 f884 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d001      	beq.n	800976a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
 8009768:	e000      	b.n	800976c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	80002000 	.word	0x80002000

08009778 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	4608      	mov	r0, r1
 8009782:	4611      	mov	r1, r2
 8009784:	461a      	mov	r2, r3
 8009786:	4603      	mov	r3, r0
 8009788:	817b      	strh	r3, [r7, #10]
 800978a:	460b      	mov	r3, r1
 800978c:	813b      	strh	r3, [r7, #8]
 800978e:	4613      	mov	r3, r2
 8009790:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	b2da      	uxtb	r2, r3
 8009796:	8979      	ldrh	r1, [r7, #10]
 8009798:	4b20      	ldr	r3, [pc, #128]	; (800981c <I2C_RequestMemoryRead+0xa4>)
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	2300      	movs	r3, #0
 800979e:	68f8      	ldr	r0, [r7, #12]
 80097a0:	f000 fa1c 	bl	8009bdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	69b9      	ldr	r1, [r7, #24]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f8ac 	bl	8009906 <I2C_WaitOnTXISFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e02c      	b.n	8009812 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d105      	bne.n	80097ca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097be:	893b      	ldrh	r3, [r7, #8]
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	629a      	str	r2, [r3, #40]	; 0x28
 80097c8:	e015      	b.n	80097f6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097ca:	893b      	ldrh	r3, [r7, #8]
 80097cc:	0a1b      	lsrs	r3, r3, #8
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	69b9      	ldr	r1, [r7, #24]
 80097dc:	68f8      	ldr	r0, [r7, #12]
 80097de:	f000 f892 	bl	8009906 <I2C_WaitOnTXISFlagUntilTimeout>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80097e8:	2301      	movs	r3, #1
 80097ea:	e012      	b.n	8009812 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097ec:	893b      	ldrh	r3, [r7, #8]
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2200      	movs	r2, #0
 80097fe:	2140      	movs	r1, #64	; 0x40
 8009800:	68f8      	ldr	r0, [r7, #12]
 8009802:	f000 f831 	bl	8009868 <I2C_WaitOnFlagUntilTimeout>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	e000      	b.n	8009812 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	80002000 	.word	0x80002000

08009820 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b02      	cmp	r3, #2
 8009834:	d103      	bne.n	800983e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2200      	movs	r2, #0
 800983c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	d007      	beq.n	800985c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	699a      	ldr	r2, [r3, #24]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f042 0201 	orr.w	r2, r2, #1
 800985a:	619a      	str	r2, [r3, #24]
  }
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	4613      	mov	r3, r2
 8009876:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009878:	e031      	b.n	80098de <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009880:	d02d      	beq.n	80098de <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009882:	f7fa fda1 	bl	80043c8 <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	429a      	cmp	r2, r3
 8009890:	d302      	bcc.n	8009898 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d122      	bne.n	80098de <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	699a      	ldr	r2, [r3, #24]
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	4013      	ands	r3, r2
 80098a2:	68ba      	ldr	r2, [r7, #8]
 80098a4:	429a      	cmp	r2, r3
 80098a6:	bf0c      	ite	eq
 80098a8:	2301      	moveq	r3, #1
 80098aa:	2300      	movne	r3, #0
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	461a      	mov	r2, r3
 80098b0:	79fb      	ldrb	r3, [r7, #7]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d113      	bne.n	80098de <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ba:	f043 0220 	orr.w	r2, r3, #32
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e00f      	b.n	80098fe <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	699a      	ldr	r2, [r3, #24]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	4013      	ands	r3, r2
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	bf0c      	ite	eq
 80098ee:	2301      	moveq	r3, #1
 80098f0:	2300      	movne	r3, #0
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	461a      	mov	r2, r3
 80098f6:	79fb      	ldrb	r3, [r7, #7]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d0be      	beq.n	800987a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	60f8      	str	r0, [r7, #12]
 800990e:	60b9      	str	r1, [r7, #8]
 8009910:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009912:	e033      	b.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	68f8      	ldr	r0, [r7, #12]
 800991a:	f000 f87f 	bl	8009a1c <I2C_IsErrorOccurred>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009924:	2301      	movs	r3, #1
 8009926:	e031      	b.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992e:	d025      	beq.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009930:	f7fa fd4a 	bl	80043c8 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	429a      	cmp	r2, r3
 800993e:	d302      	bcc.n	8009946 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d11a      	bne.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	699b      	ldr	r3, [r3, #24]
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b02      	cmp	r3, #2
 8009952:	d013      	beq.n	800997c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009958:	f043 0220 	orr.w	r2, r3, #32
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2220      	movs	r2, #32
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e007      	b.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f003 0302 	and.w	r3, r3, #2
 8009986:	2b02      	cmp	r3, #2
 8009988:	d1c4      	bne.n	8009914 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099a0:	e02f      	b.n	8009a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	68b9      	ldr	r1, [r7, #8]
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 f838 	bl	8009a1c <I2C_IsErrorOccurred>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e02d      	b.n	8009a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099b6:	f7fa fd07 	bl	80043c8 <HAL_GetTick>
 80099ba:	4602      	mov	r2, r0
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	1ad3      	subs	r3, r2, r3
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d302      	bcc.n	80099cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d11a      	bne.n	8009a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	699b      	ldr	r3, [r3, #24]
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b20      	cmp	r3, #32
 80099d8:	d013      	beq.n	8009a02 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099de:	f043 0220 	orr.w	r2, r3, #32
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2220      	movs	r2, #32
 80099ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2200      	movs	r2, #0
 80099fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e007      	b.n	8009a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f003 0320 	and.w	r3, r3, #32
 8009a0c:	2b20      	cmp	r3, #32
 8009a0e:	d1c8      	bne.n	80099a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
	...

08009a1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b08a      	sub	sp, #40	; 0x28
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a3e:	69bb      	ldr	r3, [r7, #24]
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d068      	beq.n	8009b1a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2210      	movs	r2, #16
 8009a4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a50:	e049      	b.n	8009ae6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a58:	d045      	beq.n	8009ae6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a5a:	f7fa fcb5 	bl	80043c8 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	69fb      	ldr	r3, [r7, #28]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	68ba      	ldr	r2, [r7, #8]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <I2C_IsErrorOccurred+0x54>
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d13a      	bne.n	8009ae6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a92:	d121      	bne.n	8009ad8 <I2C_IsErrorOccurred+0xbc>
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a9a:	d01d      	beq.n	8009ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009a9c:	7cfb      	ldrb	r3, [r7, #19]
 8009a9e:	2b20      	cmp	r3, #32
 8009aa0:	d01a      	beq.n	8009ad8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ab0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ab2:	f7fa fc89 	bl	80043c8 <HAL_GetTick>
 8009ab6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ab8:	e00e      	b.n	8009ad8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009aba:	f7fa fc85 	bl	80043c8 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b19      	cmp	r3, #25
 8009ac6:	d907      	bls.n	8009ad8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ac8:	6a3b      	ldr	r3, [r7, #32]
 8009aca:	f043 0320 	orr.w	r3, r3, #32
 8009ace:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009ad6:	e006      	b.n	8009ae6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	f003 0320 	and.w	r3, r3, #32
 8009ae2:	2b20      	cmp	r3, #32
 8009ae4:	d1e9      	bne.n	8009aba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b20      	cmp	r3, #32
 8009af2:	d003      	beq.n	8009afc <I2C_IsErrorOccurred+0xe0>
 8009af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0aa      	beq.n	8009a52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2220      	movs	r2, #32
 8009b0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	f043 0304 	orr.w	r3, r3, #4
 8009b12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b22:	69bb      	ldr	r3, [r7, #24]
 8009b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d00b      	beq.n	8009b44 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	f043 0301 	orr.w	r3, r3, #1
 8009b32:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b3c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	f043 0308 	orr.w	r3, r3, #8
 8009b54:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b70:	6a3b      	ldr	r3, [r7, #32]
 8009b72:	f043 0302 	orr.w	r3, r3, #2
 8009b76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d01c      	beq.n	8009bca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f7ff fe45 	bl	8009820 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6859      	ldr	r1, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <I2C_IsErrorOccurred+0x1bc>)
 8009ba2:	400b      	ands	r3, r1
 8009ba4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	431a      	orrs	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009bca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	; 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	fe00e800 	.word	0xfe00e800

08009bdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	817b      	strh	r3, [r7, #10]
 8009bea:	4613      	mov	r3, r2
 8009bec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bee:	897b      	ldrh	r3, [r7, #10]
 8009bf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bf4:	7a7b      	ldrb	r3, [r7, #9]
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c02:	6a3b      	ldr	r3, [r7, #32]
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	0d5b      	lsrs	r3, r3, #21
 8009c16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009c1a:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <I2C_TransferConfig+0x60>)
 8009c1c:	430b      	orrs	r3, r1
 8009c1e:	43db      	mvns	r3, r3
 8009c20:	ea02 0103 	and.w	r1, r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c2e:	bf00      	nop
 8009c30:	371c      	adds	r7, #28
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	03ff63ff 	.word	0x03ff63ff

08009c40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b20      	cmp	r3, #32
 8009c54:	d138      	bne.n	8009cc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d101      	bne.n	8009c64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c60:	2302      	movs	r3, #2
 8009c62:	e032      	b.n	8009cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2201      	movs	r2, #1
 8009c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2224      	movs	r2, #36	; 0x24
 8009c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	681a      	ldr	r2, [r3, #0]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0201 	bic.w	r2, r2, #1
 8009c82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009c92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6819      	ldr	r1, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	683a      	ldr	r2, [r7, #0]
 8009ca0:	430a      	orrs	r2, r1
 8009ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2220      	movs	r2, #32
 8009cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	e000      	b.n	8009cca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cc8:	2302      	movs	r3, #2
  }
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	370c      	adds	r7, #12
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
 8009cde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d139      	bne.n	8009d60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d101      	bne.n	8009cfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009cf6:	2302      	movs	r3, #2
 8009cf8:	e033      	b.n	8009d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2224      	movs	r2, #36	; 0x24
 8009d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	681a      	ldr	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f022 0201 	bic.w	r2, r2, #1
 8009d18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009d28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	021b      	lsls	r3, r3, #8
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f042 0201 	orr.w	r2, r2, #1
 8009d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e000      	b.n	8009d62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d60:	2302      	movs	r3, #2
  }
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
	...

08009d70 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d101      	bne.n	8009d82 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e0bf      	b.n	8009f02 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7f7 fa78 	bl	800128c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2202      	movs	r2, #2
 8009da0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	699a      	ldr	r2, [r3, #24]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8009db2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	6999      	ldr	r1, [r3, #24]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	689b      	ldr	r3, [r3, #8]
 8009dc2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009dc8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6899      	ldr	r1, [r3, #8]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	4b4a      	ldr	r3, [pc, #296]	; (8009f0c <HAL_LTDC_Init+0x19c>)
 8009de4:	400b      	ands	r3, r1
 8009de6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	041b      	lsls	r3, r3, #16
 8009dee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6899      	ldr	r1, [r3, #8]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	430a      	orrs	r2, r1
 8009e04:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68d9      	ldr	r1, [r3, #12]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	4b3e      	ldr	r3, [pc, #248]	; (8009f0c <HAL_LTDC_Init+0x19c>)
 8009e12:	400b      	ands	r3, r1
 8009e14:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	69db      	ldr	r3, [r3, #28]
 8009e1a:	041b      	lsls	r3, r3, #16
 8009e1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68d9      	ldr	r1, [r3, #12]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a1a      	ldr	r2, [r3, #32]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	431a      	orrs	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	430a      	orrs	r2, r1
 8009e32:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	6919      	ldr	r1, [r3, #16]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	4b33      	ldr	r3, [pc, #204]	; (8009f0c <HAL_LTDC_Init+0x19c>)
 8009e40:	400b      	ands	r3, r1
 8009e42:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e48:	041b      	lsls	r3, r3, #16
 8009e4a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6919      	ldr	r1, [r3, #16]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	431a      	orrs	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6959      	ldr	r1, [r3, #20]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	4b27      	ldr	r3, [pc, #156]	; (8009f0c <HAL_LTDC_Init+0x19c>)
 8009e6e:	400b      	ands	r3, r1
 8009e70:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	041b      	lsls	r3, r3, #16
 8009e78:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6959      	ldr	r1, [r3, #20]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009ea0:	041b      	lsls	r3, r3, #16
 8009ea2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8009eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	430a      	orrs	r2, r1
 8009ece:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f042 0206 	orr.w	r2, r2, #6
 8009ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699a      	ldr	r2, [r3, #24]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f042 0201 	orr.w	r2, r2, #1
 8009eee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	f000f800 	.word	0xf000f800

08009f10 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f26:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f003 0304 	and.w	r3, r3, #4
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d023      	beq.n	8009f7a <HAL_LTDC_IRQHandler+0x6a>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d01e      	beq.n	8009f7a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f022 0204 	bic.w	r2, r2, #4
 8009f4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2204      	movs	r2, #4
 8009f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f5a:	f043 0201 	orr.w	r2, r3, #1
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2204      	movs	r2, #4
 8009f68:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f86f 	bl	800a058 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d023      	beq.n	8009fcc <HAL_LTDC_IRQHandler+0xbc>
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	f003 0302 	and.w	r3, r3, #2
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d01e      	beq.n	8009fcc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f022 0202 	bic.w	r2, r2, #2
 8009f9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009fac:	f043 0202 	orr.w	r2, r3, #2
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2204      	movs	r2, #4
 8009fba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f846 	bl	800a058 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d01b      	beq.n	800a00e <HAL_LTDC_IRQHandler+0xfe>
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d016      	beq.n	800a00e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f022 0201 	bic.w	r2, r2, #1
 8009fee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f82f 	bl	800a06c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f003 0308 	and.w	r3, r3, #8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01b      	beq.n	800a050 <HAL_LTDC_IRQHandler+0x140>
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	f003 0308 	and.w	r3, r3, #8
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d016      	beq.n	800a050 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0208 	bic.w	r2, r2, #8
 800a030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2208      	movs	r2, #8
 800a038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f818 	bl	800a080 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800a050:	bf00      	nop
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800a088:	bf00      	nop
 800a08a:	370c      	adds	r7, #12
 800a08c:	46bd      	mov	sp, r7
 800a08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a092:	4770      	bx	lr

0800a094 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a094:	b5b0      	push	{r4, r5, r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_LTDC_ConfigLayer+0x1a>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e02c      	b.n	800a108 <HAL_LTDC_ConfigLayer+0x74>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a0be:	68fa      	ldr	r2, [r7, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2134      	movs	r1, #52	; 0x34
 800a0c4:	fb01 f303 	mul.w	r3, r1, r3
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	4614      	mov	r4, r2
 800a0d2:	461d      	mov	r5, r3
 800a0d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a0de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	68b9      	ldr	r1, [r7, #8]
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f000 f811 	bl	800a110 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2200      	movs	r2, #0
 800a102:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800a106:	2300      	movs	r3, #0
}
 800a108:	4618      	mov	r0, r3
 800a10a:	3710      	adds	r7, #16
 800a10c:	46bd      	mov	sp, r7
 800a10e:	bdb0      	pop	{r4, r5, r7, pc}

0800a110 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800a110:	b480      	push	{r7}
 800a112:	b089      	sub	sp, #36	; 0x24
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	0c1b      	lsrs	r3, r3, #16
 800a128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a12c:	4413      	add	r3, r2
 800a12e:	041b      	lsls	r3, r3, #16
 800a130:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	01db      	lsls	r3, r3, #7
 800a13c:	4413      	add	r3, r2
 800a13e:	3384      	adds	r3, #132	; 0x84
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	68fa      	ldr	r2, [r7, #12]
 800a144:	6812      	ldr	r2, [r2, #0]
 800a146:	4611      	mov	r1, r2
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	01d2      	lsls	r2, r2, #7
 800a14c:	440a      	add	r2, r1
 800a14e:	3284      	adds	r2, #132	; 0x84
 800a150:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a154:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	0c1b      	lsrs	r3, r3, #16
 800a162:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a166:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a168:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4619      	mov	r1, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	01db      	lsls	r3, r3, #7
 800a174:	440b      	add	r3, r1
 800a176:	3384      	adds	r3, #132	; 0x84
 800a178:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a17e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a18e:	4413      	add	r3, r2
 800a190:	041b      	lsls	r3, r3, #16
 800a192:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	461a      	mov	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	01db      	lsls	r3, r3, #7
 800a19e:	4413      	add	r3, r2
 800a1a0:	3384      	adds	r3, #132	; 0x84
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	6812      	ldr	r2, [r2, #0]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	01d2      	lsls	r2, r2, #7
 800a1ae:	440a      	add	r2, r1
 800a1b0:	3284      	adds	r2, #132	; 0x84
 800a1b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800a1b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	689a      	ldr	r2, [r3, #8]
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1c6:	4413      	add	r3, r2
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	01db      	lsls	r3, r3, #7
 800a1d4:	440b      	add	r3, r1
 800a1d6:	3384      	adds	r3, #132	; 0x84
 800a1d8:	4619      	mov	r1, r3
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	01db      	lsls	r3, r3, #7
 800a1ea:	4413      	add	r3, r2
 800a1ec:	3384      	adds	r3, #132	; 0x84
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	6812      	ldr	r2, [r2, #0]
 800a1f4:	4611      	mov	r1, r2
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	01d2      	lsls	r2, r2, #7
 800a1fa:	440a      	add	r2, r1
 800a1fc:	3284      	adds	r2, #132	; 0x84
 800a1fe:	f023 0307 	bic.w	r3, r3, #7
 800a202:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	01db      	lsls	r3, r3, #7
 800a20e:	4413      	add	r3, r2
 800a210:	3384      	adds	r3, #132	; 0x84
 800a212:	461a      	mov	r2, r3
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a220:	021b      	lsls	r3, r3, #8
 800a222:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800a22a:	041b      	lsls	r3, r3, #16
 800a22c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	061b      	lsls	r3, r3, #24
 800a234:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	01db      	lsls	r3, r3, #7
 800a240:	4413      	add	r3, r2
 800a242:	3384      	adds	r3, #132	; 0x84
 800a244:	699b      	ldr	r3, [r3, #24]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	01db      	lsls	r3, r3, #7
 800a250:	4413      	add	r3, r2
 800a252:	3384      	adds	r3, #132	; 0x84
 800a254:	461a      	mov	r2, r3
 800a256:	2300      	movs	r3, #0
 800a258:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a260:	461a      	mov	r2, r3
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	431a      	orrs	r2, r3
 800a266:	69bb      	ldr	r3, [r7, #24]
 800a268:	431a      	orrs	r2, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4619      	mov	r1, r3
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	01db      	lsls	r3, r3, #7
 800a274:	440b      	add	r3, r1
 800a276:	3384      	adds	r3, #132	; 0x84
 800a278:	4619      	mov	r1, r3
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	4313      	orrs	r3, r2
 800a27e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	461a      	mov	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	01db      	lsls	r3, r3, #7
 800a28a:	4413      	add	r3, r2
 800a28c:	3384      	adds	r3, #132	; 0x84
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	6812      	ldr	r2, [r2, #0]
 800a294:	4611      	mov	r1, r2
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	01d2      	lsls	r2, r2, #7
 800a29a:	440a      	add	r2, r1
 800a29c:	3284      	adds	r2, #132	; 0x84
 800a29e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	01db      	lsls	r3, r3, #7
 800a2ae:	4413      	add	r3, r2
 800a2b0:	3384      	adds	r3, #132	; 0x84
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	695b      	ldr	r3, [r3, #20]
 800a2b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	01db      	lsls	r3, r3, #7
 800a2c4:	4413      	add	r3, r2
 800a2c6:	3384      	adds	r3, #132	; 0x84
 800a2c8:	69da      	ldr	r2, [r3, #28]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	01db      	lsls	r3, r3, #7
 800a2d4:	440b      	add	r3, r1
 800a2d6:	3384      	adds	r3, #132	; 0x84
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4b58      	ldr	r3, [pc, #352]	; (800a43c <LTDC_SetConfig+0x32c>)
 800a2dc:	4013      	ands	r3, r2
 800a2de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	69da      	ldr	r2, [r3, #28]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	6a1b      	ldr	r3, [r3, #32]
 800a2e8:	68f9      	ldr	r1, [r7, #12]
 800a2ea:	6809      	ldr	r1, [r1, #0]
 800a2ec:	4608      	mov	r0, r1
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	01c9      	lsls	r1, r1, #7
 800a2f2:	4401      	add	r1, r0
 800a2f4:	3184      	adds	r1, #132	; 0x84
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	461a      	mov	r2, r3
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	01db      	lsls	r3, r3, #7
 800a304:	4413      	add	r3, r2
 800a306:	3384      	adds	r3, #132	; 0x84
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	461a      	mov	r2, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	01db      	lsls	r3, r3, #7
 800a314:	4413      	add	r3, r2
 800a316:	3384      	adds	r3, #132	; 0x84
 800a318:	461a      	mov	r2, r3
 800a31a:	2300      	movs	r3, #0
 800a31c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	461a      	mov	r2, r3
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	01db      	lsls	r3, r3, #7
 800a328:	4413      	add	r3, r2
 800a32a:	3384      	adds	r3, #132	; 0x84
 800a32c:	461a      	mov	r2, r3
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d102      	bne.n	800a342 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800a33c:	2304      	movs	r3, #4
 800a33e:	61fb      	str	r3, [r7, #28]
 800a340:	e01b      	b.n	800a37a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d102      	bne.n	800a350 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800a34a:	2303      	movs	r3, #3
 800a34c:	61fb      	str	r3, [r7, #28]
 800a34e:	e014      	b.n	800a37a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	2b04      	cmp	r3, #4
 800a356:	d00b      	beq.n	800a370 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d007      	beq.n	800a370 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800a364:	2b03      	cmp	r3, #3
 800a366:	d003      	beq.n	800a370 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800a36c:	2b07      	cmp	r3, #7
 800a36e:	d102      	bne.n	800a376 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800a370:	2302      	movs	r3, #2
 800a372:	61fb      	str	r3, [r7, #28]
 800a374:	e001      	b.n	800a37a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800a376:	2301      	movs	r3, #1
 800a378:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	461a      	mov	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	01db      	lsls	r3, r3, #7
 800a384:	4413      	add	r3, r2
 800a386:	3384      	adds	r3, #132	; 0x84
 800a388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	6812      	ldr	r2, [r2, #0]
 800a38e:	4611      	mov	r1, r2
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	01d2      	lsls	r2, r2, #7
 800a394:	440a      	add	r2, r1
 800a396:	3284      	adds	r2, #132	; 0x84
 800a398:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800a39c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	69fa      	ldr	r2, [r7, #28]
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	041a      	lsls	r2, r3, #16
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	6859      	ldr	r1, [r3, #4]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	1acb      	subs	r3, r1, r3
 800a3b4:	69f9      	ldr	r1, [r7, #28]
 800a3b6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	6809      	ldr	r1, [r1, #0]
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	6879      	ldr	r1, [r7, #4]
 800a3c4:	01c9      	lsls	r1, r1, #7
 800a3c6:	4401      	add	r1, r0
 800a3c8:	3184      	adds	r1, #132	; 0x84
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	01db      	lsls	r3, r3, #7
 800a3d8:	4413      	add	r3, r2
 800a3da:	3384      	adds	r3, #132	; 0x84
 800a3dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	01db      	lsls	r3, r3, #7
 800a3e8:	440b      	add	r3, r1
 800a3ea:	3384      	adds	r3, #132	; 0x84
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	4b14      	ldr	r3, [pc, #80]	; (800a440 <LTDC_SetConfig+0x330>)
 800a3f0:	4013      	ands	r3, r2
 800a3f2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	461a      	mov	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	01db      	lsls	r3, r3, #7
 800a3fe:	4413      	add	r3, r2
 800a400:	3384      	adds	r3, #132	; 0x84
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a408:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	461a      	mov	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	01db      	lsls	r3, r3, #7
 800a414:	4413      	add	r3, r2
 800a416:	3384      	adds	r3, #132	; 0x84
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	6812      	ldr	r2, [r2, #0]
 800a41e:	4611      	mov	r1, r2
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	01d2      	lsls	r2, r2, #7
 800a424:	440a      	add	r2, r1
 800a426:	3284      	adds	r2, #132	; 0x84
 800a428:	f043 0301 	orr.w	r3, r3, #1
 800a42c:	6013      	str	r3, [r2, #0]
}
 800a42e:	bf00      	nop
 800a430:	3724      	adds	r7, #36	; 0x24
 800a432:	46bd      	mov	sp, r7
 800a434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a438:	4770      	bx	lr
 800a43a:	bf00      	nop
 800a43c:	fffff8f8 	.word	0xfffff8f8
 800a440:	fffff800 	.word	0xfffff800

0800a444 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800a444:	b480      	push	{r7}
 800a446:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 800a448:	4b05      	ldr	r3, [pc, #20]	; (800a460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a04      	ldr	r2, [pc, #16]	; (800a460 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a44e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a452:	6013      	str	r3, [r2, #0]
}
 800a454:	bf00      	nop
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
 800a45e:	bf00      	nop
 800a460:	58024800 	.word	0x58024800

0800a464 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a46c:	4b29      	ldr	r3, [pc, #164]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f003 0307 	and.w	r3, r3, #7
 800a474:	2b06      	cmp	r3, #6
 800a476:	d00a      	beq.n	800a48e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a478:	4b26      	ldr	r3, [pc, #152]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	429a      	cmp	r2, r3
 800a484:	d001      	beq.n	800a48a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e040      	b.n	800a50c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	e03e      	b.n	800a50c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a48e:	4b21      	ldr	r3, [pc, #132]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800a496:	491f      	ldr	r1, [pc, #124]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a49e:	f7f9 ff93 	bl	80043c8 <HAL_GetTick>
 800a4a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a4a4:	e009      	b.n	800a4ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a4a6:	f7f9 ff8f 	bl	80043c8 <HAL_GetTick>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4b4:	d901      	bls.n	800a4ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	e028      	b.n	800a50c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a4ba:	4b16      	ldr	r3, [pc, #88]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4c6:	d1ee      	bne.n	800a4a6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b1e      	cmp	r3, #30
 800a4cc:	d008      	beq.n	800a4e0 <HAL_PWREx_ConfigSupply+0x7c>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d2:	d005      	beq.n	800a4e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b1d      	cmp	r3, #29
 800a4d8:	d002      	beq.n	800a4e0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b2d      	cmp	r3, #45	; 0x2d
 800a4de:	d114      	bne.n	800a50a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800a4e0:	f7f9 ff72 	bl	80043c8 <HAL_GetTick>
 800a4e4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a4e6:	e009      	b.n	800a4fc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a4e8:	f7f9 ff6e 	bl	80043c8 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4f6:	d901      	bls.n	800a4fc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	e007      	b.n	800a50c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a4fc:	4b05      	ldr	r3, [pc, #20]	; (800a514 <HAL_PWREx_ConfigSupply+0xb0>)
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a508:	d1ee      	bne.n	800a4e8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3710      	adds	r7, #16
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	58024800 	.word	0x58024800

0800a518 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08c      	sub	sp, #48	; 0x30
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a526:	2301      	movs	r3, #1
 800a528:	f000 bc1f 	b.w	800ad6a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 80b3 	beq.w	800a6a0 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a53a:	4b95      	ldr	r3, [pc, #596]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a544:	4b92      	ldr	r3, [pc, #584]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a548:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	2b10      	cmp	r3, #16
 800a54e:	d007      	beq.n	800a560 <HAL_RCC_OscConfig+0x48>
 800a550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a552:	2b18      	cmp	r3, #24
 800a554:	d112      	bne.n	800a57c <HAL_RCC_OscConfig+0x64>
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	2b02      	cmp	r3, #2
 800a55e:	d10d      	bne.n	800a57c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a560:	4b8b      	ldr	r3, [pc, #556]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f000 8098 	beq.w	800a69e <HAL_RCC_OscConfig+0x186>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 8093 	bne.w	800a69e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e3f6      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a584:	d106      	bne.n	800a594 <HAL_RCC_OscConfig+0x7c>
 800a586:	4b82      	ldr	r3, [pc, #520]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a81      	ldr	r2, [pc, #516]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a58c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a590:	6013      	str	r3, [r2, #0]
 800a592:	e058      	b.n	800a646 <HAL_RCC_OscConfig+0x12e>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	685b      	ldr	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d112      	bne.n	800a5c2 <HAL_RCC_OscConfig+0xaa>
 800a59c:	4b7c      	ldr	r3, [pc, #496]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a7b      	ldr	r2, [pc, #492]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5a6:	6013      	str	r3, [r2, #0]
 800a5a8:	4b79      	ldr	r3, [pc, #484]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a78      	ldr	r2, [pc, #480]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	4b76      	ldr	r3, [pc, #472]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a75      	ldr	r2, [pc, #468]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	e041      	b.n	800a646 <HAL_RCC_OscConfig+0x12e>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5ca:	d112      	bne.n	800a5f2 <HAL_RCC_OscConfig+0xda>
 800a5cc:	4b70      	ldr	r3, [pc, #448]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a6f      	ldr	r2, [pc, #444]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	4b6d      	ldr	r3, [pc, #436]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a6c      	ldr	r2, [pc, #432]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a5e2:	6013      	str	r3, [r2, #0]
 800a5e4:	4b6a      	ldr	r3, [pc, #424]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a69      	ldr	r2, [pc, #420]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	e029      	b.n	800a646 <HAL_RCC_OscConfig+0x12e>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800a5fa:	d112      	bne.n	800a622 <HAL_RCC_OscConfig+0x10a>
 800a5fc:	4b64      	ldr	r3, [pc, #400]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a63      	ldr	r2, [pc, #396]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a602:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a606:	6013      	str	r3, [r2, #0]
 800a608:	4b61      	ldr	r3, [pc, #388]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a60      	ldr	r2, [pc, #384]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a60e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a612:	6013      	str	r3, [r2, #0]
 800a614:	4b5e      	ldr	r3, [pc, #376]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a5d      	ldr	r2, [pc, #372]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a61a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	e011      	b.n	800a646 <HAL_RCC_OscConfig+0x12e>
 800a622:	4b5b      	ldr	r3, [pc, #364]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a5a      	ldr	r2, [pc, #360]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	4b58      	ldr	r3, [pc, #352]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a57      	ldr	r2, [pc, #348]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4b55      	ldr	r3, [pc, #340]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a54      	ldr	r2, [pc, #336]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a640:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a644:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d013      	beq.n	800a676 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64e:	f7f9 febb 	bl	80043c8 <HAL_GetTick>
 800a652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a654:	e008      	b.n	800a668 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a656:	f7f9 feb7 	bl	80043c8 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	2b64      	cmp	r3, #100	; 0x64
 800a662:	d901      	bls.n	800a668 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e380      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a668:	4b49      	ldr	r3, [pc, #292]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d0f0      	beq.n	800a656 <HAL_RCC_OscConfig+0x13e>
 800a674:	e014      	b.n	800a6a0 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a676:	f7f9 fea7 	bl	80043c8 <HAL_GetTick>
 800a67a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a67c:	e008      	b.n	800a690 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a67e:	f7f9 fea3 	bl	80043c8 <HAL_GetTick>
 800a682:	4602      	mov	r2, r0
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	1ad3      	subs	r3, r2, r3
 800a688:	2b64      	cmp	r3, #100	; 0x64
 800a68a:	d901      	bls.n	800a690 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e36c      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a690:	4b3f      	ldr	r3, [pc, #252]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1f0      	bne.n	800a67e <HAL_RCC_OscConfig+0x166>
 800a69c:	e000      	b.n	800a6a0 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a69e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	f000 808c 	beq.w	800a7c6 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6ae:	4b38      	ldr	r3, [pc, #224]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a6b0:	691b      	ldr	r3, [r3, #16]
 800a6b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6b8:	4b35      	ldr	r3, [pc, #212]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a6ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6bc:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d007      	beq.n	800a6d4 <HAL_RCC_OscConfig+0x1bc>
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	2b18      	cmp	r3, #24
 800a6c8:	d137      	bne.n	800a73a <HAL_RCC_OscConfig+0x222>
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	f003 0303 	and.w	r3, r3, #3
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d132      	bne.n	800a73a <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6d4:	4b2e      	ldr	r3, [pc, #184]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d005      	beq.n	800a6ec <HAL_RCC_OscConfig+0x1d4>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d101      	bne.n	800a6ec <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	e33e      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a6ec:	4b28      	ldr	r3, [pc, #160]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f023 0219 	bic.w	r2, r3, #25
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	4925      	ldr	r1, [pc, #148]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6fe:	f7f9 fe63 	bl	80043c8 <HAL_GetTick>
 800a702:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a704:	e008      	b.n	800a718 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a706:	f7f9 fe5f 	bl	80043c8 <HAL_GetTick>
 800a70a:	4602      	mov	r2, r0
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	1ad3      	subs	r3, r2, r3
 800a710:	2b02      	cmp	r3, #2
 800a712:	d901      	bls.n	800a718 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a714:	2303      	movs	r3, #3
 800a716:	e328      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d0f0      	beq.n	800a706 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a724:	4b1a      	ldr	r3, [pc, #104]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	691b      	ldr	r3, [r3, #16]
 800a730:	061b      	lsls	r3, r3, #24
 800a732:	4917      	ldr	r1, [pc, #92]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a734:	4313      	orrs	r3, r2
 800a736:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a738:	e045      	b.n	800a7c6 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d028      	beq.n	800a794 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a742:	4b13      	ldr	r3, [pc, #76]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f023 0219 	bic.w	r2, r3, #25
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	4910      	ldr	r1, [pc, #64]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a750:	4313      	orrs	r3, r2
 800a752:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a754:	f7f9 fe38 	bl	80043c8 <HAL_GetTick>
 800a758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a75a:	e008      	b.n	800a76e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a75c:	f7f9 fe34 	bl	80043c8 <HAL_GetTick>
 800a760:	4602      	mov	r2, r0
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	1ad3      	subs	r3, r2, r3
 800a766:	2b02      	cmp	r3, #2
 800a768:	d901      	bls.n	800a76e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e2fd      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a76e:	4b08      	ldr	r3, [pc, #32]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0304 	and.w	r3, r3, #4
 800a776:	2b00      	cmp	r3, #0
 800a778:	d0f0      	beq.n	800a75c <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a77a:	4b05      	ldr	r3, [pc, #20]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	061b      	lsls	r3, r3, #24
 800a788:	4901      	ldr	r1, [pc, #4]	; (800a790 <HAL_RCC_OscConfig+0x278>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	604b      	str	r3, [r1, #4]
 800a78e:	e01a      	b.n	800a7c6 <HAL_RCC_OscConfig+0x2ae>
 800a790:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a794:	4b97      	ldr	r3, [pc, #604]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a96      	ldr	r2, [pc, #600]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a79a:	f023 0301 	bic.w	r3, r3, #1
 800a79e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a0:	f7f9 fe12 	bl	80043c8 <HAL_GetTick>
 800a7a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7a6:	e008      	b.n	800a7ba <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7a8:	f7f9 fe0e 	bl	80043c8 <HAL_GetTick>
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	1ad3      	subs	r3, r2, r3
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d901      	bls.n	800a7ba <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a7b6:	2303      	movs	r3, #3
 800a7b8:	e2d7      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7ba:	4b8e      	ldr	r3, [pc, #568]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d1f0      	bne.n	800a7a8 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0310 	and.w	r3, r3, #16
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d06a      	beq.n	800a8a8 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7d2:	4b88      	ldr	r3, [pc, #544]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a7d4:	691b      	ldr	r3, [r3, #16]
 800a7d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a7da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7dc:	4b85      	ldr	r3, [pc, #532]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	2b08      	cmp	r3, #8
 800a7e6:	d007      	beq.n	800a7f8 <HAL_RCC_OscConfig+0x2e0>
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	2b18      	cmp	r3, #24
 800a7ec:	d11b      	bne.n	800a826 <HAL_RCC_OscConfig+0x30e>
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d116      	bne.n	800a826 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a7f8:	4b7e      	ldr	r3, [pc, #504]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a800:	2b00      	cmp	r3, #0
 800a802:	d005      	beq.n	800a810 <HAL_RCC_OscConfig+0x2f8>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69db      	ldr	r3, [r3, #28]
 800a808:	2b80      	cmp	r3, #128	; 0x80
 800a80a:	d001      	beq.n	800a810 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e2ac      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a810:	4b78      	ldr	r3, [pc, #480]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6a1b      	ldr	r3, [r3, #32]
 800a81c:	061b      	lsls	r3, r3, #24
 800a81e:	4975      	ldr	r1, [pc, #468]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a820:	4313      	orrs	r3, r2
 800a822:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a824:	e040      	b.n	800a8a8 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	69db      	ldr	r3, [r3, #28]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d023      	beq.n	800a876 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a82e:	4b71      	ldr	r3, [pc, #452]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a70      	ldr	r2, [pc, #448]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a83a:	f7f9 fdc5 	bl	80043c8 <HAL_GetTick>
 800a83e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a840:	e008      	b.n	800a854 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a842:	f7f9 fdc1 	bl	80043c8 <HAL_GetTick>
 800a846:	4602      	mov	r2, r0
 800a848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a84a:	1ad3      	subs	r3, r2, r3
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d901      	bls.n	800a854 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a850:	2303      	movs	r3, #3
 800a852:	e28a      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a854:	4b67      	ldr	r3, [pc, #412]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0f0      	beq.n	800a842 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a860:	4b64      	ldr	r3, [pc, #400]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6a1b      	ldr	r3, [r3, #32]
 800a86c:	061b      	lsls	r3, r3, #24
 800a86e:	4961      	ldr	r1, [pc, #388]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a870:	4313      	orrs	r3, r2
 800a872:	60cb      	str	r3, [r1, #12]
 800a874:	e018      	b.n	800a8a8 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a876:	4b5f      	ldr	r3, [pc, #380]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a5e      	ldr	r2, [pc, #376]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a87c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a882:	f7f9 fda1 	bl	80043c8 <HAL_GetTick>
 800a886:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a888:	e008      	b.n	800a89c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a88a:	f7f9 fd9d 	bl	80043c8 <HAL_GetTick>
 800a88e:	4602      	mov	r2, r0
 800a890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a892:	1ad3      	subs	r3, r2, r3
 800a894:	2b02      	cmp	r3, #2
 800a896:	d901      	bls.n	800a89c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e266      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a89c:	4b55      	ldr	r3, [pc, #340]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1f0      	bne.n	800a88a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0308 	and.w	r3, r3, #8
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d036      	beq.n	800a922 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	695b      	ldr	r3, [r3, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d019      	beq.n	800a8f0 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8bc:	4b4d      	ldr	r3, [pc, #308]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a8be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c0:	4a4c      	ldr	r2, [pc, #304]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a8c2:	f043 0301 	orr.w	r3, r3, #1
 800a8c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8c8:	f7f9 fd7e 	bl	80043c8 <HAL_GetTick>
 800a8cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8ce:	e008      	b.n	800a8e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8d0:	f7f9 fd7a 	bl	80043c8 <HAL_GetTick>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	2b02      	cmp	r3, #2
 800a8dc:	d901      	bls.n	800a8e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e243      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8e2:	4b44      	ldr	r3, [pc, #272]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e6:	f003 0302 	and.w	r3, r3, #2
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d0f0      	beq.n	800a8d0 <HAL_RCC_OscConfig+0x3b8>
 800a8ee:	e018      	b.n	800a922 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8f0:	4b40      	ldr	r3, [pc, #256]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f4:	4a3f      	ldr	r2, [pc, #252]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a8f6:	f023 0301 	bic.w	r3, r3, #1
 800a8fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8fc:	f7f9 fd64 	bl	80043c8 <HAL_GetTick>
 800a900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a902:	e008      	b.n	800a916 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a904:	f7f9 fd60 	bl	80043c8 <HAL_GetTick>
 800a908:	4602      	mov	r2, r0
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d901      	bls.n	800a916 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e229      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a916:	4b37      	ldr	r3, [pc, #220]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91a:	f003 0302 	and.w	r3, r3, #2
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1f0      	bne.n	800a904 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f003 0320 	and.w	r3, r3, #32
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d036      	beq.n	800a99c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d019      	beq.n	800a96a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a936:	4b2f      	ldr	r3, [pc, #188]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a2e      	ldr	r2, [pc, #184]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a93c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a940:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a942:	f7f9 fd41 	bl	80043c8 <HAL_GetTick>
 800a946:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a948:	e008      	b.n	800a95c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a94a:	f7f9 fd3d 	bl	80043c8 <HAL_GetTick>
 800a94e:	4602      	mov	r2, r0
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b02      	cmp	r3, #2
 800a956:	d901      	bls.n	800a95c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e206      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a95c:	4b25      	ldr	r3, [pc, #148]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d0f0      	beq.n	800a94a <HAL_RCC_OscConfig+0x432>
 800a968:	e018      	b.n	800a99c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a96a:	4b22      	ldr	r3, [pc, #136]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a21      	ldr	r2, [pc, #132]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a970:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a976:	f7f9 fd27 	bl	80043c8 <HAL_GetTick>
 800a97a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a97e:	f7f9 fd23 	bl	80043c8 <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e1ec      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a990:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d1f0      	bne.n	800a97e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f003 0304 	and.w	r3, r3, #4
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 80af 	beq.w	800ab08 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a9aa:	4b13      	ldr	r3, [pc, #76]	; (800a9f8 <HAL_RCC_OscConfig+0x4e0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4a12      	ldr	r2, [pc, #72]	; (800a9f8 <HAL_RCC_OscConfig+0x4e0>)
 800a9b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9b6:	f7f9 fd07 	bl	80043c8 <HAL_GetTick>
 800a9ba:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9bc:	e008      	b.n	800a9d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9be:	f7f9 fd03 	bl	80043c8 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b64      	cmp	r3, #100	; 0x64
 800a9ca:	d901      	bls.n	800a9d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	e1cc      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9d0:	4b09      	ldr	r3, [pc, #36]	; (800a9f8 <HAL_RCC_OscConfig+0x4e0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d0f0      	beq.n	800a9be <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d10b      	bne.n	800a9fc <HAL_RCC_OscConfig+0x4e4>
 800a9e4:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a9e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9e8:	4a02      	ldr	r2, [pc, #8]	; (800a9f4 <HAL_RCC_OscConfig+0x4dc>)
 800a9ea:	f043 0301 	orr.w	r3, r3, #1
 800a9ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a9f0:	e05b      	b.n	800aaaa <HAL_RCC_OscConfig+0x592>
 800a9f2:	bf00      	nop
 800a9f4:	58024400 	.word	0x58024400
 800a9f8:	58024800 	.word	0x58024800
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d112      	bne.n	800aa2a <HAL_RCC_OscConfig+0x512>
 800aa04:	4b9d      	ldr	r3, [pc, #628]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa08:	4a9c      	ldr	r2, [pc, #624]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	6713      	str	r3, [r2, #112]	; 0x70
 800aa10:	4b9a      	ldr	r3, [pc, #616]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa14:	4a99      	ldr	r2, [pc, #612]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa1a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa1c:	4b97      	ldr	r3, [pc, #604]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa20:	4a96      	ldr	r2, [pc, #600]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa22:	f023 0304 	bic.w	r3, r3, #4
 800aa26:	6713      	str	r3, [r2, #112]	; 0x70
 800aa28:	e03f      	b.n	800aaaa <HAL_RCC_OscConfig+0x592>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2b05      	cmp	r3, #5
 800aa30:	d112      	bne.n	800aa58 <HAL_RCC_OscConfig+0x540>
 800aa32:	4b92      	ldr	r3, [pc, #584]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa36:	4a91      	ldr	r2, [pc, #580]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa38:	f043 0304 	orr.w	r3, r3, #4
 800aa3c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa3e:	4b8f      	ldr	r3, [pc, #572]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa42:	4a8e      	ldr	r2, [pc, #568]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa48:	6713      	str	r3, [r2, #112]	; 0x70
 800aa4a:	4b8c      	ldr	r3, [pc, #560]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa4e:	4a8b      	ldr	r2, [pc, #556]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	6713      	str	r3, [r2, #112]	; 0x70
 800aa56:	e028      	b.n	800aaaa <HAL_RCC_OscConfig+0x592>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	2b85      	cmp	r3, #133	; 0x85
 800aa5e:	d112      	bne.n	800aa86 <HAL_RCC_OscConfig+0x56e>
 800aa60:	4b86      	ldr	r3, [pc, #536]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa64:	4a85      	ldr	r2, [pc, #532]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa66:	f043 0304 	orr.w	r3, r3, #4
 800aa6a:	6713      	str	r3, [r2, #112]	; 0x70
 800aa6c:	4b83      	ldr	r3, [pc, #524]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa70:	4a82      	ldr	r2, [pc, #520]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa76:	6713      	str	r3, [r2, #112]	; 0x70
 800aa78:	4b80      	ldr	r3, [pc, #512]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa7c:	4a7f      	ldr	r2, [pc, #508]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	6713      	str	r3, [r2, #112]	; 0x70
 800aa84:	e011      	b.n	800aaaa <HAL_RCC_OscConfig+0x592>
 800aa86:	4b7d      	ldr	r3, [pc, #500]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa8a:	4a7c      	ldr	r2, [pc, #496]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa8c:	f023 0301 	bic.w	r3, r3, #1
 800aa90:	6713      	str	r3, [r2, #112]	; 0x70
 800aa92:	4b7a      	ldr	r3, [pc, #488]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa96:	4a79      	ldr	r2, [pc, #484]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aa98:	f023 0304 	bic.w	r3, r3, #4
 800aa9c:	6713      	str	r3, [r2, #112]	; 0x70
 800aa9e:	4b77      	ldr	r3, [pc, #476]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aaa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa2:	4a76      	ldr	r2, [pc, #472]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aaa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaa8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d015      	beq.n	800aade <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aab2:	f7f9 fc89 	bl	80043c8 <HAL_GetTick>
 800aab6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aab8:	e00a      	b.n	800aad0 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aaba:	f7f9 fc85 	bl	80043c8 <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e14c      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aad0:	4b6a      	ldr	r3, [pc, #424]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d0ee      	beq.n	800aaba <HAL_RCC_OscConfig+0x5a2>
 800aadc:	e014      	b.n	800ab08 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aade:	f7f9 fc73 	bl	80043c8 <HAL_GetTick>
 800aae2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aae4:	e00a      	b.n	800aafc <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aae6:	f7f9 fc6f 	bl	80043c8 <HAL_GetTick>
 800aaea:	4602      	mov	r2, r0
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	1ad3      	subs	r3, r2, r3
 800aaf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d901      	bls.n	800aafc <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e136      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aafc:	4b5f      	ldr	r3, [pc, #380]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aafe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1ee      	bne.n	800aae6 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 812b 	beq.w	800ad68 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ab12:	4b5a      	ldr	r3, [pc, #360]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab1a:	2b18      	cmp	r3, #24
 800ab1c:	f000 80bb 	beq.w	800ac96 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	2b02      	cmp	r3, #2
 800ab26:	f040 8095 	bne.w	800ac54 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ab2a:	4b54      	ldr	r3, [pc, #336]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a53      	ldr	r2, [pc, #332]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab36:	f7f9 fc47 	bl	80043c8 <HAL_GetTick>
 800ab3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab3c:	e008      	b.n	800ab50 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab3e:	f7f9 fc43 	bl	80043c8 <HAL_GetTick>
 800ab42:	4602      	mov	r2, r0
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	1ad3      	subs	r3, r2, r3
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d901      	bls.n	800ab50 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e10c      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab50:	4b4a      	ldr	r3, [pc, #296]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d1f0      	bne.n	800ab3e <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab5c:	4b47      	ldr	r3, [pc, #284]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab60:	4b47      	ldr	r3, [pc, #284]	; (800ac80 <HAL_RCC_OscConfig+0x768>)
 800ab62:	4013      	ands	r3, r2
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ab6c:	0112      	lsls	r2, r2, #4
 800ab6e:	430a      	orrs	r2, r1
 800ab70:	4942      	ldr	r1, [pc, #264]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	628b      	str	r3, [r1, #40]	; 0x28
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7a:	3b01      	subs	r3, #1
 800ab7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab84:	3b01      	subs	r3, #1
 800ab86:	025b      	lsls	r3, r3, #9
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	3b01      	subs	r3, #1
 800ab92:	041b      	lsls	r3, r3, #16
 800ab94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ab98:	431a      	orrs	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	061b      	lsls	r3, r3, #24
 800aba2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aba6:	4935      	ldr	r1, [pc, #212]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800aba8:	4313      	orrs	r3, r2
 800abaa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800abac:	4b33      	ldr	r3, [pc, #204]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb0:	4a32      	ldr	r2, [pc, #200]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abb2:	f023 0301 	bic.w	r3, r3, #1
 800abb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800abb8:	4b30      	ldr	r3, [pc, #192]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abbc:	4b31      	ldr	r3, [pc, #196]	; (800ac84 <HAL_RCC_OscConfig+0x76c>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800abc4:	00d2      	lsls	r2, r2, #3
 800abc6:	492d      	ldr	r1, [pc, #180]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800abcc:	4b2b      	ldr	r3, [pc, #172]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd0:	f023 020c 	bic.w	r2, r3, #12
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd8:	4928      	ldr	r1, [pc, #160]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	f023 0202 	bic.w	r2, r3, #2
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abea:	4924      	ldr	r1, [pc, #144]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abec:	4313      	orrs	r3, r2
 800abee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800abf0:	4b22      	ldr	r3, [pc, #136]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf4:	4a21      	ldr	r2, [pc, #132]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800abfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abfc:	4b1f      	ldr	r3, [pc, #124]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	4a1e      	ldr	r2, [pc, #120]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ac08:	4b1c      	ldr	r3, [pc, #112]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac0c:	4a1b      	ldr	r2, [pc, #108]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ac12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ac14:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac18:	4a18      	ldr	r2, [pc, #96]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac1a:	f043 0301 	orr.w	r3, r3, #1
 800ac1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ac20:	4b16      	ldr	r3, [pc, #88]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ac2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac2c:	f7f9 fbcc 	bl	80043c8 <HAL_GetTick>
 800ac30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac32:	e008      	b.n	800ac46 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac34:	f7f9 fbc8 	bl	80043c8 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	2b02      	cmp	r3, #2
 800ac40:	d901      	bls.n	800ac46 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ac42:	2303      	movs	r3, #3
 800ac44:	e091      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ac46:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d0f0      	beq.n	800ac34 <HAL_RCC_OscConfig+0x71c>
 800ac52:	e089      	b.n	800ad68 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac54:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <HAL_RCC_OscConfig+0x764>)
 800ac5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac60:	f7f9 fbb2 	bl	80043c8 <HAL_GetTick>
 800ac64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac66:	e00f      	b.n	800ac88 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac68:	f7f9 fbae 	bl	80043c8 <HAL_GetTick>
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac70:	1ad3      	subs	r3, r2, r3
 800ac72:	2b02      	cmp	r3, #2
 800ac74:	d908      	bls.n	800ac88 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e077      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
 800ac7a:	bf00      	nop
 800ac7c:	58024400 	.word	0x58024400
 800ac80:	fffffc0c 	.word	0xfffffc0c
 800ac84:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac88:	4b3a      	ldr	r3, [pc, #232]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d1e9      	bne.n	800ac68 <HAL_RCC_OscConfig+0x750>
 800ac94:	e068      	b.n	800ad68 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ac96:	4b37      	ldr	r3, [pc, #220]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ac98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac9a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac9c:	4b35      	ldr	r3, [pc, #212]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ac9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aca0:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d031      	beq.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	f003 0203 	and.w	r2, r3, #3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d12a      	bne.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	091b      	lsrs	r3, r3, #4
 800acbc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d122      	bne.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd2:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d11a      	bne.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	0a5b      	lsrs	r3, r3, #9
 800acdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ace4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d111      	bne.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	0c1b      	lsrs	r3, r3, #16
 800acee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acf8:	429a      	cmp	r2, r3
 800acfa:	d108      	bne.n	800ad0e <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	0e1b      	lsrs	r3, r3, #24
 800ad00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d001      	beq.n	800ad12 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e02b      	b.n	800ad6a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ad12:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad16:	08db      	lsrs	r3, r3, #3
 800ad18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad1c:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad22:	693a      	ldr	r2, [r7, #16]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d01f      	beq.n	800ad68 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ad28:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2c:	4a11      	ldr	r2, [pc, #68]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad2e:	f023 0301 	bic.w	r3, r3, #1
 800ad32:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad34:	f7f9 fb48 	bl	80043c8 <HAL_GetTick>
 800ad38:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ad3a:	bf00      	nop
 800ad3c:	f7f9 fb44 	bl	80043c8 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d0f9      	beq.n	800ad3c <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad4c:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <HAL_RCC_OscConfig+0x860>)
 800ad4e:	4013      	ands	r3, r2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ad54:	00d2      	lsls	r2, r2, #3
 800ad56:	4907      	ldr	r1, [pc, #28]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad5c:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad60:	4a04      	ldr	r2, [pc, #16]	; (800ad74 <HAL_RCC_OscConfig+0x85c>)
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ad68:	2300      	movs	r3, #0
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3730      	adds	r7, #48	; 0x30
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	58024400 	.word	0x58024400
 800ad78:	ffff0007 	.word	0xffff0007

0800ad7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e19c      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad90:	4b8a      	ldr	r3, [pc, #552]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 030f 	and.w	r3, r3, #15
 800ad98:	683a      	ldr	r2, [r7, #0]
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d910      	bls.n	800adc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad9e:	4b87      	ldr	r3, [pc, #540]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f023 020f 	bic.w	r2, r3, #15
 800ada6:	4985      	ldr	r1, [pc, #532]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	4313      	orrs	r3, r2
 800adac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adae:	4b83      	ldr	r3, [pc, #524]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 030f 	and.w	r3, r3, #15
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d001      	beq.n	800adc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e184      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0304 	and.w	r3, r3, #4
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d010      	beq.n	800adee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	4b7b      	ldr	r3, [pc, #492]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800add2:	699b      	ldr	r3, [r3, #24]
 800add4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800add8:	429a      	cmp	r2, r3
 800adda:	d908      	bls.n	800adee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800addc:	4b78      	ldr	r3, [pc, #480]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800adde:	699b      	ldr	r3, [r3, #24]
 800ade0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	4975      	ldr	r1, [pc, #468]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800adea:	4313      	orrs	r3, r2
 800adec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f003 0308 	and.w	r3, r3, #8
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d010      	beq.n	800ae1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	695a      	ldr	r2, [r3, #20]
 800adfe:	4b70      	ldr	r3, [pc, #448]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae00:	69db      	ldr	r3, [r3, #28]
 800ae02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d908      	bls.n	800ae1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae0a:	4b6d      	ldr	r3, [pc, #436]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae0c:	69db      	ldr	r3, [r3, #28]
 800ae0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	496a      	ldr	r1, [pc, #424]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d010      	beq.n	800ae4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	699a      	ldr	r2, [r3, #24]
 800ae2c:	4b64      	ldr	r3, [pc, #400]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae2e:	69db      	ldr	r3, [r3, #28]
 800ae30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d908      	bls.n	800ae4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae38:	4b61      	ldr	r3, [pc, #388]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	495e      	ldr	r1, [pc, #376]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae46:	4313      	orrs	r3, r2
 800ae48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f003 0320 	and.w	r3, r3, #32
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d010      	beq.n	800ae78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69da      	ldr	r2, [r3, #28]
 800ae5a:	4b59      	ldr	r3, [pc, #356]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae5c:	6a1b      	ldr	r3, [r3, #32]
 800ae5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d908      	bls.n	800ae78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae66:	4b56      	ldr	r3, [pc, #344]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae68:	6a1b      	ldr	r3, [r3, #32]
 800ae6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	4953      	ldr	r1, [pc, #332]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 0302 	and.w	r3, r3, #2
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d010      	beq.n	800aea6 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	68da      	ldr	r2, [r3, #12]
 800ae88:	4b4d      	ldr	r3, [pc, #308]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae8a:	699b      	ldr	r3, [r3, #24]
 800ae8c:	f003 030f 	and.w	r3, r3, #15
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d908      	bls.n	800aea6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae94:	4b4a      	ldr	r3, [pc, #296]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f023 020f 	bic.w	r2, r3, #15
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	4947      	ldr	r1, [pc, #284]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d055      	beq.n	800af5e <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aeb2:	4b43      	ldr	r3, [pc, #268]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	4940      	ldr	r1, [pc, #256]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d107      	bne.n	800aedc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aecc:	4b3c      	ldr	r3, [pc, #240]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d121      	bne.n	800af1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e0f6      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	2b03      	cmp	r3, #3
 800aee2:	d107      	bne.n	800aef4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aee4:	4b36      	ldr	r3, [pc, #216]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d115      	bne.n	800af1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
 800aef2:	e0ea      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d107      	bne.n	800af0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aefc:	4b30      	ldr	r3, [pc, #192]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af04:	2b00      	cmp	r3, #0
 800af06:	d109      	bne.n	800af1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e0de      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af0c:	4b2c      	ldr	r3, [pc, #176]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800af18:	2301      	movs	r3, #1
 800af1a:	e0d6      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800af1c:	4b28      	ldr	r3, [pc, #160]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f023 0207 	bic.w	r2, r3, #7
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	4925      	ldr	r1, [pc, #148]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af2e:	f7f9 fa4b 	bl	80043c8 <HAL_GetTick>
 800af32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af34:	e00a      	b.n	800af4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800af36:	f7f9 fa47 	bl	80043c8 <HAL_GetTick>
 800af3a:	4602      	mov	r2, r0
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	f241 3288 	movw	r2, #5000	; 0x1388
 800af44:	4293      	cmp	r3, r2
 800af46:	d901      	bls.n	800af4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e0be      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af4c:	4b1c      	ldr	r3, [pc, #112]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af4e:	691b      	ldr	r3, [r3, #16]
 800af50:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d1eb      	bne.n	800af36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d010      	beq.n	800af8c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	68da      	ldr	r2, [r3, #12]
 800af6e:	4b14      	ldr	r3, [pc, #80]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	429a      	cmp	r2, r3
 800af78:	d208      	bcs.n	800af8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af7a:	4b11      	ldr	r3, [pc, #68]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	f023 020f 	bic.w	r2, r3, #15
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	490e      	ldr	r1, [pc, #56]	; (800afc0 <HAL_RCC_ClockConfig+0x244>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af8c:	4b0b      	ldr	r3, [pc, #44]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 030f 	and.w	r3, r3, #15
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d214      	bcs.n	800afc4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af9a:	4b08      	ldr	r3, [pc, #32]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f023 020f 	bic.w	r2, r3, #15
 800afa2:	4906      	ldr	r1, [pc, #24]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800afaa:	4b04      	ldr	r3, [pc, #16]	; (800afbc <HAL_RCC_ClockConfig+0x240>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 030f 	and.w	r3, r3, #15
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d005      	beq.n	800afc4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800afb8:	2301      	movs	r3, #1
 800afba:	e086      	b.n	800b0ca <HAL_RCC_ClockConfig+0x34e>
 800afbc:	52002000 	.word	0x52002000
 800afc0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0304 	and.w	r3, r3, #4
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d010      	beq.n	800aff2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	691a      	ldr	r2, [r3, #16]
 800afd4:	4b3f      	ldr	r3, [pc, #252]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800afd6:	699b      	ldr	r3, [r3, #24]
 800afd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800afdc:	429a      	cmp	r2, r3
 800afde:	d208      	bcs.n	800aff2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800afe0:	4b3c      	ldr	r3, [pc, #240]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	4939      	ldr	r1, [pc, #228]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b00      	cmp	r3, #0
 800affc:	d010      	beq.n	800b020 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695a      	ldr	r2, [r3, #20]
 800b002:	4b34      	ldr	r3, [pc, #208]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b004:	69db      	ldr	r3, [r3, #28]
 800b006:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b00a:	429a      	cmp	r2, r3
 800b00c:	d208      	bcs.n	800b020 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b00e:	4b31      	ldr	r3, [pc, #196]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	695b      	ldr	r3, [r3, #20]
 800b01a:	492e      	ldr	r1, [pc, #184]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b01c:	4313      	orrs	r3, r2
 800b01e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 0310 	and.w	r3, r3, #16
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d010      	beq.n	800b04e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	699a      	ldr	r2, [r3, #24]
 800b030:	4b28      	ldr	r3, [pc, #160]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b038:	429a      	cmp	r2, r3
 800b03a:	d208      	bcs.n	800b04e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b03c:	4b25      	ldr	r3, [pc, #148]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	699b      	ldr	r3, [r3, #24]
 800b048:	4922      	ldr	r1, [pc, #136]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 0320 	and.w	r3, r3, #32
 800b056:	2b00      	cmp	r3, #0
 800b058:	d010      	beq.n	800b07c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	69da      	ldr	r2, [r3, #28]
 800b05e:	4b1d      	ldr	r3, [pc, #116]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b060:	6a1b      	ldr	r3, [r3, #32]
 800b062:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b066:	429a      	cmp	r2, r3
 800b068:	d208      	bcs.n	800b07c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b06a:	4b1a      	ldr	r3, [pc, #104]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b06c:	6a1b      	ldr	r3, [r3, #32]
 800b06e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	4917      	ldr	r1, [pc, #92]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b07c:	f000 f89e 	bl	800b1bc <HAL_RCC_GetSysClockFreq>
 800b080:	4602      	mov	r2, r0
 800b082:	4b14      	ldr	r3, [pc, #80]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	4912      	ldr	r1, [pc, #72]	; (800b0d8 <HAL_RCC_ClockConfig+0x35c>)
 800b08e:	5ccb      	ldrb	r3, [r1, r3]
 800b090:	f003 031f 	and.w	r3, r3, #31
 800b094:	fa22 f303 	lsr.w	r3, r2, r3
 800b098:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b09a:	4b0e      	ldr	r3, [pc, #56]	; (800b0d4 <HAL_RCC_ClockConfig+0x358>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f003 030f 	and.w	r3, r3, #15
 800b0a2:	4a0d      	ldr	r2, [pc, #52]	; (800b0d8 <HAL_RCC_ClockConfig+0x35c>)
 800b0a4:	5cd3      	ldrb	r3, [r2, r3]
 800b0a6:	f003 031f 	and.w	r3, r3, #31
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b0b0:	4a0a      	ldr	r2, [pc, #40]	; (800b0dc <HAL_RCC_ClockConfig+0x360>)
 800b0b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b0b4:	4a0a      	ldr	r2, [pc, #40]	; (800b0e0 <HAL_RCC_ClockConfig+0x364>)
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b0ba:	4b0a      	ldr	r3, [pc, #40]	; (800b0e4 <HAL_RCC_ClockConfig+0x368>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7f9 f938 	bl	8004334 <HAL_InitTick>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	08010c84 	.word	0x08010c84
 800b0dc:	24000048 	.word	0x24000048
 800b0e0:	24000044 	.word	0x24000044
 800b0e4:	2400004c 	.word	0x2400004c

0800b0e8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b08c      	sub	sp, #48	; 0x30
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60f8      	str	r0, [r7, #12]
 800b0f0:	60b9      	str	r1, [r7, #8]
 800b0f2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d12a      	bne.n	800b150 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b0fa:	4b2d      	ldr	r3, [pc, #180]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b0fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b100:	4a2b      	ldr	r2, [pc, #172]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b102:	f043 0301 	orr.w	r3, r3, #1
 800b106:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b10a:	4b29      	ldr	r3, [pc, #164]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b10c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	61bb      	str	r3, [r7, #24]
 800b116:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b11c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b11e:	2302      	movs	r3, #2
 800b120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b122:	2303      	movs	r3, #3
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b126:	2300      	movs	r3, #0
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b12a:	2300      	movs	r3, #0
 800b12c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b12e:	f107 031c 	add.w	r3, r7, #28
 800b132:	4619      	mov	r1, r3
 800b134:	481f      	ldr	r0, [pc, #124]	; (800b1b4 <HAL_RCC_MCOConfig+0xcc>)
 800b136:	f7fd fcc1 	bl	8008abc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b13a:	4b1d      	ldr	r3, [pc, #116]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b13c:	691b      	ldr	r3, [r3, #16]
 800b13e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b142:	68b9      	ldr	r1, [r7, #8]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	430b      	orrs	r3, r1
 800b148:	4919      	ldr	r1, [pc, #100]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b14a:	4313      	orrs	r3, r2
 800b14c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b14e:	e02a      	b.n	800b1a6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b150:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b152:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b156:	4a16      	ldr	r2, [pc, #88]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b158:	f043 0304 	orr.w	r3, r3, #4
 800b15c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800b160:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b166:	f003 0304 	and.w	r3, r3, #4
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b16e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b174:	2302      	movs	r3, #2
 800b176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b178:	2303      	movs	r3, #3
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17c:	2300      	movs	r3, #0
 800b17e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b180:	2300      	movs	r3, #0
 800b182:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b184:	f107 031c 	add.w	r3, r7, #28
 800b188:	4619      	mov	r1, r3
 800b18a:	480b      	ldr	r0, [pc, #44]	; (800b1b8 <HAL_RCC_MCOConfig+0xd0>)
 800b18c:	f7fd fc96 	bl	8008abc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b190:	4b07      	ldr	r3, [pc, #28]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b192:	691b      	ldr	r3, [r3, #16]
 800b194:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	01d9      	lsls	r1, r3, #7
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	430b      	orrs	r3, r1
 800b1a0:	4903      	ldr	r1, [pc, #12]	; (800b1b0 <HAL_RCC_MCOConfig+0xc8>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	610b      	str	r3, [r1, #16]
}
 800b1a6:	bf00      	nop
 800b1a8:	3730      	adds	r7, #48	; 0x30
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	58024400 	.word	0x58024400
 800b1b4:	58020000 	.word	0x58020000
 800b1b8:	58020800 	.word	0x58020800

0800b1bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b089      	sub	sp, #36	; 0x24
 800b1c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1c2:	4bb3      	ldr	r3, [pc, #716]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1ca:	2b18      	cmp	r3, #24
 800b1cc:	f200 8155 	bhi.w	800b47a <HAL_RCC_GetSysClockFreq+0x2be>
 800b1d0:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d6:	bf00      	nop
 800b1d8:	0800b23d 	.word	0x0800b23d
 800b1dc:	0800b47b 	.word	0x0800b47b
 800b1e0:	0800b47b 	.word	0x0800b47b
 800b1e4:	0800b47b 	.word	0x0800b47b
 800b1e8:	0800b47b 	.word	0x0800b47b
 800b1ec:	0800b47b 	.word	0x0800b47b
 800b1f0:	0800b47b 	.word	0x0800b47b
 800b1f4:	0800b47b 	.word	0x0800b47b
 800b1f8:	0800b263 	.word	0x0800b263
 800b1fc:	0800b47b 	.word	0x0800b47b
 800b200:	0800b47b 	.word	0x0800b47b
 800b204:	0800b47b 	.word	0x0800b47b
 800b208:	0800b47b 	.word	0x0800b47b
 800b20c:	0800b47b 	.word	0x0800b47b
 800b210:	0800b47b 	.word	0x0800b47b
 800b214:	0800b47b 	.word	0x0800b47b
 800b218:	0800b269 	.word	0x0800b269
 800b21c:	0800b47b 	.word	0x0800b47b
 800b220:	0800b47b 	.word	0x0800b47b
 800b224:	0800b47b 	.word	0x0800b47b
 800b228:	0800b47b 	.word	0x0800b47b
 800b22c:	0800b47b 	.word	0x0800b47b
 800b230:	0800b47b 	.word	0x0800b47b
 800b234:	0800b47b 	.word	0x0800b47b
 800b238:	0800b26f 	.word	0x0800b26f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b23c:	4b94      	ldr	r3, [pc, #592]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f003 0320 	and.w	r3, r3, #32
 800b244:	2b00      	cmp	r3, #0
 800b246:	d009      	beq.n	800b25c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b248:	4b91      	ldr	r3, [pc, #580]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	08db      	lsrs	r3, r3, #3
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	4a90      	ldr	r2, [pc, #576]	; (800b494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b254:	fa22 f303 	lsr.w	r3, r2, r3
 800b258:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b25a:	e111      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b25c:	4b8d      	ldr	r3, [pc, #564]	; (800b494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b25e:	61bb      	str	r3, [r7, #24]
      break;
 800b260:	e10e      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b262:	4b8d      	ldr	r3, [pc, #564]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b264:	61bb      	str	r3, [r7, #24]
      break;
 800b266:	e10b      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b268:	4b8c      	ldr	r3, [pc, #560]	; (800b49c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b26a:	61bb      	str	r3, [r7, #24]
      break;
 800b26c:	e108      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b26e:	4b88      	ldr	r3, [pc, #544]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b272:	f003 0303 	and.w	r3, r3, #3
 800b276:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b278:	4b85      	ldr	r3, [pc, #532]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b27a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b27c:	091b      	lsrs	r3, r3, #4
 800b27e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b282:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b284:	4b82      	ldr	r3, [pc, #520]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	f003 0301 	and.w	r3, r3, #1
 800b28c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b28e:	4b80      	ldr	r3, [pc, #512]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b292:	08db      	lsrs	r3, r3, #3
 800b294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f000 80e1 	beq.w	800b474 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	f000 8083 	beq.w	800b3c0 <HAL_RCC_GetSysClockFreq+0x204>
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	f200 80a1 	bhi.w	800b404 <HAL_RCC_GetSysClockFreq+0x248>
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d003      	beq.n	800b2d0 <HAL_RCC_GetSysClockFreq+0x114>
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d056      	beq.n	800b37c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b2ce:	e099      	b.n	800b404 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2d0:	4b6f      	ldr	r3, [pc, #444]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f003 0320 	and.w	r3, r3, #32
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d02d      	beq.n	800b338 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2dc:	4b6c      	ldr	r3, [pc, #432]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	08db      	lsrs	r3, r3, #3
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	4a6b      	ldr	r2, [pc, #428]	; (800b494 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	ee07 3a90 	vmov	s15, r3
 800b2f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	ee07 3a90 	vmov	s15, r3
 800b2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b306:	4b62      	ldr	r3, [pc, #392]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b316:	ed97 6a02 	vldr	s12, [r7, #8]
 800b31a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b332:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b336:	e087      	b.n	800b448 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	ee07 3a90 	vmov	s15, r3
 800b33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b342:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b4a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b34a:	4b51      	ldr	r3, [pc, #324]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b35a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b35e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b36a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b37a:	e065      	b.n	800b448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	ee07 3a90 	vmov	s15, r3
 800b382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b386:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38e:	4b40      	ldr	r3, [pc, #256]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b396:	ee07 3a90 	vmov	s15, r3
 800b39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3be:	e043      	b.n	800b448 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	ee07 3a90 	vmov	s15, r3
 800b3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b4ac <HAL_RCC_GetSysClockFreq+0x2f0>
 800b3ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3d2:	4b2f      	ldr	r3, [pc, #188]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3da:	ee07 3a90 	vmov	s15, r3
 800b3de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b402:	e021      	b.n	800b448 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	ee07 3a90 	vmov	s15, r3
 800b40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b4a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b416:	4b1e      	ldr	r3, [pc, #120]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b426:	ed97 6a02 	vldr	s12, [r7, #8]
 800b42a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b42e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b43a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b43e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b442:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b446:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b448:	4b11      	ldr	r3, [pc, #68]	; (800b490 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44c:	0a5b      	lsrs	r3, r3, #9
 800b44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b452:	3301      	adds	r3, #1
 800b454:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	ee07 3a90 	vmov	s15, r3
 800b45c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b460:	edd7 6a07 	vldr	s13, [r7, #28]
 800b464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46c:	ee17 3a90 	vmov	r3, s15
 800b470:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b472:	e005      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	61bb      	str	r3, [r7, #24]
      break;
 800b478:	e002      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b47a:	4b07      	ldr	r3, [pc, #28]	; (800b498 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b47c:	61bb      	str	r3, [r7, #24]
      break;
 800b47e:	bf00      	nop
  }

  return sysclockfreq;
 800b480:	69bb      	ldr	r3, [r7, #24]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3724      	adds	r7, #36	; 0x24
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
 800b48e:	bf00      	nop
 800b490:	58024400 	.word	0x58024400
 800b494:	03d09000 	.word	0x03d09000
 800b498:	003d0900 	.word	0x003d0900
 800b49c:	016e3600 	.word	0x016e3600
 800b4a0:	46000000 	.word	0x46000000
 800b4a4:	4c742400 	.word	0x4c742400
 800b4a8:	4a742400 	.word	0x4a742400
 800b4ac:	4bb71b00 	.word	0x4bb71b00

0800b4b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b4b6:	f7ff fe81 	bl	800b1bc <HAL_RCC_GetSysClockFreq>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b10      	ldr	r3, [pc, #64]	; (800b500 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	0a1b      	lsrs	r3, r3, #8
 800b4c2:	f003 030f 	and.w	r3, r3, #15
 800b4c6:	490f      	ldr	r1, [pc, #60]	; (800b504 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4c8:	5ccb      	ldrb	r3, [r1, r3]
 800b4ca:	f003 031f 	and.w	r3, r3, #31
 800b4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d2:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b4d4:	4b0a      	ldr	r3, [pc, #40]	; (800b500 <HAL_RCC_GetHCLKFreq+0x50>)
 800b4d6:	699b      	ldr	r3, [r3, #24]
 800b4d8:	f003 030f 	and.w	r3, r3, #15
 800b4dc:	4a09      	ldr	r2, [pc, #36]	; (800b504 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4de:	5cd3      	ldrb	r3, [r2, r3]
 800b4e0:	f003 031f 	and.w	r3, r3, #31
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ea:	4a07      	ldr	r2, [pc, #28]	; (800b508 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4ee:	4a07      	ldr	r2, [pc, #28]	; (800b50c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b4f4:	4b04      	ldr	r3, [pc, #16]	; (800b508 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3708      	adds	r7, #8
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	58024400 	.word	0x58024400
 800b504:	08010c84 	.word	0x08010c84
 800b508:	24000048 	.word	0x24000048
 800b50c:	24000044 	.word	0x24000044

0800b510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b514:	f7ff ffcc 	bl	800b4b0 <HAL_RCC_GetHCLKFreq>
 800b518:	4602      	mov	r2, r0
 800b51a:	4b06      	ldr	r3, [pc, #24]	; (800b534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	091b      	lsrs	r3, r3, #4
 800b520:	f003 0307 	and.w	r3, r3, #7
 800b524:	4904      	ldr	r1, [pc, #16]	; (800b538 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b526:	5ccb      	ldrb	r3, [r1, r3]
 800b528:	f003 031f 	and.w	r3, r3, #31
 800b52c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b530:	4618      	mov	r0, r3
 800b532:	bd80      	pop	{r7, pc}
 800b534:	58024400 	.word	0x58024400
 800b538:	08010c84 	.word	0x08010c84

0800b53c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 800b540:	f7ff ffb6 	bl	800b4b0 <HAL_RCC_GetHCLKFreq>
 800b544:	4602      	mov	r2, r0
 800b546:	4b06      	ldr	r3, [pc, #24]	; (800b560 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	0a1b      	lsrs	r3, r3, #8
 800b54c:	f003 0307 	and.w	r3, r3, #7
 800b550:	4904      	ldr	r1, [pc, #16]	; (800b564 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b552:	5ccb      	ldrb	r3, [r1, r3]
 800b554:	f003 031f 	and.w	r3, r3, #31
 800b558:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	58024400 	.word	0x58024400
 800b564:	08010c84 	.word	0x08010c84

0800b568 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b56c:	b0c8      	sub	sp, #288	; 0x120
 800b56e:	af00      	add	r7, sp, #0
 800b570:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b574:	2300      	movs	r3, #0
 800b576:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b57a:	2300      	movs	r3, #0
 800b57c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b580:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b58c:	2500      	movs	r5, #0
 800b58e:	ea54 0305 	orrs.w	r3, r4, r5
 800b592:	d049      	beq.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b594:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b59a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b59e:	d02f      	beq.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b5a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b5a4:	d828      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5aa:	d01a      	beq.n	800b5e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b5ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5b0:	d822      	bhi.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b5b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ba:	d007      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b5bc:	e01c      	b.n	800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5be:	4ba7      	ldr	r3, [pc, #668]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	4aa6      	ldr	r2, [pc, #664]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5ca:	e01a      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	2102      	movs	r1, #2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f001 fc43 	bl	800ce60 <RCCEx_PLL2_Config>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5e0:	e00f      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b5e6:	3328      	adds	r3, #40	; 0x28
 800b5e8:	2102      	movs	r1, #2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f001 fcea 	bl	800cfc4 <RCCEx_PLL3_Config>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5f6:	e004      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b5fe:	e000      	b.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b600:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10a      	bne.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b60a:	4b94      	ldr	r3, [pc, #592]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b60e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b618:	4a90      	ldr	r2, [pc, #576]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b61a:	430b      	orrs	r3, r1
 800b61c:	6513      	str	r3, [r2, #80]	; 0x50
 800b61e:	e003      	b.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b620:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b624:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b628:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b630:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b634:	f04f 0900 	mov.w	r9, #0
 800b638:	ea58 0309 	orrs.w	r3, r8, r9
 800b63c:	d047      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b63e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b644:	2b04      	cmp	r3, #4
 800b646:	d82a      	bhi.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b648:	a201      	add	r2, pc, #4	; (adr r2, 800b650 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64e:	bf00      	nop
 800b650:	0800b665 	.word	0x0800b665
 800b654:	0800b673 	.word	0x0800b673
 800b658:	0800b689 	.word	0x0800b689
 800b65c:	0800b6a7 	.word	0x0800b6a7
 800b660:	0800b6a7 	.word	0x0800b6a7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b664:	4b7d      	ldr	r3, [pc, #500]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b668:	4a7c      	ldr	r2, [pc, #496]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b66a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b66e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b670:	e01a      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b672:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b676:	3308      	adds	r3, #8
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f001 fbf0 	bl	800ce60 <RCCEx_PLL2_Config>
 800b680:	4603      	mov	r3, r0
 800b682:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b686:	e00f      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b68c:	3328      	adds	r3, #40	; 0x28
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f001 fc97 	bl	800cfc4 <RCCEx_PLL3_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b69c:	e004      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b69e:	2301      	movs	r3, #1
 800b6a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b6a4:	e000      	b.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b6a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d10a      	bne.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6b0:	4b6a      	ldr	r3, [pc, #424]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6b4:	f023 0107 	bic.w	r1, r3, #7
 800b6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6be:	4a67      	ldr	r2, [pc, #412]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b6c0:	430b      	orrs	r3, r1
 800b6c2:	6513      	str	r3, [r2, #80]	; 0x50
 800b6c4:	e003      	b.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b6ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b6ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b6da:	f04f 0b00 	mov.w	fp, #0
 800b6de:	ea5a 030b 	orrs.w	r3, sl, fp
 800b6e2:	d054      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b6e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ea:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b6ee:	d036      	beq.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b6f0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b6f4:	d82f      	bhi.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b6f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6fa:	d032      	beq.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b6fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b700:	d829      	bhi.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b702:	2bc0      	cmp	r3, #192	; 0xc0
 800b704:	d02f      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b706:	2bc0      	cmp	r3, #192	; 0xc0
 800b708:	d825      	bhi.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b70a:	2b80      	cmp	r3, #128	; 0x80
 800b70c:	d018      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b70e:	2b80      	cmp	r3, #128	; 0x80
 800b710:	d821      	bhi.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b716:	2b40      	cmp	r3, #64	; 0x40
 800b718:	d007      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b71a:	e01c      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b71c:	4b4f      	ldr	r3, [pc, #316]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b71e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b720:	4a4e      	ldr	r2, [pc, #312]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b722:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b726:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b728:	e01e      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b72a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b72e:	3308      	adds	r3, #8
 800b730:	2100      	movs	r1, #0
 800b732:	4618      	mov	r0, r3
 800b734:	f001 fb94 	bl	800ce60 <RCCEx_PLL2_Config>
 800b738:	4603      	mov	r3, r0
 800b73a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b73e:	e013      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b740:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b744:	3328      	adds	r3, #40	; 0x28
 800b746:	2100      	movs	r1, #0
 800b748:	4618      	mov	r0, r3
 800b74a:	f001 fc3b 	bl	800cfc4 <RCCEx_PLL3_Config>
 800b74e:	4603      	mov	r3, r0
 800b750:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b754:	e008      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b75c:	e004      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b75e:	bf00      	nop
 800b760:	e002      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b762:	bf00      	nop
 800b764:	e000      	b.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b766:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b768:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10a      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b770:	4b3a      	ldr	r3, [pc, #232]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b774:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b778:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b77c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b77e:	4a37      	ldr	r2, [pc, #220]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b780:	430b      	orrs	r3, r1
 800b782:	6513      	str	r3, [r2, #80]	; 0x50
 800b784:	e003      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b786:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b78a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b78e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b796:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b79a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b79e:	2300      	movs	r3, #0
 800b7a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b7a4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	d05c      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b7ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b7b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7b4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b7b8:	d03b      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b7ba:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800b7be:	d834      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7c4:	d037      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b7c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ca:	d82e      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b7d0:	d033      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b7d6:	d828      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7dc:	d01a      	beq.n	800b814 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7e2:	d822      	bhi.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d003      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b7e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7ec:	d007      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b7ee:	e01c      	b.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7f0:	4b1a      	ldr	r3, [pc, #104]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7f4:	4a19      	ldr	r2, [pc, #100]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b7fc:	e01e      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b802:	3308      	adds	r3, #8
 800b804:	2100      	movs	r1, #0
 800b806:	4618      	mov	r0, r3
 800b808:	f001 fb2a 	bl	800ce60 <RCCEx_PLL2_Config>
 800b80c:	4603      	mov	r3, r0
 800b80e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b812:	e013      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b818:	3328      	adds	r3, #40	; 0x28
 800b81a:	2100      	movs	r1, #0
 800b81c:	4618      	mov	r0, r3
 800b81e:	f001 fbd1 	bl	800cfc4 <RCCEx_PLL3_Config>
 800b822:	4603      	mov	r3, r0
 800b824:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b828:	e008      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b830:	e004      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b832:	bf00      	nop
 800b834:	e002      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b836:	bf00      	nop
 800b838:	e000      	b.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b83a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b83c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b840:	2b00      	cmp	r3, #0
 800b842:	d10d      	bne.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b848:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 800b84c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b852:	4a02      	ldr	r2, [pc, #8]	; (800b85c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b854:	430b      	orrs	r3, r1
 800b856:	6513      	str	r3, [r2, #80]	; 0x50
 800b858:	e006      	b.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b85a:	bf00      	nop
 800b85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b860:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b864:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b868:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b878:	2300      	movs	r3, #0
 800b87a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b87e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b882:	460b      	mov	r3, r1
 800b884:	4313      	orrs	r3, r2
 800b886:	d03a      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b88e:	2b30      	cmp	r3, #48	; 0x30
 800b890:	d01f      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800b892:	2b30      	cmp	r3, #48	; 0x30
 800b894:	d819      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b896:	2b20      	cmp	r3, #32
 800b898:	d00c      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800b89a:	2b20      	cmp	r3, #32
 800b89c:	d815      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x362>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d019      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800b8a2:	2b10      	cmp	r3, #16
 800b8a4:	d111      	bne.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8a6:	4bae      	ldr	r3, [pc, #696]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8aa:	4aad      	ldr	r2, [pc, #692]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b8b2:	e011      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8b8:	3308      	adds	r3, #8
 800b8ba:	2102      	movs	r1, #2
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f001 facf 	bl	800ce60 <RCCEx_PLL2_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b8c8:	e006      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b8d0:	e002      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b8d2:	bf00      	nop
 800b8d4:	e000      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800b8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10a      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b8e0:	4b9f      	ldr	r3, [pc, #636]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b8e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ee:	4a9c      	ldr	r2, [pc, #624]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8f4:	e003      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b8fa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b8fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b90a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b90e:	2300      	movs	r3, #0
 800b910:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b914:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b918:	460b      	mov	r3, r1
 800b91a:	4313      	orrs	r3, r2
 800b91c:	d051      	beq.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b91e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b922:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b928:	d035      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b92a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b92e:	d82e      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b934:	d031      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b93a:	d828      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b93c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b940:	d01a      	beq.n	800b978 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800b942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b946:	d822      	bhi.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x426>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800b94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b950:	d007      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800b952:	e01c      	b.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b954:	4b82      	ldr	r3, [pc, #520]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b958:	4a81      	ldr	r2, [pc, #516]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b95a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b95e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b960:	e01c      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b966:	3308      	adds	r3, #8
 800b968:	2100      	movs	r1, #0
 800b96a:	4618      	mov	r0, r3
 800b96c:	f001 fa78 	bl	800ce60 <RCCEx_PLL2_Config>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b976:	e011      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b97c:	3328      	adds	r3, #40	; 0x28
 800b97e:	2100      	movs	r1, #0
 800b980:	4618      	mov	r0, r3
 800b982:	f001 fb1f 	bl	800cfc4 <RCCEx_PLL3_Config>
 800b986:	4603      	mov	r3, r0
 800b988:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b98c:	e006      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800b994:	e002      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b996:	bf00      	nop
 800b998:	e000      	b.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800b99a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d10a      	bne.n	800b9ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b9a4:	4b6e      	ldr	r3, [pc, #440]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9b2:	4a6b      	ldr	r2, [pc, #428]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b4:	430b      	orrs	r3, r1
 800b9b6:	6513      	str	r3, [r2, #80]	; 0x50
 800b9b8:	e003      	b.n	800b9c2 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800b9be:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b9c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b9ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b9d8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b9dc:	460b      	mov	r3, r1
 800b9de:	4313      	orrs	r3, r2
 800b9e0:	d053      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b9e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9ec:	d033      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800b9ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9f2:	d82c      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b9f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9f8:	d02f      	beq.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800b9fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b9fe:	d826      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba04:	d02b      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ba0a:	d820      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba10:	d012      	beq.n	800ba38 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800ba12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba16:	d81a      	bhi.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d022      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800ba1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba20:	d115      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba26:	3308      	adds	r3, #8
 800ba28:	2101      	movs	r1, #1
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f001 fa18 	bl	800ce60 <RCCEx_PLL2_Config>
 800ba30:	4603      	mov	r3, r0
 800ba32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba36:	e015      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba3c:	3328      	adds	r3, #40	; 0x28
 800ba3e:	2101      	movs	r1, #1
 800ba40:	4618      	mov	r0, r3
 800ba42:	f001 fabf 	bl	800cfc4 <RCCEx_PLL3_Config>
 800ba46:	4603      	mov	r3, r0
 800ba48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba4c:	e00a      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ba54:	e006      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba56:	bf00      	nop
 800ba58:	e004      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba5a:	bf00      	nop
 800ba5c:	e002      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba5e:	bf00      	nop
 800ba60:	e000      	b.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800ba62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10a      	bne.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba6c:	4b3c      	ldr	r3, [pc, #240]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba70:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ba74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba7a:	4a39      	ldr	r2, [pc, #228]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba7c:	430b      	orrs	r3, r1
 800ba7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ba80:	e003      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba82:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ba86:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ba96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800baa0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800baa4:	460b      	mov	r3, r1
 800baa6:	4313      	orrs	r3, r2
 800baa8:	d060      	beq.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800baaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800baae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bab2:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800bab6:	d039      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bab8:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800babc:	d832      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800babe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bac2:	d035      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bac8:	d82c      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800baca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bace:	d031      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bad4:	d826      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bad6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bada:	d02d      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800badc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bae0:	d820      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bae2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bae6:	d012      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baec:	d81a      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d024      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800baf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800baf6:	d115      	bne.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bafc:	3308      	adds	r3, #8
 800bafe:	2101      	movs	r1, #1
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 f9ad 	bl	800ce60 <RCCEx_PLL2_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb0c:	e017      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb12:	3328      	adds	r3, #40	; 0x28
 800bb14:	2101      	movs	r1, #1
 800bb16:	4618      	mov	r0, r3
 800bb18:	f001 fa54 	bl	800cfc4 <RCCEx_PLL3_Config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb22:	e00c      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bb2a:	e008      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb2c:	bf00      	nop
 800bb2e:	e006      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb30:	bf00      	nop
 800bb32:	e004      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb34:	bf00      	nop
 800bb36:	e002      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb38:	bf00      	nop
 800bb3a:	e000      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb3e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10e      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb46:	4b06      	ldr	r3, [pc, #24]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb56:	4a02      	ldr	r2, [pc, #8]	; (800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb5c:	e006      	b.n	800bb6c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bb5e:	bf00      	nop
 800bb60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb64:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bb68:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb74:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bb78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bb82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bb86:	460b      	mov	r3, r1
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	d037      	beq.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bb8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bb90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb96:	d00e      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bb98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb9c:	d816      	bhi.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d018      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba6:	d111      	bne.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba8:	4bc4      	ldr	r3, [pc, #784]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	4ac3      	ldr	r2, [pc, #780]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bbb4:	e00f      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbba:	3308      	adds	r3, #8
 800bbbc:	2101      	movs	r1, #1
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f001 f94e 	bl	800ce60 <RCCEx_PLL2_Config>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bbca:	e004      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bbd2:	e000      	b.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bbd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbde:	4bb7      	ldr	r3, [pc, #732]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbe2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bbea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bbec:	4ab3      	ldr	r2, [pc, #716]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbee:	430b      	orrs	r3, r1
 800bbf0:	6513      	str	r3, [r2, #80]	; 0x50
 800bbf2:	e003      	b.n	800bbfc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bbf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bbfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc04:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bc08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bc12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bc16:	460b      	mov	r3, r1
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	d039      	beq.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc22:	2b03      	cmp	r3, #3
 800bc24:	d81c      	bhi.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc26:	a201      	add	r2, pc, #4	; (adr r2, 800bc2c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2c:	0800bc69 	.word	0x0800bc69
 800bc30:	0800bc3d 	.word	0x0800bc3d
 800bc34:	0800bc4b 	.word	0x0800bc4b
 800bc38:	0800bc69 	.word	0x0800bc69
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc3c:	4b9f      	ldr	r3, [pc, #636]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc40:	4a9e      	ldr	r2, [pc, #632]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc48:	e00f      	b.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc4e:	3308      	adds	r3, #8
 800bc50:	2102      	movs	r1, #2
 800bc52:	4618      	mov	r0, r3
 800bc54:	f001 f904 	bl	800ce60 <RCCEx_PLL2_Config>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc5e:	e004      	b.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bc66:	e000      	b.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bc68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10a      	bne.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc72:	4b92      	ldr	r3, [pc, #584]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc76:	f023 0103 	bic.w	r1, r3, #3
 800bc7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc80:	4a8e      	ldr	r2, [pc, #568]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc82:	430b      	orrs	r3, r1
 800bc84:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc86:	e003      	b.n	800bc90 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc88:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bc8c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bc9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bca6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bcaa:	460b      	mov	r3, r1
 800bcac:	4313      	orrs	r3, r2
 800bcae:	f000 8099 	beq.w	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcb2:	4b83      	ldr	r3, [pc, #524]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a82      	ldr	r2, [pc, #520]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcbe:	f7f8 fb83 	bl	80043c8 <HAL_GetTick>
 800bcc2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcc6:	e00b      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcc8:	f7f8 fb7e 	bl	80043c8 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b64      	cmp	r3, #100	; 0x64
 800bcd6:	d903      	bls.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bcde:	e005      	b.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bce0:	4b77      	ldr	r3, [pc, #476]	; (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d0ed      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bcec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d173      	bne.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bcf4:	4b71      	ldr	r3, [pc, #452]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bcfc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd00:	4053      	eors	r3, r2
 800bd02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d015      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd0a:	4b6c      	ldr	r3, [pc, #432]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd16:	4b69      	ldr	r3, [pc, #420]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd1a:	4a68      	ldr	r2, [pc, #416]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bd20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd22:	4b66      	ldr	r3, [pc, #408]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd26:	4a65      	ldr	r2, [pc, #404]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd2e:	4a63      	ldr	r2, [pc, #396]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd42:	d118      	bne.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd44:	f7f8 fb40 	bl	80043c8 <HAL_GetTick>
 800bd48:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd4c:	e00d      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd4e:	f7f8 fb3b 	bl	80043c8 <HAL_GetTick>
 800bd52:	4602      	mov	r2, r0
 800bd54:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800bd58:	1ad2      	subs	r2, r2, r3
 800bd5a:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d903      	bls.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800bd68:	e005      	b.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd6a:	4b54      	ldr	r3, [pc, #336]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d0eb      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bd76:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d129      	bne.n	800bdd2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd82:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bd8e:	d10e      	bne.n	800bdae <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bd90:	4b4a      	ldr	r3, [pc, #296]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd92:	691b      	ldr	r3, [r3, #16]
 800bd94:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800bd98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bd9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bda0:	091a      	lsrs	r2, r3, #4
 800bda2:	4b48      	ldr	r3, [pc, #288]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bda4:	4013      	ands	r3, r2
 800bda6:	4a45      	ldr	r2, [pc, #276]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	6113      	str	r3, [r2, #16]
 800bdac:	e005      	b.n	800bdba <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bdae:	4b43      	ldr	r3, [pc, #268]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	4a42      	ldr	r2, [pc, #264]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bdb8:	6113      	str	r3, [r2, #16]
 800bdba:	4b40      	ldr	r3, [pc, #256]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdbc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bdbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bdc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdca:	4a3c      	ldr	r2, [pc, #240]	; (800bebc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdcc:	430b      	orrs	r3, r1
 800bdce:	6713      	str	r3, [r2, #112]	; 0x70
 800bdd0:	e008      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdd2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bdd6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800bdda:	e003      	b.n	800bde4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bddc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bde0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bde4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdec:	f002 0301 	and.w	r3, r2, #1
 800bdf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdfa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4313      	orrs	r3, r2
 800be02:	f000 8090 	beq.w	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be0e:	2b28      	cmp	r3, #40	; 0x28
 800be10:	d870      	bhi.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be12:	a201      	add	r2, pc, #4	; (adr r2, 800be18 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800befd 	.word	0x0800befd
 800be1c:	0800bef5 	.word	0x0800bef5
 800be20:	0800bef5 	.word	0x0800bef5
 800be24:	0800bef5 	.word	0x0800bef5
 800be28:	0800bef5 	.word	0x0800bef5
 800be2c:	0800bef5 	.word	0x0800bef5
 800be30:	0800bef5 	.word	0x0800bef5
 800be34:	0800bef5 	.word	0x0800bef5
 800be38:	0800bec9 	.word	0x0800bec9
 800be3c:	0800bef5 	.word	0x0800bef5
 800be40:	0800bef5 	.word	0x0800bef5
 800be44:	0800bef5 	.word	0x0800bef5
 800be48:	0800bef5 	.word	0x0800bef5
 800be4c:	0800bef5 	.word	0x0800bef5
 800be50:	0800bef5 	.word	0x0800bef5
 800be54:	0800bef5 	.word	0x0800bef5
 800be58:	0800bedf 	.word	0x0800bedf
 800be5c:	0800bef5 	.word	0x0800bef5
 800be60:	0800bef5 	.word	0x0800bef5
 800be64:	0800bef5 	.word	0x0800bef5
 800be68:	0800bef5 	.word	0x0800bef5
 800be6c:	0800bef5 	.word	0x0800bef5
 800be70:	0800bef5 	.word	0x0800bef5
 800be74:	0800bef5 	.word	0x0800bef5
 800be78:	0800befd 	.word	0x0800befd
 800be7c:	0800bef5 	.word	0x0800bef5
 800be80:	0800bef5 	.word	0x0800bef5
 800be84:	0800bef5 	.word	0x0800bef5
 800be88:	0800bef5 	.word	0x0800bef5
 800be8c:	0800bef5 	.word	0x0800bef5
 800be90:	0800bef5 	.word	0x0800bef5
 800be94:	0800bef5 	.word	0x0800bef5
 800be98:	0800befd 	.word	0x0800befd
 800be9c:	0800bef5 	.word	0x0800bef5
 800bea0:	0800bef5 	.word	0x0800bef5
 800bea4:	0800bef5 	.word	0x0800bef5
 800bea8:	0800bef5 	.word	0x0800bef5
 800beac:	0800bef5 	.word	0x0800bef5
 800beb0:	0800bef5 	.word	0x0800bef5
 800beb4:	0800bef5 	.word	0x0800bef5
 800beb8:	0800befd 	.word	0x0800befd
 800bebc:	58024400 	.word	0x58024400
 800bec0:	58024800 	.word	0x58024800
 800bec4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bec8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800becc:	3308      	adds	r3, #8
 800bece:	2101      	movs	r1, #1
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ffc5 	bl	800ce60 <RCCEx_PLL2_Config>
 800bed6:	4603      	mov	r3, r0
 800bed8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bedc:	e00f      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bede:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bee2:	3328      	adds	r3, #40	; 0x28
 800bee4:	2101      	movs	r1, #1
 800bee6:	4618      	mov	r0, r3
 800bee8:	f001 f86c 	bl	800cfc4 <RCCEx_PLL3_Config>
 800beec:	4603      	mov	r3, r0
 800beee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bef2:	e004      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800befa:	e000      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800befc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800befe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10b      	bne.n	800bf1e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf06:	4bc0      	ldr	r3, [pc, #768]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf0a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bf0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf16:	4abc      	ldr	r2, [pc, #752]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6553      	str	r3, [r2, #84]	; 0x54
 800bf1c:	e003      	b.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf1e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bf22:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	f002 0302 	and.w	r3, r2, #2
 800bf32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf36:	2300      	movs	r3, #0
 800bf38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bf3c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bf40:	460b      	mov	r3, r1
 800bf42:	4313      	orrs	r3, r2
 800bf44:	d043      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf4e:	2b05      	cmp	r3, #5
 800bf50:	d824      	bhi.n	800bf9c <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bfa5 	.word	0x0800bfa5
 800bf5c:	0800bf71 	.word	0x0800bf71
 800bf60:	0800bf87 	.word	0x0800bf87
 800bf64:	0800bfa5 	.word	0x0800bfa5
 800bf68:	0800bfa5 	.word	0x0800bfa5
 800bf6c:	0800bfa5 	.word	0x0800bfa5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf74:	3308      	adds	r3, #8
 800bf76:	2101      	movs	r1, #1
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 ff71 	bl	800ce60 <RCCEx_PLL2_Config>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf84:	e00f      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bf8a:	3328      	adds	r3, #40	; 0x28
 800bf8c:	2101      	movs	r1, #1
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f001 f818 	bl	800cfc4 <RCCEx_PLL3_Config>
 800bf94:	4603      	mov	r3, r0
 800bf96:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf9a:	e004      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800bfa2:	e000      	b.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800bfa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfa6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10b      	bne.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bfae:	4b96      	ldr	r3, [pc, #600]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfb2:	f023 0107 	bic.w	r1, r3, #7
 800bfb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bfbe:	4a92      	ldr	r2, [pc, #584]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800bfc0:	430b      	orrs	r3, r1
 800bfc2:	6553      	str	r3, [r2, #84]	; 0x54
 800bfc4:	e003      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfc6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800bfca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bfce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bfd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd6:	f002 0304 	and.w	r3, r2, #4
 800bfda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bfde:	2300      	movs	r3, #0
 800bfe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bfe4:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bfe8:	460b      	mov	r3, r1
 800bfea:	4313      	orrs	r3, r2
 800bfec:	d043      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bfee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800bff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bff6:	2b05      	cmp	r3, #5
 800bff8:	d824      	bhi.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800bffa:	a201      	add	r2, pc, #4	; (adr r2, 800c000 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800bffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c000:	0800c04d 	.word	0x0800c04d
 800c004:	0800c019 	.word	0x0800c019
 800c008:	0800c02f 	.word	0x0800c02f
 800c00c:	0800c04d 	.word	0x0800c04d
 800c010:	0800c04d 	.word	0x0800c04d
 800c014:	0800c04d 	.word	0x0800c04d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c018:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c01c:	3308      	adds	r3, #8
 800c01e:	2101      	movs	r1, #1
 800c020:	4618      	mov	r0, r3
 800c022:	f000 ff1d 	bl	800ce60 <RCCEx_PLL2_Config>
 800c026:	4603      	mov	r3, r0
 800c028:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c02c:	e00f      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c032:	3328      	adds	r3, #40	; 0x28
 800c034:	2101      	movs	r1, #1
 800c036:	4618      	mov	r0, r3
 800c038:	f000 ffc4 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c03c:	4603      	mov	r3, r0
 800c03e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c042:	e004      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c04a:	e000      	b.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c04c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c04e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10b      	bne.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c056:	4b6c      	ldr	r3, [pc, #432]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c05a:	f023 0107 	bic.w	r1, r3, #7
 800c05e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c066:	4a68      	ldr	r2, [pc, #416]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c068:	430b      	orrs	r3, r1
 800c06a:	6593      	str	r3, [r2, #88]	; 0x58
 800c06c:	e003      	b.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c06e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c072:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c076:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	f002 0320 	and.w	r3, r2, #32
 800c082:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c086:	2300      	movs	r3, #0
 800c088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c08c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c090:	460b      	mov	r3, r1
 800c092:	4313      	orrs	r3, r2
 800c094:	d055      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c09a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0a2:	d033      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c0a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0a8:	d82c      	bhi.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0ae:	d02f      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0b4:	d826      	bhi.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c0b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0ba:	d02b      	beq.n	800c114 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c0bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c0c0:	d820      	bhi.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0c6:	d012      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0cc:	d81a      	bhi.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d022      	beq.n	800c118 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c0d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0d6:	d115      	bne.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0dc:	3308      	adds	r3, #8
 800c0de:	2100      	movs	r1, #0
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f000 febd 	bl	800ce60 <RCCEx_PLL2_Config>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0ec:	e015      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c0f2:	3328      	adds	r3, #40	; 0x28
 800c0f4:	2102      	movs	r1, #2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f000 ff64 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c102:	e00a      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c10a:	e006      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c10c:	bf00      	nop
 800c10e:	e004      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c110:	bf00      	nop
 800c112:	e002      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c114:	bf00      	nop
 800c116:	e000      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c11a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10b      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c122:	4b39      	ldr	r3, [pc, #228]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c126:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c12e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c132:	4a35      	ldr	r2, [pc, #212]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c134:	430b      	orrs	r3, r1
 800c136:	6553      	str	r3, [r2, #84]	; 0x54
 800c138:	e003      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c13a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c13e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c142:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c14e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c152:	2300      	movs	r3, #0
 800c154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c158:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4313      	orrs	r3, r2
 800c160:	d058      	beq.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c166:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c16a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c16e:	d033      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c170:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c174:	d82c      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c176:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c17a:	d02f      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c17c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c180:	d826      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c182:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c186:	d02b      	beq.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c188:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c18c:	d820      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c18e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c192:	d012      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c194:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c198:	d81a      	bhi.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d022      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c19e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1a2:	d115      	bne.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f000 fe57 	bl	800ce60 <RCCEx_PLL2_Config>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c1b8:	e015      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1be:	3328      	adds	r3, #40	; 0x28
 800c1c0:	2102      	movs	r1, #2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fefe 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c1ce:	e00a      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c1d6:	e006      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1d8:	bf00      	nop
 800c1da:	e004      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1dc:	bf00      	nop
 800c1de:	e002      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1e0:	bf00      	nop
 800c1e2:	e000      	b.n	800c1e6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10e      	bne.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1ee:	4b06      	ldr	r3, [pc, #24]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c1f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c1fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c1fe:	4a02      	ldr	r2, [pc, #8]	; (800c208 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c200:	430b      	orrs	r3, r1
 800c202:	6593      	str	r3, [r2, #88]	; 0x58
 800c204:	e006      	b.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c206:	bf00      	nop
 800c208:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c20c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c210:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c214:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c224:	2300      	movs	r3, #0
 800c226:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c22a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c22e:	460b      	mov	r3, r1
 800c230:	4313      	orrs	r3, r2
 800c232:	d055      	beq.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c238:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c23c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c240:	d033      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c242:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c246:	d82c      	bhi.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c24c:	d02f      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c24e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c252:	d826      	bhi.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c254:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c258:	d02b      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c25a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c25e:	d820      	bhi.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c260:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c264:	d012      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c266:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c26a:	d81a      	bhi.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d022      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c274:	d115      	bne.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c276:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c27a:	3308      	adds	r3, #8
 800c27c:	2100      	movs	r1, #0
 800c27e:	4618      	mov	r0, r3
 800c280:	f000 fdee 	bl	800ce60 <RCCEx_PLL2_Config>
 800c284:	4603      	mov	r3, r0
 800c286:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c28a:	e015      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c28c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c290:	3328      	adds	r3, #40	; 0x28
 800c292:	2102      	movs	r1, #2
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fe95 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c2a0:	e00a      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c2a8:	e006      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2aa:	bf00      	nop
 800c2ac:	e004      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2ae:	bf00      	nop
 800c2b0:	e002      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2b2:	bf00      	nop
 800c2b4:	e000      	b.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c2b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10b      	bne.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c2c0:	4ba1      	ldr	r3, [pc, #644]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c2c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c2d0:	4a9d      	ldr	r2, [pc, #628]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c2d2:	430b      	orrs	r3, r1
 800c2d4:	6593      	str	r3, [r2, #88]	; 0x58
 800c2d6:	e003      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c2dc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c2e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e8:	f002 0308 	and.w	r3, r2, #8
 800c2ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c2f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	d01e      	beq.n	800c33e <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c300:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c30c:	d10c      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c312:	3328      	adds	r3, #40	; 0x28
 800c314:	2102      	movs	r1, #2
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fe54 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d002      	beq.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c328:	4b87      	ldr	r3, [pc, #540]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c32a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c330:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c334:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c338:	4a83      	ldr	r2, [pc, #524]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c33a:	430b      	orrs	r3, r1
 800c33c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c346:	f002 0310 	and.w	r3, r2, #16
 800c34a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c34e:	2300      	movs	r3, #0
 800c350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c354:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c358:	460b      	mov	r3, r1
 800c35a:	4313      	orrs	r3, r2
 800c35c:	d01e      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c36a:	d10c      	bne.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c36c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c370:	3328      	adds	r3, #40	; 0x28
 800c372:	2102      	movs	r1, #2
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fe25 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d002      	beq.n	800c386 <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c386:	4b70      	ldr	r3, [pc, #448]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c38a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c38e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c392:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c396:	4a6c      	ldr	r2, [pc, #432]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c398:	430b      	orrs	r3, r1
 800c39a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c39c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c3a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c3b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	d03e      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c3c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3c8:	d022      	beq.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c3ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ce:	d81b      	bhi.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d003      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c3d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3d8:	d00b      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c3da:	e015      	b.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	2100      	movs	r1, #0
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f000 fd3b 	bl	800ce60 <RCCEx_PLL2_Config>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3f0:	e00f      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c3f6:	3328      	adds	r3, #40	; 0x28
 800c3f8:	2102      	movs	r1, #2
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 fde2 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c400:	4603      	mov	r3, r0
 800c402:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c406:	e004      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c40e:	e000      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c412:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10b      	bne.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c41a:	4b4b      	ldr	r3, [pc, #300]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c41c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c41e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c422:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c426:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c42a:	4a47      	ldr	r2, [pc, #284]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c42c:	430b      	orrs	r3, r1
 800c42e:	6593      	str	r3, [r2, #88]	; 0x58
 800c430:	e003      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c432:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c436:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c43a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c446:	67bb      	str	r3, [r7, #120]	; 0x78
 800c448:	2300      	movs	r3, #0
 800c44a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c44c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c450:	460b      	mov	r3, r1
 800c452:	4313      	orrs	r3, r2
 800c454:	d03b      	beq.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c45e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c462:	d01f      	beq.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c464:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c468:	d818      	bhi.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c46e:	d003      	beq.n	800c478 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c474:	d007      	beq.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c476:	e011      	b.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c478:	4b33      	ldr	r3, [pc, #204]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c47c:	4a32      	ldr	r2, [pc, #200]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c484:	e00f      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c486:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c48a:	3328      	adds	r3, #40	; 0x28
 800c48c:	2101      	movs	r1, #1
 800c48e:	4618      	mov	r0, r3
 800c490:	f000 fd98 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c494:	4603      	mov	r3, r0
 800c496:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c49a:	e004      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c4a2:	e000      	b.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4a6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4ae:	4b26      	ldr	r3, [pc, #152]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c4be:	4a22      	ldr	r2, [pc, #136]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4c0:	430b      	orrs	r3, r1
 800c4c2:	6553      	str	r3, [r2, #84]	; 0x54
 800c4c4:	e003      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c4ca:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c4da:	673b      	str	r3, [r7, #112]	; 0x70
 800c4dc:	2300      	movs	r3, #0
 800c4de:	677b      	str	r3, [r7, #116]	; 0x74
 800c4e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	d034      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c4ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d003      	beq.n	800c4fc <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f8:	d007      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c4fa:	e011      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4fc:	4b12      	ldr	r3, [pc, #72]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	4a11      	ldr	r2, [pc, #68]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c508:	e00e      	b.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c50a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c50e:	3308      	adds	r3, #8
 800c510:	2102      	movs	r1, #2
 800c512:	4618      	mov	r0, r3
 800c514:	f000 fca4 	bl	800ce60 <RCCEx_PLL2_Config>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c51e:	e003      	b.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c526:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c528:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d10d      	bne.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c534:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c538:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53e:	4a02      	ldr	r2, [pc, #8]	; (800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c540:	430b      	orrs	r3, r1
 800c542:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c544:	e006      	b.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c546:	bf00      	nop
 800c548:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c54c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c550:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c554:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c560:	66bb      	str	r3, [r7, #104]	; 0x68
 800c562:	2300      	movs	r3, #0
 800c564:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c566:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c56a:	460b      	mov	r3, r1
 800c56c:	4313      	orrs	r3, r2
 800c56e:	d00c      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c570:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c574:	3328      	adds	r3, #40	; 0x28
 800c576:	2102      	movs	r1, #2
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fd23 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c584:	2301      	movs	r3, #1
 800c586:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c592:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c596:	663b      	str	r3, [r7, #96]	; 0x60
 800c598:	2300      	movs	r3, #0
 800c59a:	667b      	str	r3, [r7, #100]	; 0x64
 800c59c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	d038      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c5a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5b2:	d018      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c5b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5b8:	d811      	bhi.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c5ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5be:	d014      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5c4:	d80b      	bhi.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d011      	beq.n	800c5ee <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5ce:	d106      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5d0:	4bc3      	ldr	r3, [pc, #780]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d4:	4ac2      	ldr	r2, [pc, #776]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c5dc:	e008      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800c5e4:	e004      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5e6:	bf00      	nop
 800c5e8:	e002      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5ea:	bf00      	nop
 800c5ec:	e000      	b.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c5ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d10b      	bne.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5f8:	4bb9      	ldr	r3, [pc, #740]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c5fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c600:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c608:	4ab5      	ldr	r2, [pc, #724]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c60a:	430b      	orrs	r3, r1
 800c60c:	6553      	str	r3, [r2, #84]	; 0x54
 800c60e:	e003      	b.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c610:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c614:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c624:	65bb      	str	r3, [r7, #88]	; 0x58
 800c626:	2300      	movs	r3, #0
 800c628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c62a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c62e:	460b      	mov	r3, r1
 800c630:	4313      	orrs	r3, r2
 800c632:	d009      	beq.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c634:	4baa      	ldr	r3, [pc, #680]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c642:	4aa7      	ldr	r2, [pc, #668]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c644:	430b      	orrs	r3, r1
 800c646:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c650:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c654:	653b      	str	r3, [r7, #80]	; 0x50
 800c656:	2300      	movs	r3, #0
 800c658:	657b      	str	r3, [r7, #84]	; 0x54
 800c65a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c65e:	460b      	mov	r3, r1
 800c660:	4313      	orrs	r3, r2
 800c662:	d009      	beq.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c664:	4b9e      	ldr	r3, [pc, #632]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c668:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c66c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c672:	4a9b      	ldr	r2, [pc, #620]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c674:	430b      	orrs	r3, r1
 800c676:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c678:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c680:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800c684:	64bb      	str	r3, [r7, #72]	; 0x48
 800c686:	2300      	movs	r3, #0
 800c688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c68a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c68e:	460b      	mov	r3, r1
 800c690:	4313      	orrs	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c694:	4b92      	ldr	r3, [pc, #584]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c698:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 800c69c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6a2:	4a8f      	ldr	r2, [pc, #572]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c6b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	647b      	str	r3, [r7, #68]	; 0x44
 800c6ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	d00e      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c6c4:	4b86      	ldr	r3, [pc, #536]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	4a85      	ldr	r2, [pc, #532]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c6ce:	6113      	str	r3, [r2, #16]
 800c6d0:	4b83      	ldr	r3, [pc, #524]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6d2:	6919      	ldr	r1, [r3, #16]
 800c6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6d8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c6dc:	4a80      	ldr	r2, [pc, #512]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c6de:	430b      	orrs	r3, r1
 800c6e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c6e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c6ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	d009      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c6fe:	4b78      	ldr	r3, [pc, #480]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c702:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c70c:	4a74      	ldr	r2, [pc, #464]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c70e:	430b      	orrs	r3, r1
 800c710:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c71e:	633b      	str	r3, [r7, #48]	; 0x30
 800c720:	2300      	movs	r3, #0
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
 800c724:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c728:	460b      	mov	r3, r1
 800c72a:	4313      	orrs	r3, r2
 800c72c:	d00a      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c72e:	4b6c      	ldr	r3, [pc, #432]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c732:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c73a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c73e:	4a68      	ldr	r2, [pc, #416]	; (800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c740:	430b      	orrs	r3, r1
 800c742:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	2100      	movs	r1, #0
 800c74e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c750:	f003 0301 	and.w	r3, r3, #1
 800c754:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c756:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c75a:	460b      	mov	r3, r1
 800c75c:	4313      	orrs	r3, r2
 800c75e:	d011      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c760:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c764:	3308      	adds	r3, #8
 800c766:	2100      	movs	r1, #0
 800c768:	4618      	mov	r0, r3
 800c76a:	f000 fb79 	bl	800ce60 <RCCEx_PLL2_Config>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c774:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c780:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c784:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	2100      	movs	r1, #0
 800c78e:	6239      	str	r1, [r7, #32]
 800c790:	f003 0302 	and.w	r3, r3, #2
 800c794:	627b      	str	r3, [r7, #36]	; 0x24
 800c796:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	d011      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	2101      	movs	r1, #1
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fb59 	bl	800ce60 <RCCEx_PLL2_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c7c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	61b9      	str	r1, [r7, #24]
 800c7d0:	f003 0304 	and.w	r3, r3, #4
 800c7d4:	61fb      	str	r3, [r7, #28]
 800c7d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d011      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f000 fb39 	bl	800ce60 <RCCEx_PLL2_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c7f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7fc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c800:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	2100      	movs	r1, #0
 800c80e:	6139      	str	r1, [r7, #16]
 800c810:	f003 0308 	and.w	r3, r3, #8
 800c814:	617b      	str	r3, [r7, #20]
 800c816:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	d011      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c820:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c824:	3328      	adds	r3, #40	; 0x28
 800c826:	2100      	movs	r1, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f000 fbcb 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800c834:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c840:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	2100      	movs	r1, #0
 800c84e:	60b9      	str	r1, [r7, #8]
 800c850:	f003 0310 	and.w	r3, r3, #16
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c85a:	460b      	mov	r3, r1
 800c85c:	4313      	orrs	r3, r2
 800c85e:	d011      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c860:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c864:	3328      	adds	r3, #40	; 0x28
 800c866:	2101      	movs	r1, #1
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fbab 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c874:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c880:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	2100      	movs	r1, #0
 800c88e:	6039      	str	r1, [r7, #0]
 800c890:	f003 0320 	and.w	r3, r3, #32
 800c894:	607b      	str	r3, [r7, #4]
 800c896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c89a:	460b      	mov	r3, r1
 800c89c:	4313      	orrs	r3, r2
 800c89e:	d011      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800c8a4:	3328      	adds	r3, #40	; 0x28
 800c8a6:	2102      	movs	r1, #2
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fb8b 	bl	800cfc4 <RCCEx_PLL3_Config>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800c8b4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800c8c0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800c8c4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d101      	bne.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	e000      	b.n	800c8d2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8de:	bf00      	nop
 800c8e0:	58024400 	.word	0x58024400

0800c8e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800c8e8:	f7fe fde2 	bl	800b4b0 <HAL_RCC_GetHCLKFreq>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	4b06      	ldr	r3, [pc, #24]	; (800c908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	091b      	lsrs	r3, r3, #4
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	4904      	ldr	r1, [pc, #16]	; (800c90c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8fa:	5ccb      	ldrb	r3, [r1, r3]
 800c8fc:	f003 031f 	and.w	r3, r3, #31
 800c900:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800c904:	4618      	mov	r0, r3
 800c906:	bd80      	pop	{r7, pc}
 800c908:	58024400 	.word	0x58024400
 800c90c:	08010c84 	.word	0x08010c84

0800c910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c910:	b480      	push	{r7}
 800c912:	b089      	sub	sp, #36	; 0x24
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c918:	4ba1      	ldr	r3, [pc, #644]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91c:	f003 0303 	and.w	r3, r3, #3
 800c920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c922:	4b9f      	ldr	r3, [pc, #636]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c926:	0b1b      	lsrs	r3, r3, #12
 800c928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c92c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c92e:	4b9c      	ldr	r3, [pc, #624]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c932:	091b      	lsrs	r3, r3, #4
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c93a:	4b99      	ldr	r3, [pc, #612]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c93e:	08db      	lsrs	r3, r3, #3
 800c940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	fb02 f303 	mul.w	r3, r2, r3
 800c94a:	ee07 3a90 	vmov	s15, r3
 800c94e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 8111 	beq.w	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b02      	cmp	r3, #2
 800c962:	f000 8083 	beq.w	800ca6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	f200 80a1 	bhi.w	800cab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d056      	beq.n	800ca28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c97a:	e099      	b.n	800cab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c97c:	4b88      	ldr	r3, [pc, #544]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0320 	and.w	r3, r3, #32
 800c984:	2b00      	cmp	r3, #0
 800c986:	d02d      	beq.n	800c9e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c988:	4b85      	ldr	r3, [pc, #532]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	08db      	lsrs	r3, r3, #3
 800c98e:	f003 0303 	and.w	r3, r3, #3
 800c992:	4a84      	ldr	r2, [pc, #528]	; (800cba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c994:	fa22 f303 	lsr.w	r3, r2, r3
 800c998:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	ee07 3a90 	vmov	s15, r3
 800c9a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	ee07 3a90 	vmov	s15, r3
 800c9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9b2:	4b7b      	ldr	r3, [pc, #492]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ba:	ee07 3a90 	vmov	s15, r3
 800c9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9e2:	e087      	b.n	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9f6:	4b6a      	ldr	r3, [pc, #424]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9fe:	ee07 3a90 	vmov	s15, r3
 800ca02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca26:	e065      	b.n	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca3a:	4b59      	ldr	r3, [pc, #356]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca6a:	e043      	b.n	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	ee07 3a90 	vmov	s15, r3
 800ca72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca7e:	4b48      	ldr	r3, [pc, #288]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca86:	ee07 3a90 	vmov	s15, r3
 800ca8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca92:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caae:	e021      	b.n	800caf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	ee07 3a90 	vmov	s15, r3
 800cab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac2:	4b37      	ldr	r3, [pc, #220]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caca:	ee07 3a90 	vmov	s15, r3
 800cace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800caf4:	4b2a      	ldr	r3, [pc, #168]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf8:	0a5b      	lsrs	r3, r3, #9
 800cafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cafe:	ee07 3a90 	vmov	s15, r3
 800cb02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb0e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb1a:	ee17 2a90 	vmov	r2, s15
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb22:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	0c1b      	lsrs	r3, r3, #16
 800cb28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb2c:	ee07 3a90 	vmov	s15, r3
 800cb30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb38:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb3c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb48:	ee17 2a90 	vmov	r2, s15
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cb50:	4b13      	ldr	r3, [pc, #76]	; (800cba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb54:	0e1b      	lsrs	r3, r3, #24
 800cb56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5a:	ee07 3a90 	vmov	s15, r3
 800cb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb76:	ee17 2a90 	vmov	r2, s15
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb7e:	e008      	b.n	800cb92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	609a      	str	r2, [r3, #8]
}
 800cb92:	bf00      	nop
 800cb94:	3724      	adds	r7, #36	; 0x24
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr
 800cb9e:	bf00      	nop
 800cba0:	58024400 	.word	0x58024400
 800cba4:	03d09000 	.word	0x03d09000
 800cba8:	46000000 	.word	0x46000000
 800cbac:	4c742400 	.word	0x4c742400
 800cbb0:	4a742400 	.word	0x4a742400
 800cbb4:	4bb71b00 	.word	0x4bb71b00

0800cbb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b089      	sub	sp, #36	; 0x24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbc0:	4ba1      	ldr	r3, [pc, #644]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc4:	f003 0303 	and.w	r3, r3, #3
 800cbc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cbca:	4b9f      	ldr	r3, [pc, #636]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	0d1b      	lsrs	r3, r3, #20
 800cbd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cbd6:	4b9c      	ldr	r3, [pc, #624]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbda:	0a1b      	lsrs	r3, r3, #8
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cbe2:	4b99      	ldr	r3, [pc, #612]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe6:	08db      	lsrs	r3, r3, #3
 800cbe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbec:	693a      	ldr	r2, [r7, #16]
 800cbee:	fb02 f303 	mul.w	r3, r2, r3
 800cbf2:	ee07 3a90 	vmov	s15, r3
 800cbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	f000 8111 	beq.w	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	2b02      	cmp	r3, #2
 800cc0a:	f000 8083 	beq.w	800cd14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	f200 80a1 	bhi.w	800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d003      	beq.n	800cc24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	2b01      	cmp	r3, #1
 800cc20:	d056      	beq.n	800ccd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc22:	e099      	b.n	800cd58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc24:	4b88      	ldr	r3, [pc, #544]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f003 0320 	and.w	r3, r3, #32
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d02d      	beq.n	800cc8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc30:	4b85      	ldr	r3, [pc, #532]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	08db      	lsrs	r3, r3, #3
 800cc36:	f003 0303 	and.w	r3, r3, #3
 800cc3a:	4a84      	ldr	r2, [pc, #528]	; (800ce4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	ee07 3a90 	vmov	s15, r3
 800cc48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	ee07 3a90 	vmov	s15, r3
 800cc52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc5a:	4b7b      	ldr	r3, [pc, #492]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc62:	ee07 3a90 	vmov	s15, r3
 800cc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc8a:	e087      	b.n	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc9e:	4b6a      	ldr	r3, [pc, #424]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cca6:	ee07 3a90 	vmov	s15, r3
 800ccaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccae:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccce:	e065      	b.n	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	ee07 3a90 	vmov	s15, r3
 800ccd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ccde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cce2:	4b59      	ldr	r3, [pc, #356]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd12:	e043      	b.n	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	ee07 3a90 	vmov	s15, r3
 800cd1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd26:	4b48      	ldr	r3, [pc, #288]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd2e:	ee07 3a90 	vmov	s15, r3
 800cd32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd36:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd56:	e021      	b.n	800cd9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	ee07 3a90 	vmov	s15, r3
 800cd5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd6a:	4b37      	ldr	r3, [pc, #220]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd9c:	4b2a      	ldr	r3, [pc, #168]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda0:	0a5b      	lsrs	r3, r3, #9
 800cda2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdc2:	ee17 2a90 	vmov	r2, s15
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cdca:	4b1f      	ldr	r3, [pc, #124]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	0c1b      	lsrs	r3, r3, #16
 800cdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdd4:	ee07 3a90 	vmov	s15, r3
 800cdd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cde0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cde4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cde8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf0:	ee17 2a90 	vmov	r2, s15
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cdf8:	4b13      	ldr	r3, [pc, #76]	; (800ce48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfc:	0e1b      	lsrs	r3, r3, #24
 800cdfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce12:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce1e:	ee17 2a90 	vmov	r2, s15
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce26:	e008      	b.n	800ce3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	609a      	str	r2, [r3, #8]
}
 800ce3a:	bf00      	nop
 800ce3c:	3724      	adds	r7, #36	; 0x24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	58024400 	.word	0x58024400
 800ce4c:	03d09000 	.word	0x03d09000
 800ce50:	46000000 	.word	0x46000000
 800ce54:	4c742400 	.word	0x4c742400
 800ce58:	4a742400 	.word	0x4a742400
 800ce5c:	4bb71b00 	.word	0x4bb71b00

0800ce60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b084      	sub	sp, #16
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce6e:	4b53      	ldr	r3, [pc, #332]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800ce70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce72:	f003 0303 	and.w	r3, r3, #3
 800ce76:	2b03      	cmp	r3, #3
 800ce78:	d101      	bne.n	800ce7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e099      	b.n	800cfb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce7e:	4b4f      	ldr	r3, [pc, #316]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a4e      	ldr	r2, [pc, #312]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800ce84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce8a:	f7f7 fa9d 	bl	80043c8 <HAL_GetTick>
 800ce8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce90:	e008      	b.n	800cea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce92:	f7f7 fa99 	bl	80043c8 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d901      	bls.n	800cea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	e086      	b.n	800cfb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cea4:	4b45      	ldr	r3, [pc, #276]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d1f0      	bne.n	800ce92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ceb0:	4b42      	ldr	r3, [pc, #264]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800ceb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	031b      	lsls	r3, r3, #12
 800cebe:	493f      	ldr	r1, [pc, #252]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cec0:	4313      	orrs	r3, r2
 800cec2:	628b      	str	r3, [r1, #40]	; 0x28
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	3b01      	subs	r3, #1
 800ced4:	025b      	lsls	r3, r3, #9
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	431a      	orrs	r2, r3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	68db      	ldr	r3, [r3, #12]
 800cede:	3b01      	subs	r3, #1
 800cee0:	041b      	lsls	r3, r3, #16
 800cee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cee6:	431a      	orrs	r2, r3
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	061b      	lsls	r3, r3, #24
 800cef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cef4:	4931      	ldr	r1, [pc, #196]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cef6:	4313      	orrs	r3, r2
 800cef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cefa:	4b30      	ldr	r3, [pc, #192]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cefc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	492d      	ldr	r1, [pc, #180]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf08:	4313      	orrs	r3, r2
 800cf0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cf0c:	4b2b      	ldr	r3, [pc, #172]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf10:	f023 0220 	bic.w	r2, r3, #32
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	4928      	ldr	r1, [pc, #160]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cf1e:	4b27      	ldr	r3, [pc, #156]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf22:	4a26      	ldr	r2, [pc, #152]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf24:	f023 0310 	bic.w	r3, r3, #16
 800cf28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cf2a:	4b24      	ldr	r3, [pc, #144]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf2e:	4b24      	ldr	r3, [pc, #144]	; (800cfc0 <RCCEx_PLL2_Config+0x160>)
 800cf30:	4013      	ands	r3, r2
 800cf32:	687a      	ldr	r2, [r7, #4]
 800cf34:	69d2      	ldr	r2, [r2, #28]
 800cf36:	00d2      	lsls	r2, r2, #3
 800cf38:	4920      	ldr	r1, [pc, #128]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf3e:	4b1f      	ldr	r3, [pc, #124]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	4a1e      	ldr	r2, [pc, #120]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf44:	f043 0310 	orr.w	r3, r3, #16
 800cf48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d106      	bne.n	800cf5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf50:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf54:	4a19      	ldr	r2, [pc, #100]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf5c:	e00f      	b.n	800cf7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d106      	bne.n	800cf72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf64:	4b15      	ldr	r3, [pc, #84]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf68:	4a14      	ldr	r2, [pc, #80]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf70:	e005      	b.n	800cf7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf72:	4b12      	ldr	r3, [pc, #72]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	4a11      	ldr	r2, [pc, #68]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf7e:	4b0f      	ldr	r3, [pc, #60]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	4a0e      	ldr	r2, [pc, #56]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cf84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf8a:	f7f7 fa1d 	bl	80043c8 <HAL_GetTick>
 800cf8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf90:	e008      	b.n	800cfa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf92:	f7f7 fa19 	bl	80043c8 <HAL_GetTick>
 800cf96:	4602      	mov	r2, r0
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	1ad3      	subs	r3, r2, r3
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d901      	bls.n	800cfa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfa0:	2303      	movs	r3, #3
 800cfa2:	e006      	b.n	800cfb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cfa4:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <RCCEx_PLL2_Config+0x15c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0f0      	beq.n	800cf92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3710      	adds	r7, #16
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	58024400 	.word	0x58024400
 800cfc0:	ffff0007 	.word	0xffff0007

0800cfc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cfd2:	4b53      	ldr	r3, [pc, #332]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800cfd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd6:	f003 0303 	and.w	r3, r3, #3
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d101      	bne.n	800cfe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	e099      	b.n	800d116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfe2:	4b4f      	ldr	r3, [pc, #316]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4a4e      	ldr	r2, [pc, #312]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfee:	f7f7 f9eb 	bl	80043c8 <HAL_GetTick>
 800cff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cff4:	e008      	b.n	800d008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cff6:	f7f7 f9e7 	bl	80043c8 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	2b02      	cmp	r3, #2
 800d002:	d901      	bls.n	800d008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d004:	2303      	movs	r3, #3
 800d006:	e086      	b.n	800d116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d008:	4b45      	ldr	r3, [pc, #276]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d1f0      	bne.n	800cff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d014:	4b42      	ldr	r3, [pc, #264]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	051b      	lsls	r3, r3, #20
 800d022:	493f      	ldr	r1, [pc, #252]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d024:	4313      	orrs	r3, r2
 800d026:	628b      	str	r3, [r1, #40]	; 0x28
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	3b01      	subs	r3, #1
 800d02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	3b01      	subs	r3, #1
 800d038:	025b      	lsls	r3, r3, #9
 800d03a:	b29b      	uxth	r3, r3
 800d03c:	431a      	orrs	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68db      	ldr	r3, [r3, #12]
 800d042:	3b01      	subs	r3, #1
 800d044:	041b      	lsls	r3, r3, #16
 800d046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d04a:	431a      	orrs	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	3b01      	subs	r3, #1
 800d052:	061b      	lsls	r3, r3, #24
 800d054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d058:	4931      	ldr	r1, [pc, #196]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d05a:	4313      	orrs	r3, r2
 800d05c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d05e:	4b30      	ldr	r3, [pc, #192]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	492d      	ldr	r1, [pc, #180]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d06c:	4313      	orrs	r3, r2
 800d06e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d070:	4b2b      	ldr	r3, [pc, #172]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	4928      	ldr	r1, [pc, #160]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d07e:	4313      	orrs	r3, r2
 800d080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d082:	4b27      	ldr	r3, [pc, #156]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d086:	4a26      	ldr	r2, [pc, #152]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d08e:	4b24      	ldr	r3, [pc, #144]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d092:	4b24      	ldr	r3, [pc, #144]	; (800d124 <RCCEx_PLL3_Config+0x160>)
 800d094:	4013      	ands	r3, r2
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	69d2      	ldr	r2, [r2, #28]
 800d09a:	00d2      	lsls	r2, r2, #3
 800d09c:	4920      	ldr	r1, [pc, #128]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d0a2:	4b1f      	ldr	r3, [pc, #124]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a6:	4a1e      	ldr	r2, [pc, #120]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d106      	bne.n	800d0c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d0b4:	4b1a      	ldr	r3, [pc, #104]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0b8:	4a19      	ldr	r2, [pc, #100]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0c0:	e00f      	b.n	800d0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d106      	bne.n	800d0d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d0c8:	4b15      	ldr	r3, [pc, #84]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	4a14      	ldr	r2, [pc, #80]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0d4:	e005      	b.n	800d0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d0d6:	4b12      	ldr	r3, [pc, #72]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0da:	4a11      	ldr	r2, [pc, #68]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0e2:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4a0e      	ldr	r2, [pc, #56]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0ee:	f7f7 f96b 	bl	80043c8 <HAL_GetTick>
 800d0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0f4:	e008      	b.n	800d108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0f6:	f7f7 f967 	bl	80043c8 <HAL_GetTick>
 800d0fa:	4602      	mov	r2, r0
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	2b02      	cmp	r3, #2
 800d102:	d901      	bls.n	800d108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d104:	2303      	movs	r3, #3
 800d106:	e006      	b.n	800d116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d108:	4b05      	ldr	r3, [pc, #20]	; (800d120 <RCCEx_PLL3_Config+0x15c>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d110:	2b00      	cmp	r3, #0
 800d112:	d0f0      	beq.n	800d0f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d114:	7bfb      	ldrb	r3, [r7, #15]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	58024400 	.word	0x58024400
 800d124:	ffff0007 	.word	0xffff0007

0800d128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d074      	beq.n	800d224 <HAL_RTC_Init+0xfc>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d106      	bne.n	800d154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f7f6 f834 	bl	80031bc <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2202      	movs	r2, #2
 800d158:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	f003 0310 	and.w	r3, r3, #16
 800d166:	2b10      	cmp	r3, #16
 800d168:	d053      	beq.n	800d212 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	22ca      	movs	r2, #202	; 0xca
 800d170:	625a      	str	r2, [r3, #36]	; 0x24
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2253      	movs	r2, #83	; 0x53
 800d178:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f87e 	bl	800d27c <RTC_EnterInitMode>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d124      	bne.n	800d1d4 <HAL_RTC_Init+0xac>
      {
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6999      	ldr	r1, [r3, #24]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681a      	ldr	r2, [r3, #0]
 800d194:	4b26      	ldr	r3, [pc, #152]	; (800d230 <HAL_RTC_Init+0x108>)
 800d196:	400b      	ands	r3, r1
 800d198:	6193      	str	r3, [r2, #24]
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6999      	ldr	r1, [r3, #24]
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	430a      	orrs	r2, r1
 800d1b6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	0419      	lsls	r1, r3, #16
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	68da      	ldr	r2, [r3, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	430a      	orrs	r2, r1
 800d1c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f000 f88c 	bl	800d2e8 <RTC_ExitInitMode>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d116      	bne.n	800d208 <HAL_RTC_Init+0xe0>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	699a      	ldr	r2, [r3, #24]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800d1e8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6999      	ldr	r1, [r3, #24]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6a1a      	ldr	r2, [r3, #32]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	69db      	ldr	r3, [r3, #28]
 800d1f8:	431a      	orrs	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	695b      	ldr	r3, [r3, #20]
 800d1fe:	431a      	orrs	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	430a      	orrs	r2, r1
 800d206:	619a      	str	r2, [r3, #24]
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	22ff      	movs	r2, #255	; 0xff
 800d20e:	625a      	str	r2, [r3, #36]	; 0x24
 800d210:	e001      	b.n	800d216 <HAL_RTC_Init+0xee>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d216:	7bfb      	ldrb	r3, [r7, #15]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d103      	bne.n	800d224 <HAL_RTC_Init+0xfc>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  /* return status */
  return status;
 800d224:	7bfb      	ldrb	r3, [r7, #15]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}
 800d22e:	bf00      	nop
 800d230:	fb8fffbf 	.word	0xfb8fffbf

0800d234 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a0d      	ldr	r2, [pc, #52]	; (800d278 <HAL_RTC_WaitForSynchro+0x44>)
 800d242:	60da      	str	r2, [r3, #12]
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d244:	f7f7 f8c0 	bl	80043c8 <HAL_GetTick>
 800d248:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d24a:	e009      	b.n	800d260 <HAL_RTC_WaitForSynchro+0x2c>
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d24c:	f7f7 f8bc 	bl	80043c8 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d25a:	d901      	bls.n	800d260 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d25c:	2303      	movs	r3, #3
 800d25e:	e007      	b.n	800d270 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68db      	ldr	r3, [r3, #12]
 800d266:	f003 0320 	and.w	r3, r3, #32
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0ee      	beq.n	800d24c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d26e:	2300      	movs	r3, #0
}
 800d270:	4618      	mov	r0, r3
 800d272:	3710      	adds	r7, #16
 800d274:	46bd      	mov	sp, r7
 800d276:	bd80      	pop	{r7, pc}
 800d278:	0001005f 	.word	0x0001005f

0800d27c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
  /* Check if the Initialization mode is set */
#if defined(TAMP)
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d292:	2b00      	cmp	r3, #0
 800d294:	d123      	bne.n	800d2de <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	68da      	ldr	r2, [r3, #12]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d2a4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d2a6:	f7f7 f88f 	bl	80043c8 <HAL_GetTick>
 800d2aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d2ac:	e00d      	b.n	800d2ca <RTC_EnterInitMode+0x4e>

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d2ae:	f7f7 f88b 	bl	80043c8 <HAL_GetTick>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	1ad3      	subs	r3, r2, r3
 800d2b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2bc:	d905      	bls.n	800d2ca <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800d2be:	2303      	movs	r3, #3
 800d2c0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2203      	movs	r2, #3
 800d2c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	68db      	ldr	r3, [r3, #12]
 800d2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d102      	bne.n	800d2de <RTC_EnterInitMode+0x62>
 800d2d8:	7bfb      	ldrb	r3, [r7, #15]
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d1e7      	bne.n	800d2ae <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800d2de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3710      	adds	r7, #16
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b084      	sub	sp, #16
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800d2f4:	4b1a      	ldr	r3, [pc, #104]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a19      	ldr	r2, [pc, #100]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d2fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2fe:	60d3      	str	r3, [r2, #12]
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d300:	4b17      	ldr	r3, [pc, #92]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d302:	699b      	ldr	r3, [r3, #24]
 800d304:	f003 0320 	and.w	r3, r3, #32
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d10c      	bne.n	800d326 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f7ff ff91 	bl	800d234 <HAL_RTC_WaitForSynchro>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01e      	beq.n	800d356 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2203      	movs	r2, #3
 800d31c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d320:	2303      	movs	r3, #3
 800d322:	73fb      	strb	r3, [r7, #15]
 800d324:	e017      	b.n	800d356 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d326:	4b0e      	ldr	r3, [pc, #56]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d328:	699b      	ldr	r3, [r3, #24]
 800d32a:	4a0d      	ldr	r2, [pc, #52]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d32c:	f023 0320 	bic.w	r3, r3, #32
 800d330:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff ff7e 	bl	800d234 <HAL_RTC_WaitForSynchro>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d005      	beq.n	800d34a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2203      	movs	r2, #3
 800d342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800d346:	2303      	movs	r3, #3
 800d348:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d34a:	4b05      	ldr	r3, [pc, #20]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	4a04      	ldr	r2, [pc, #16]	; (800d360 <RTC_ExitInitMode+0x78>)
 800d350:	f043 0320 	orr.w	r3, r3, #32
 800d354:	6193      	str	r3, [r2, #24]
  }

  return status;
 800d356:	7bfb      	ldrb	r3, [r7, #15]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}
 800d360:	58004000 	.word	0x58004000

0800d364 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	e02b      	b.n	800d3d0 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	d106      	bne.n	800d392 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7f3 fcc3 	bl	8000d18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2202      	movs	r2, #2
 800d396:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	3304      	adds	r3, #4
 800d3a2:	4619      	mov	r1, r3
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	f001 ffdf 	bl	800f368 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6818      	ldr	r0, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	6839      	ldr	r1, [r7, #0]
 800d3b6:	f002 f833 	bl	800f420 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800d3ba:	4b07      	ldr	r3, [pc, #28]	; (800d3d8 <HAL_SDRAM_Init+0x74>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	4a06      	ldr	r2, [pc, #24]	; (800d3d8 <HAL_SDRAM_Init+0x74>)
 800d3c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d3c4:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3708      	adds	r7, #8
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}
 800d3d8:	52004000 	.word	0x52004000

0800d3dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b086      	sub	sp, #24
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d3ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800d3f0:	7dfb      	ldrb	r3, [r7, #23]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	d101      	bne.n	800d3fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800d3f6:	2302      	movs	r3, #2
 800d3f8:	e021      	b.n	800d43e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d002      	beq.n	800d406 <HAL_SDRAM_SendCommand+0x2a>
 800d400:	7dfb      	ldrb	r3, [r7, #23]
 800d402:	2b05      	cmp	r3, #5
 800d404:	d118      	bne.n	800d438 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2202      	movs	r2, #2
 800d40a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	68b9      	ldr	r1, [r7, #8]
 800d416:	4618      	mov	r0, r3
 800d418:	f002 f86c 	bl	800f4f4 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b02      	cmp	r3, #2
 800d422:	d104      	bne.n	800d42e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2205      	movs	r2, #5
 800d428:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d42c:	e006      	b.n	800d43c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2201      	movs	r2, #1
 800d432:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800d436:	e001      	b.n	800d43c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800d438:	2301      	movs	r3, #1
 800d43a:	e000      	b.n	800d43e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800d43c:	2300      	movs	r3, #0
}
 800d43e:	4618      	mov	r0, r3
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800d446:	b580      	push	{r7, lr}
 800d448:	b082      	sub	sp, #8
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
 800d44e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d456:	b2db      	uxtb	r3, r3
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d101      	bne.n	800d460 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800d45c:	2302      	movs	r3, #2
 800d45e:	e016      	b.n	800d48e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d10f      	bne.n	800d48c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2202      	movs	r2, #2
 800d470:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f002 f85e 	bl	800f53c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800d488:	2300      	movs	r3, #0
 800d48a:	e000      	b.n	800d48e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3708      	adds	r7, #8
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}

0800d496 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d496:	b580      	push	{r7, lr}
 800d498:	b082      	sub	sp, #8
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d101      	bne.n	800d4a8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e042      	b.n	800d52e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d106      	bne.n	800d4c0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f7f6 fe62 	bl	8004184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2224      	movs	r2, #36	; 0x24
 800d4c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681a      	ldr	r2, [r3, #0]
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f022 0201 	bic.w	r2, r2, #1
 800d4d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 fd5d 	bl	800df98 <UART_SetConfig>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d101      	bne.n	800d4e8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	e022      	b.n	800d52e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d002      	beq.n	800d4f6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f001 fbbd 	bl	800ec70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d504:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	689a      	ldr	r2, [r3, #8]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d514:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f042 0201 	orr.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f001 fc44 	bl	800edb4 <UART_CheckIdleState>
 800d52c:	4603      	mov	r3, r0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b08a      	sub	sp, #40	; 0x28
 800d53a:	af02      	add	r7, sp, #8
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	603b      	str	r3, [r7, #0]
 800d542:	4613      	mov	r3, r2
 800d544:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d54c:	2b20      	cmp	r3, #32
 800d54e:	d17b      	bne.n	800d648 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <HAL_UART_Transmit+0x26>
 800d556:	88fb      	ldrh	r3, [r7, #6]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d101      	bne.n	800d560 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d55c:	2301      	movs	r3, #1
 800d55e:	e074      	b.n	800d64a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	2200      	movs	r2, #0
 800d564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2221      	movs	r2, #33	; 0x21
 800d56c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d570:	f7f6 ff2a 	bl	80043c8 <HAL_GetTick>
 800d574:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	88fa      	ldrh	r2, [r7, #6]
 800d57a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	88fa      	ldrh	r2, [r7, #6]
 800d582:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	689b      	ldr	r3, [r3, #8]
 800d58a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d58e:	d108      	bne.n	800d5a2 <HAL_UART_Transmit+0x6c>
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	691b      	ldr	r3, [r3, #16]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d104      	bne.n	800d5a2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d598:	2300      	movs	r3, #0
 800d59a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	61bb      	str	r3, [r7, #24]
 800d5a0:	e003      	b.n	800d5aa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d5a2:	68bb      	ldr	r3, [r7, #8]
 800d5a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d5aa:	e030      	b.n	800d60e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	9300      	str	r3, [sp, #0]
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	2180      	movs	r1, #128	; 0x80
 800d5b6:	68f8      	ldr	r0, [r7, #12]
 800d5b8:	f001 fca6 	bl	800ef08 <UART_WaitOnFlagUntilTimeout>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2220      	movs	r2, #32
 800d5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e03d      	b.n	800d64a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10b      	bne.n	800d5ec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d5d4:	69bb      	ldr	r3, [r7, #24]
 800d5d6:	881b      	ldrh	r3, [r3, #0]
 800d5d8:	461a      	mov	r2, r3
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d5e4:	69bb      	ldr	r3, [r7, #24]
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	61bb      	str	r3, [r7, #24]
 800d5ea:	e007      	b.n	800d5fc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	781a      	ldrb	r2, [r3, #0]
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d602:	b29b      	uxth	r3, r3
 800d604:	3b01      	subs	r3, #1
 800d606:	b29a      	uxth	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d614:	b29b      	uxth	r3, r3
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1c8      	bne.n	800d5ac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	9300      	str	r3, [sp, #0]
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2200      	movs	r2, #0
 800d622:	2140      	movs	r1, #64	; 0x40
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f001 fc6f 	bl	800ef08 <UART_WaitOnFlagUntilTimeout>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d005      	beq.n	800d63c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2220      	movs	r2, #32
 800d634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e006      	b.n	800d64a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2220      	movs	r2, #32
 800d640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	e000      	b.n	800d64a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d648:	2302      	movs	r3, #2
  }
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	3720      	adds	r7, #32
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b08a      	sub	sp, #40	; 0x28
 800d656:	af02      	add	r7, sp, #8
 800d658:	60f8      	str	r0, [r7, #12]
 800d65a:	60b9      	str	r1, [r7, #8]
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	4613      	mov	r3, r2
 800d660:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d668:	2b20      	cmp	r3, #32
 800d66a:	f040 80b5 	bne.w	800d7d8 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d002      	beq.n	800d67a <HAL_UART_Receive+0x28>
 800d674:	88fb      	ldrh	r3, [r7, #6]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d67a:	2301      	movs	r3, #1
 800d67c:	e0ad      	b.n	800d7da <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2222      	movs	r2, #34	; 0x22
 800d68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d694:	f7f6 fe98 	bl	80043c8 <HAL_GetTick>
 800d698:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	88fa      	ldrh	r2, [r7, #6]
 800d69e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	88fa      	ldrh	r2, [r7, #6]
 800d6a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6b2:	d10e      	bne.n	800d6d2 <HAL_UART_Receive+0x80>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d105      	bne.n	800d6c8 <HAL_UART_Receive+0x76>
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d6c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6c6:	e02d      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	22ff      	movs	r2, #255	; 0xff
 800d6cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6d0:	e028      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	689b      	ldr	r3, [r3, #8]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d10d      	bne.n	800d6f6 <HAL_UART_Receive+0xa4>
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d104      	bne.n	800d6ec <HAL_UART_Receive+0x9a>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	22ff      	movs	r2, #255	; 0xff
 800d6e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6ea:	e01b      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	227f      	movs	r2, #127	; 0x7f
 800d6f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d6f4:	e016      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6fe:	d10d      	bne.n	800d71c <HAL_UART_Receive+0xca>
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d104      	bne.n	800d712 <HAL_UART_Receive+0xc0>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	227f      	movs	r2, #127	; 0x7f
 800d70c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d710:	e008      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	223f      	movs	r2, #63	; 0x3f
 800d716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d71a:	e003      	b.n	800d724 <HAL_UART_Receive+0xd2>
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	2200      	movs	r2, #0
 800d720:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d72a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	689b      	ldr	r3, [r3, #8]
 800d730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d734:	d108      	bne.n	800d748 <HAL_UART_Receive+0xf6>
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d104      	bne.n	800d748 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800d73e:	2300      	movs	r3, #0
 800d740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	61bb      	str	r3, [r7, #24]
 800d746:	e003      	b.n	800d750 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d74c:	2300      	movs	r3, #0
 800d74e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d750:	e036      	b.n	800d7c0 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	2200      	movs	r2, #0
 800d75a:	2120      	movs	r1, #32
 800d75c:	68f8      	ldr	r0, [r7, #12]
 800d75e:	f001 fbd3 	bl	800ef08 <UART_WaitOnFlagUntilTimeout>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d005      	beq.n	800d774 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2220      	movs	r2, #32
 800d76c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800d770:	2303      	movs	r3, #3
 800d772:	e032      	b.n	800d7da <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d10c      	bne.n	800d794 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d780:	b29a      	uxth	r2, r3
 800d782:	8a7b      	ldrh	r3, [r7, #18]
 800d784:	4013      	ands	r3, r2
 800d786:	b29a      	uxth	r2, r3
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	3302      	adds	r3, #2
 800d790:	61bb      	str	r3, [r7, #24]
 800d792:	e00c      	b.n	800d7ae <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d79a:	b2da      	uxtb	r2, r3
 800d79c:	8a7b      	ldrh	r3, [r7, #18]
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	4013      	ands	r3, r2
 800d7a2:	b2da      	uxtb	r2, r3
 800d7a4:	69fb      	ldr	r3, [r7, #28]
 800d7a6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	3301      	adds	r3, #1
 800d7ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1c2      	bne.n	800d752 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2220      	movs	r2, #32
 800d7d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e000      	b.n	800d7da <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800d7d8:	2302      	movs	r3, #2
  }
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b0ba      	sub	sp, #232	; 0xe8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d80a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d80e:	f640 030f 	movw	r3, #2063	; 0x80f
 800d812:	4013      	ands	r3, r2
 800d814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11b      	bne.n	800d858 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d824:	f003 0320 	and.w	r3, r3, #32
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d015      	beq.n	800d858 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d82c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d830:	f003 0320 	and.w	r3, r3, #32
 800d834:	2b00      	cmp	r3, #0
 800d836:	d105      	bne.n	800d844 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d83c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d840:	2b00      	cmp	r3, #0
 800d842:	d009      	beq.n	800d858 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d848:	2b00      	cmp	r3, #0
 800d84a:	f000 8377 	beq.w	800df3c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	4798      	blx	r3
      }
      return;
 800d856:	e371      	b.n	800df3c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	f000 8123 	beq.w	800daa8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d862:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d866:	4b8d      	ldr	r3, [pc, #564]	; (800da9c <HAL_UART_IRQHandler+0x2b8>)
 800d868:	4013      	ands	r3, r2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d106      	bne.n	800d87c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d86e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d872:	4b8b      	ldr	r3, [pc, #556]	; (800daa0 <HAL_UART_IRQHandler+0x2bc>)
 800d874:	4013      	ands	r3, r2
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 8116 	beq.w	800daa8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	2b00      	cmp	r3, #0
 800d886:	d011      	beq.n	800d8ac <HAL_UART_IRQHandler+0xc8>
 800d888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2201      	movs	r2, #1
 800d89a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8a2:	f043 0201 	orr.w	r2, r3, #1
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8b0:	f003 0302 	and.w	r3, r3, #2
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d011      	beq.n	800d8dc <HAL_UART_IRQHandler+0xf8>
 800d8b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8bc:	f003 0301 	and.w	r3, r3, #1
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d00b      	beq.n	800d8dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d8d2:	f043 0204 	orr.w	r2, r3, #4
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d8dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d011      	beq.n	800d90c <HAL_UART_IRQHandler+0x128>
 800d8e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d00b      	beq.n	800d90c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2204      	movs	r2, #4
 800d8fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d902:	f043 0202 	orr.w	r2, r3, #2
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d90c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d910:	f003 0308 	and.w	r3, r3, #8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d017      	beq.n	800d948 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d91c:	f003 0320 	and.w	r3, r3, #32
 800d920:	2b00      	cmp	r3, #0
 800d922:	d105      	bne.n	800d930 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d924:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d928:	4b5c      	ldr	r3, [pc, #368]	; (800da9c <HAL_UART_IRQHandler+0x2b8>)
 800d92a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d00b      	beq.n	800d948 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2208      	movs	r2, #8
 800d936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d93e:	f043 0208 	orr.w	r2, r3, #8
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d94c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d950:	2b00      	cmp	r3, #0
 800d952:	d012      	beq.n	800d97a <HAL_UART_IRQHandler+0x196>
 800d954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d958:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d00c      	beq.n	800d97a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d968:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d970:	f043 0220 	orr.w	r2, r3, #32
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d980:	2b00      	cmp	r3, #0
 800d982:	f000 82dd 	beq.w	800df40 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d98a:	f003 0320 	and.w	r3, r3, #32
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d013      	beq.n	800d9ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d996:	f003 0320 	and.w	r3, r3, #32
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d105      	bne.n	800d9aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d99e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d007      	beq.n	800d9ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d9c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ce:	2b40      	cmp	r3, #64	; 0x40
 800d9d0:	d005      	beq.n	800d9de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d9d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d9d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d054      	beq.n	800da88 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f001 fafa 	bl	800efd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ee:	2b40      	cmp	r3, #64	; 0x40
 800d9f0:	d146      	bne.n	800da80 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3308      	adds	r3, #8
 800d9f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da00:	e853 3f00 	ldrex	r3, [r3]
 800da04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800da08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3308      	adds	r3, #8
 800da1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800da1e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800da22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800da2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800da2e:	e841 2300 	strex	r3, r2, [r1]
 800da32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800da36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1d9      	bne.n	800d9f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da44:	2b00      	cmp	r3, #0
 800da46:	d017      	beq.n	800da78 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da4e:	4a15      	ldr	r2, [pc, #84]	; (800daa4 <HAL_UART_IRQHandler+0x2c0>)
 800da50:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da58:	4618      	mov	r0, r3
 800da5a:	f7f8 f9db 	bl	8005e14 <HAL_DMA_Abort_IT>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d019      	beq.n	800da98 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800da72:	4610      	mov	r0, r2
 800da74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da76:	e00f      	b.n	800da98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f000 fa77 	bl	800df6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da7e:	e00b      	b.n	800da98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 fa73 	bl	800df6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da86:	e007      	b.n	800da98 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 fa6f 	bl	800df6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800da96:	e253      	b.n	800df40 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da98:	bf00      	nop
    return;
 800da9a:	e251      	b.n	800df40 <HAL_UART_IRQHandler+0x75c>
 800da9c:	10000001 	.word	0x10000001
 800daa0:	04000120 	.word	0x04000120
 800daa4:	0800f0a5 	.word	0x0800f0a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daac:	2b01      	cmp	r3, #1
 800daae:	f040 81e7 	bne.w	800de80 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dab6:	f003 0310 	and.w	r3, r3, #16
 800daba:	2b00      	cmp	r3, #0
 800dabc:	f000 81e0 	beq.w	800de80 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dac4:	f003 0310 	and.w	r3, r3, #16
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 81d9 	beq.w	800de80 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2210      	movs	r2, #16
 800dad4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dae0:	2b40      	cmp	r3, #64	; 0x40
 800dae2:	f040 8151 	bne.w	800dd88 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a96      	ldr	r2, [pc, #600]	; (800dd48 <HAL_UART_IRQHandler+0x564>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d068      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a93      	ldr	r2, [pc, #588]	; (800dd4c <HAL_UART_IRQHandler+0x568>)
 800dafe:	4293      	cmp	r3, r2
 800db00:	d061      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a91      	ldr	r2, [pc, #580]	; (800dd50 <HAL_UART_IRQHandler+0x56c>)
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d05a      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a8e      	ldr	r2, [pc, #568]	; (800dd54 <HAL_UART_IRQHandler+0x570>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d053      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	4a8c      	ldr	r2, [pc, #560]	; (800dd58 <HAL_UART_IRQHandler+0x574>)
 800db28:	4293      	cmp	r3, r2
 800db2a:	d04c      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	4a89      	ldr	r2, [pc, #548]	; (800dd5c <HAL_UART_IRQHandler+0x578>)
 800db36:	4293      	cmp	r3, r2
 800db38:	d045      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	4a87      	ldr	r2, [pc, #540]	; (800dd60 <HAL_UART_IRQHandler+0x57c>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d03e      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a84      	ldr	r2, [pc, #528]	; (800dd64 <HAL_UART_IRQHandler+0x580>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d037      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	4a82      	ldr	r2, [pc, #520]	; (800dd68 <HAL_UART_IRQHandler+0x584>)
 800db60:	4293      	cmp	r3, r2
 800db62:	d030      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4a7f      	ldr	r2, [pc, #508]	; (800dd6c <HAL_UART_IRQHandler+0x588>)
 800db6e:	4293      	cmp	r3, r2
 800db70:	d029      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a7d      	ldr	r2, [pc, #500]	; (800dd70 <HAL_UART_IRQHandler+0x58c>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d022      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	4a7a      	ldr	r2, [pc, #488]	; (800dd74 <HAL_UART_IRQHandler+0x590>)
 800db8a:	4293      	cmp	r3, r2
 800db8c:	d01b      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	4a78      	ldr	r2, [pc, #480]	; (800dd78 <HAL_UART_IRQHandler+0x594>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d014      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	4a75      	ldr	r2, [pc, #468]	; (800dd7c <HAL_UART_IRQHandler+0x598>)
 800dba6:	4293      	cmp	r3, r2
 800dba8:	d00d      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a73      	ldr	r2, [pc, #460]	; (800dd80 <HAL_UART_IRQHandler+0x59c>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d006      	beq.n	800dbc6 <HAL_UART_IRQHandler+0x3e2>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	4a70      	ldr	r2, [pc, #448]	; (800dd84 <HAL_UART_IRQHandler+0x5a0>)
 800dbc2:	4293      	cmp	r3, r2
 800dbc4:	d106      	bne.n	800dbd4 <HAL_UART_IRQHandler+0x3f0>
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	e005      	b.n	800dbe0 <HAL_UART_IRQHandler+0x3fc>
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	b29b      	uxth	r3, r3
 800dbe0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800dbe4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f000 81ab 	beq.w	800df44 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dbf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	f080 81a3 	bcs.w	800df44 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800dc04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc14:	f000 8087 	beq.w	800dd26 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc24:	e853 3f00 	ldrex	r3, [r3]
 800dc28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800dc2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dc30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	461a      	mov	r2, r3
 800dc3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800dc42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800dc46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800dc4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc52:	e841 2300 	strex	r3, r2, [r1]
 800dc56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dc5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1da      	bne.n	800dc18 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	3308      	adds	r3, #8
 800dc68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dc6c:	e853 3f00 	ldrex	r3, [r3]
 800dc70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dc72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc74:	f023 0301 	bic.w	r3, r3, #1
 800dc78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3308      	adds	r3, #8
 800dc82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800dc86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dc8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800dc8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dc92:	e841 2300 	strex	r3, r2, [r1]
 800dc96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800dc98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d1e1      	bne.n	800dc62 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3308      	adds	r3, #8
 800dca4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dca8:	e853 3f00 	ldrex	r3, [r3]
 800dcac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800dcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	3308      	adds	r3, #8
 800dcbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800dcc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800dcc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dcc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dcca:	e841 2300 	strex	r3, r2, [r1]
 800dcce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800dcd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1e3      	bne.n	800dc9e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2200      	movs	r2, #0
 800dce2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcec:	e853 3f00 	ldrex	r3, [r3]
 800dcf0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dcf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcf4:	f023 0310 	bic.w	r3, r3, #16
 800dcf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	461a      	mov	r2, r3
 800dd02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800dd06:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dd0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd0e:	e841 2300 	strex	r3, r2, [r1]
 800dd12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1e4      	bne.n	800dce4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7f7 fd59 	bl	80057d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2202      	movs	r2, #2
 800dd2a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd38:	b29b      	uxth	r3, r3
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4619      	mov	r1, r3
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f000 f91d 	bl	800df80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dd46:	e0fd      	b.n	800df44 <HAL_UART_IRQHandler+0x760>
 800dd48:	40020010 	.word	0x40020010
 800dd4c:	40020028 	.word	0x40020028
 800dd50:	40020040 	.word	0x40020040
 800dd54:	40020058 	.word	0x40020058
 800dd58:	40020070 	.word	0x40020070
 800dd5c:	40020088 	.word	0x40020088
 800dd60:	400200a0 	.word	0x400200a0
 800dd64:	400200b8 	.word	0x400200b8
 800dd68:	40020410 	.word	0x40020410
 800dd6c:	40020428 	.word	0x40020428
 800dd70:	40020440 	.word	0x40020440
 800dd74:	40020458 	.word	0x40020458
 800dd78:	40020470 	.word	0x40020470
 800dd7c:	40020488 	.word	0x40020488
 800dd80:	400204a0 	.word	0x400204a0
 800dd84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	f000 80cf 	beq.w	800df48 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800ddaa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 80ca 	beq.w	800df48 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbc:	e853 3f00 	ldrex	r3, [r3]
 800ddc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ddc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ddd6:	647b      	str	r3, [r7, #68]	; 0x44
 800ddd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddde:	e841 2300 	strex	r3, r2, [r1]
 800dde2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dde4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d1e4      	bne.n	800ddb4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3308      	adds	r3, #8
 800ddf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf4:	e853 3f00 	ldrex	r3, [r3]
 800ddf8:	623b      	str	r3, [r7, #32]
   return(result);
 800ddfa:	6a3a      	ldr	r2, [r7, #32]
 800ddfc:	4b55      	ldr	r3, [pc, #340]	; (800df54 <HAL_UART_IRQHandler+0x770>)
 800ddfe:	4013      	ands	r3, r2
 800de00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	3308      	adds	r3, #8
 800de0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800de0e:	633a      	str	r2, [r7, #48]	; 0x30
 800de10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de16:	e841 2300 	strex	r3, r2, [r1]
 800de1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800de1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d1e3      	bne.n	800ddea <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2220      	movs	r2, #32
 800de26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2200      	movs	r2, #0
 800de2e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2200      	movs	r2, #0
 800de34:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	e853 3f00 	ldrex	r3, [r3]
 800de42:	60fb      	str	r3, [r7, #12]
   return(result);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f023 0310 	bic.w	r3, r3, #16
 800de4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	461a      	mov	r2, r3
 800de54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800de58:	61fb      	str	r3, [r7, #28]
 800de5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de5c:	69b9      	ldr	r1, [r7, #24]
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	e841 2300 	strex	r3, r2, [r1]
 800de64:	617b      	str	r3, [r7, #20]
   return(result);
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d1e4      	bne.n	800de36 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2202      	movs	r2, #2
 800de70:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800de72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800de76:	4619      	mov	r1, r3
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f000 f881 	bl	800df80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800de7e:	e063      	b.n	800df48 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800de80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800de84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <HAL_UART_IRQHandler+0x6c6>
 800de8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800de90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de94:	2b00      	cmp	r3, #0
 800de96:	d008      	beq.n	800deaa <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dea0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f001 f93f 	bl	800f126 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dea8:	e051      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800deaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800deae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d014      	beq.n	800dee0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800deb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800deba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d105      	bne.n	800dece <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d008      	beq.n	800dee0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d03a      	beq.n	800df4c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	4798      	blx	r3
    }
    return;
 800dede:	e035      	b.n	800df4c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d009      	beq.n	800df00 <HAL_UART_IRQHandler+0x71c>
 800deec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800def0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800def4:	2b00      	cmp	r3, #0
 800def6:	d003      	beq.n	800df00 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f001 f8e9 	bl	800f0d0 <UART_EndTransmit_IT>
    return;
 800defe:	e026      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800df00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d009      	beq.n	800df20 <HAL_UART_IRQHandler+0x73c>
 800df0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df10:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d003      	beq.n	800df20 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 f918 	bl	800f14e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df1e:	e016      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800df20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800df24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d010      	beq.n	800df4e <HAL_UART_IRQHandler+0x76a>
 800df2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800df30:	2b00      	cmp	r3, #0
 800df32:	da0c      	bge.n	800df4e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f001 f900 	bl	800f13a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800df3a:	e008      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
      return;
 800df3c:	bf00      	nop
 800df3e:	e006      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
    return;
 800df40:	bf00      	nop
 800df42:	e004      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
      return;
 800df44:	bf00      	nop
 800df46:	e002      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
      return;
 800df48:	bf00      	nop
 800df4a:	e000      	b.n	800df4e <HAL_UART_IRQHandler+0x76a>
    return;
 800df4c:	bf00      	nop
  }
}
 800df4e:	37e8      	adds	r7, #232	; 0xe8
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	effffffe 	.word	0xeffffffe

0800df58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	460b      	mov	r3, r1
 800df8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800df8c:	bf00      	nop
 800df8e:	370c      	adds	r7, #12
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr

0800df98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df9c:	b092      	sub	sp, #72	; 0x48
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	69db      	ldr	r3, [r3, #28]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	4bbe      	ldr	r3, [pc, #760]	; (800e2c0 <UART_SetConfig+0x328>)
 800dfc8:	4013      	ands	r3, r2
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	6812      	ldr	r2, [r2, #0]
 800dfce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfd0:	430b      	orrs	r3, r1
 800dfd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4ab3      	ldr	r2, [pc, #716]	; (800e2c4 <UART_SetConfig+0x32c>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d004      	beq.n	800e004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e000:	4313      	orrs	r3, r2
 800e002:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	689a      	ldr	r2, [r3, #8]
 800e00a:	4baf      	ldr	r3, [pc, #700]	; (800e2c8 <UART_SetConfig+0x330>)
 800e00c:	4013      	ands	r3, r2
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	6812      	ldr	r2, [r2, #0]
 800e012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e014:	430b      	orrs	r3, r1
 800e016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	f023 010f 	bic.w	r1, r3, #15
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	430a      	orrs	r2, r1
 800e02c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4aa6      	ldr	r2, [pc, #664]	; (800e2cc <UART_SetConfig+0x334>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d177      	bne.n	800e128 <UART_SetConfig+0x190>
 800e038:	4ba5      	ldr	r3, [pc, #660]	; (800e2d0 <UART_SetConfig+0x338>)
 800e03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e040:	2b28      	cmp	r3, #40	; 0x28
 800e042:	d86d      	bhi.n	800e120 <UART_SetConfig+0x188>
 800e044:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <UART_SetConfig+0xb4>)
 800e046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04a:	bf00      	nop
 800e04c:	0800e0f1 	.word	0x0800e0f1
 800e050:	0800e121 	.word	0x0800e121
 800e054:	0800e121 	.word	0x0800e121
 800e058:	0800e121 	.word	0x0800e121
 800e05c:	0800e121 	.word	0x0800e121
 800e060:	0800e121 	.word	0x0800e121
 800e064:	0800e121 	.word	0x0800e121
 800e068:	0800e121 	.word	0x0800e121
 800e06c:	0800e0f9 	.word	0x0800e0f9
 800e070:	0800e121 	.word	0x0800e121
 800e074:	0800e121 	.word	0x0800e121
 800e078:	0800e121 	.word	0x0800e121
 800e07c:	0800e121 	.word	0x0800e121
 800e080:	0800e121 	.word	0x0800e121
 800e084:	0800e121 	.word	0x0800e121
 800e088:	0800e121 	.word	0x0800e121
 800e08c:	0800e101 	.word	0x0800e101
 800e090:	0800e121 	.word	0x0800e121
 800e094:	0800e121 	.word	0x0800e121
 800e098:	0800e121 	.word	0x0800e121
 800e09c:	0800e121 	.word	0x0800e121
 800e0a0:	0800e121 	.word	0x0800e121
 800e0a4:	0800e121 	.word	0x0800e121
 800e0a8:	0800e121 	.word	0x0800e121
 800e0ac:	0800e109 	.word	0x0800e109
 800e0b0:	0800e121 	.word	0x0800e121
 800e0b4:	0800e121 	.word	0x0800e121
 800e0b8:	0800e121 	.word	0x0800e121
 800e0bc:	0800e121 	.word	0x0800e121
 800e0c0:	0800e121 	.word	0x0800e121
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e121 	.word	0x0800e121
 800e0cc:	0800e111 	.word	0x0800e111
 800e0d0:	0800e121 	.word	0x0800e121
 800e0d4:	0800e121 	.word	0x0800e121
 800e0d8:	0800e121 	.word	0x0800e121
 800e0dc:	0800e121 	.word	0x0800e121
 800e0e0:	0800e121 	.word	0x0800e121
 800e0e4:	0800e121 	.word	0x0800e121
 800e0e8:	0800e121 	.word	0x0800e121
 800e0ec:	0800e119 	.word	0x0800e119
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e326      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e0f8:	2304      	movs	r3, #4
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e322      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e100:	2308      	movs	r3, #8
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e31e      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e108:	2310      	movs	r3, #16
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e31a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e110:	2320      	movs	r3, #32
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e316      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e118:	2340      	movs	r3, #64	; 0x40
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e312      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e120:	2380      	movs	r3, #128	; 0x80
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e30e      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a69      	ldr	r2, [pc, #420]	; (800e2d4 <UART_SetConfig+0x33c>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d130      	bne.n	800e194 <UART_SetConfig+0x1fc>
 800e132:	4b67      	ldr	r3, [pc, #412]	; (800e2d0 <UART_SetConfig+0x338>)
 800e134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b05      	cmp	r3, #5
 800e13c:	d826      	bhi.n	800e18c <UART_SetConfig+0x1f4>
 800e13e:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <UART_SetConfig+0x1ac>)
 800e140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e144:	0800e15d 	.word	0x0800e15d
 800e148:	0800e165 	.word	0x0800e165
 800e14c:	0800e16d 	.word	0x0800e16d
 800e150:	0800e175 	.word	0x0800e175
 800e154:	0800e17d 	.word	0x0800e17d
 800e158:	0800e185 	.word	0x0800e185
 800e15c:	2300      	movs	r3, #0
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e2f0      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e164:	2304      	movs	r3, #4
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e2ec      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e16c:	2308      	movs	r3, #8
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e2e8      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e174:	2310      	movs	r3, #16
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e2e4      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e17c:	2320      	movs	r3, #32
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e2e0      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e184:	2340      	movs	r3, #64	; 0x40
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e2dc      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e18c:	2380      	movs	r3, #128	; 0x80
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e2d8      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a4f      	ldr	r2, [pc, #316]	; (800e2d8 <UART_SetConfig+0x340>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d130      	bne.n	800e200 <UART_SetConfig+0x268>
 800e19e:	4b4c      	ldr	r3, [pc, #304]	; (800e2d0 <UART_SetConfig+0x338>)
 800e1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a2:	f003 0307 	and.w	r3, r3, #7
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	d826      	bhi.n	800e1f8 <UART_SetConfig+0x260>
 800e1aa:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <UART_SetConfig+0x218>)
 800e1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b0:	0800e1c9 	.word	0x0800e1c9
 800e1b4:	0800e1d1 	.word	0x0800e1d1
 800e1b8:	0800e1d9 	.word	0x0800e1d9
 800e1bc:	0800e1e1 	.word	0x0800e1e1
 800e1c0:	0800e1e9 	.word	0x0800e1e9
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e2ba      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1d0:	2304      	movs	r3, #4
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e2b6      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1d8:	2308      	movs	r3, #8
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e2b2      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1e0:	2310      	movs	r3, #16
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e2ae      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1e8:	2320      	movs	r3, #32
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e2aa      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1f0:	2340      	movs	r3, #64	; 0x40
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e2a6      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e1f8:	2380      	movs	r3, #128	; 0x80
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e2a2      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a35      	ldr	r2, [pc, #212]	; (800e2dc <UART_SetConfig+0x344>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d130      	bne.n	800e26c <UART_SetConfig+0x2d4>
 800e20a:	4b31      	ldr	r3, [pc, #196]	; (800e2d0 <UART_SetConfig+0x338>)
 800e20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e20e:	f003 0307 	and.w	r3, r3, #7
 800e212:	2b05      	cmp	r3, #5
 800e214:	d826      	bhi.n	800e264 <UART_SetConfig+0x2cc>
 800e216:	a201      	add	r2, pc, #4	; (adr r2, 800e21c <UART_SetConfig+0x284>)
 800e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21c:	0800e235 	.word	0x0800e235
 800e220:	0800e23d 	.word	0x0800e23d
 800e224:	0800e245 	.word	0x0800e245
 800e228:	0800e24d 	.word	0x0800e24d
 800e22c:	0800e255 	.word	0x0800e255
 800e230:	0800e25d 	.word	0x0800e25d
 800e234:	2300      	movs	r3, #0
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e284      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e23c:	2304      	movs	r3, #4
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e280      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e244:	2308      	movs	r3, #8
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e27c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e24c:	2310      	movs	r3, #16
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e278      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e254:	2320      	movs	r3, #32
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e274      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e25c:	2340      	movs	r3, #64	; 0x40
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e270      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e264:	2380      	movs	r3, #128	; 0x80
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e26c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a1b      	ldr	r2, [pc, #108]	; (800e2e0 <UART_SetConfig+0x348>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d142      	bne.n	800e2fc <UART_SetConfig+0x364>
 800e276:	4b16      	ldr	r3, [pc, #88]	; (800e2d0 <UART_SetConfig+0x338>)
 800e278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b05      	cmp	r3, #5
 800e280:	d838      	bhi.n	800e2f4 <UART_SetConfig+0x35c>
 800e282:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <UART_SetConfig+0x2f0>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e2a1 	.word	0x0800e2a1
 800e28c:	0800e2a9 	.word	0x0800e2a9
 800e290:	0800e2b1 	.word	0x0800e2b1
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2e5 	.word	0x0800e2e5
 800e29c:	0800e2ed 	.word	0x0800e2ed
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e24e      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e24a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2b0:	2308      	movs	r3, #8
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e246      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2b8:	2310      	movs	r3, #16
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e242      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2c0:	cfff69f3 	.word	0xcfff69f3
 800e2c4:	58000c00 	.word	0x58000c00
 800e2c8:	11fff4ff 	.word	0x11fff4ff
 800e2cc:	40011000 	.word	0x40011000
 800e2d0:	58024400 	.word	0x58024400
 800e2d4:	40004400 	.word	0x40004400
 800e2d8:	40004800 	.word	0x40004800
 800e2dc:	40004c00 	.word	0x40004c00
 800e2e0:	40005000 	.word	0x40005000
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e22c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e228      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2f4:	2380      	movs	r3, #128	; 0x80
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e224      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4ab1      	ldr	r2, [pc, #708]	; (800e5c8 <UART_SetConfig+0x630>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d176      	bne.n	800e3f4 <UART_SetConfig+0x45c>
 800e306:	4bb1      	ldr	r3, [pc, #708]	; (800e5cc <UART_SetConfig+0x634>)
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e30e:	2b28      	cmp	r3, #40	; 0x28
 800e310:	d86c      	bhi.n	800e3ec <UART_SetConfig+0x454>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0x380>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e3bd 	.word	0x0800e3bd
 800e31c:	0800e3ed 	.word	0x0800e3ed
 800e320:	0800e3ed 	.word	0x0800e3ed
 800e324:	0800e3ed 	.word	0x0800e3ed
 800e328:	0800e3ed 	.word	0x0800e3ed
 800e32c:	0800e3ed 	.word	0x0800e3ed
 800e330:	0800e3ed 	.word	0x0800e3ed
 800e334:	0800e3ed 	.word	0x0800e3ed
 800e338:	0800e3c5 	.word	0x0800e3c5
 800e33c:	0800e3ed 	.word	0x0800e3ed
 800e340:	0800e3ed 	.word	0x0800e3ed
 800e344:	0800e3ed 	.word	0x0800e3ed
 800e348:	0800e3ed 	.word	0x0800e3ed
 800e34c:	0800e3ed 	.word	0x0800e3ed
 800e350:	0800e3ed 	.word	0x0800e3ed
 800e354:	0800e3ed 	.word	0x0800e3ed
 800e358:	0800e3cd 	.word	0x0800e3cd
 800e35c:	0800e3ed 	.word	0x0800e3ed
 800e360:	0800e3ed 	.word	0x0800e3ed
 800e364:	0800e3ed 	.word	0x0800e3ed
 800e368:	0800e3ed 	.word	0x0800e3ed
 800e36c:	0800e3ed 	.word	0x0800e3ed
 800e370:	0800e3ed 	.word	0x0800e3ed
 800e374:	0800e3ed 	.word	0x0800e3ed
 800e378:	0800e3d5 	.word	0x0800e3d5
 800e37c:	0800e3ed 	.word	0x0800e3ed
 800e380:	0800e3ed 	.word	0x0800e3ed
 800e384:	0800e3ed 	.word	0x0800e3ed
 800e388:	0800e3ed 	.word	0x0800e3ed
 800e38c:	0800e3ed 	.word	0x0800e3ed
 800e390:	0800e3ed 	.word	0x0800e3ed
 800e394:	0800e3ed 	.word	0x0800e3ed
 800e398:	0800e3dd 	.word	0x0800e3dd
 800e39c:	0800e3ed 	.word	0x0800e3ed
 800e3a0:	0800e3ed 	.word	0x0800e3ed
 800e3a4:	0800e3ed 	.word	0x0800e3ed
 800e3a8:	0800e3ed 	.word	0x0800e3ed
 800e3ac:	0800e3ed 	.word	0x0800e3ed
 800e3b0:	0800e3ed 	.word	0x0800e3ed
 800e3b4:	0800e3ed 	.word	0x0800e3ed
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	2301      	movs	r3, #1
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e1c0      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e1bc      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3cc:	2308      	movs	r3, #8
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e1b8      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3d4:	2310      	movs	r3, #16
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e1b4      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3dc:	2320      	movs	r3, #32
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e1b0      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3e4:	2340      	movs	r3, #64	; 0x40
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e1ac      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3ec:	2380      	movs	r3, #128	; 0x80
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e1a8      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a75      	ldr	r2, [pc, #468]	; (800e5d0 <UART_SetConfig+0x638>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d130      	bne.n	800e460 <UART_SetConfig+0x4c8>
 800e3fe:	4b73      	ldr	r3, [pc, #460]	; (800e5cc <UART_SetConfig+0x634>)
 800e400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	2b05      	cmp	r3, #5
 800e408:	d826      	bhi.n	800e458 <UART_SetConfig+0x4c0>
 800e40a:	a201      	add	r2, pc, #4	; (adr r2, 800e410 <UART_SetConfig+0x478>)
 800e40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e410:	0800e429 	.word	0x0800e429
 800e414:	0800e431 	.word	0x0800e431
 800e418:	0800e439 	.word	0x0800e439
 800e41c:	0800e441 	.word	0x0800e441
 800e420:	0800e449 	.word	0x0800e449
 800e424:	0800e451 	.word	0x0800e451
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e18a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e430:	2304      	movs	r3, #4
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e186      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e438:	2308      	movs	r3, #8
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e182      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e440:	2310      	movs	r3, #16
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e17e      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e448:	2320      	movs	r3, #32
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e17a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e450:	2340      	movs	r3, #64	; 0x40
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e176      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e458:	2380      	movs	r3, #128	; 0x80
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e172      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a5b      	ldr	r2, [pc, #364]	; (800e5d4 <UART_SetConfig+0x63c>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d130      	bne.n	800e4cc <UART_SetConfig+0x534>
 800e46a:	4b58      	ldr	r3, [pc, #352]	; (800e5cc <UART_SetConfig+0x634>)
 800e46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46e:	f003 0307 	and.w	r3, r3, #7
 800e472:	2b05      	cmp	r3, #5
 800e474:	d826      	bhi.n	800e4c4 <UART_SetConfig+0x52c>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <UART_SetConfig+0x4e4>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e495 	.word	0x0800e495
 800e480:	0800e49d 	.word	0x0800e49d
 800e484:	0800e4a5 	.word	0x0800e4a5
 800e488:	0800e4ad 	.word	0x0800e4ad
 800e48c:	0800e4b5 	.word	0x0800e4b5
 800e490:	0800e4bd 	.word	0x0800e4bd
 800e494:	2300      	movs	r3, #0
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e154      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e49c:	2304      	movs	r3, #4
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e150      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4a4:	2308      	movs	r3, #8
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e14c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e148      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4b4:	2320      	movs	r3, #32
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e144      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4bc:	2340      	movs	r3, #64	; 0x40
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e140      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4c4:	2380      	movs	r3, #128	; 0x80
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e13c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a41      	ldr	r2, [pc, #260]	; (800e5d8 <UART_SetConfig+0x640>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	f040 8082 	bne.w	800e5dc <UART_SetConfig+0x644>
 800e4d8:	4b3c      	ldr	r3, [pc, #240]	; (800e5cc <UART_SetConfig+0x634>)
 800e4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e4e0:	2b28      	cmp	r3, #40	; 0x28
 800e4e2:	d86d      	bhi.n	800e5c0 <UART_SetConfig+0x628>
 800e4e4:	a201      	add	r2, pc, #4	; (adr r2, 800e4ec <UART_SetConfig+0x554>)
 800e4e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4ea:	bf00      	nop
 800e4ec:	0800e591 	.word	0x0800e591
 800e4f0:	0800e5c1 	.word	0x0800e5c1
 800e4f4:	0800e5c1 	.word	0x0800e5c1
 800e4f8:	0800e5c1 	.word	0x0800e5c1
 800e4fc:	0800e5c1 	.word	0x0800e5c1
 800e500:	0800e5c1 	.word	0x0800e5c1
 800e504:	0800e5c1 	.word	0x0800e5c1
 800e508:	0800e5c1 	.word	0x0800e5c1
 800e50c:	0800e599 	.word	0x0800e599
 800e510:	0800e5c1 	.word	0x0800e5c1
 800e514:	0800e5c1 	.word	0x0800e5c1
 800e518:	0800e5c1 	.word	0x0800e5c1
 800e51c:	0800e5c1 	.word	0x0800e5c1
 800e520:	0800e5c1 	.word	0x0800e5c1
 800e524:	0800e5c1 	.word	0x0800e5c1
 800e528:	0800e5c1 	.word	0x0800e5c1
 800e52c:	0800e5a1 	.word	0x0800e5a1
 800e530:	0800e5c1 	.word	0x0800e5c1
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5c1 	.word	0x0800e5c1
 800e53c:	0800e5c1 	.word	0x0800e5c1
 800e540:	0800e5c1 	.word	0x0800e5c1
 800e544:	0800e5c1 	.word	0x0800e5c1
 800e548:	0800e5c1 	.word	0x0800e5c1
 800e54c:	0800e5a9 	.word	0x0800e5a9
 800e550:	0800e5c1 	.word	0x0800e5c1
 800e554:	0800e5c1 	.word	0x0800e5c1
 800e558:	0800e5c1 	.word	0x0800e5c1
 800e55c:	0800e5c1 	.word	0x0800e5c1
 800e560:	0800e5c1 	.word	0x0800e5c1
 800e564:	0800e5c1 	.word	0x0800e5c1
 800e568:	0800e5c1 	.word	0x0800e5c1
 800e56c:	0800e5b1 	.word	0x0800e5b1
 800e570:	0800e5c1 	.word	0x0800e5c1
 800e574:	0800e5c1 	.word	0x0800e5c1
 800e578:	0800e5c1 	.word	0x0800e5c1
 800e57c:	0800e5c1 	.word	0x0800e5c1
 800e580:	0800e5c1 	.word	0x0800e5c1
 800e584:	0800e5c1 	.word	0x0800e5c1
 800e588:	0800e5c1 	.word	0x0800e5c1
 800e58c:	0800e5b9 	.word	0x0800e5b9
 800e590:	2301      	movs	r3, #1
 800e592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e596:	e0d6      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e598:	2304      	movs	r3, #4
 800e59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59e:	e0d2      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5a0:	2308      	movs	r3, #8
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a6:	e0ce      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5a8:	2310      	movs	r3, #16
 800e5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5ae:	e0ca      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5b0:	2320      	movs	r3, #32
 800e5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5b6:	e0c6      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5b8:	2340      	movs	r3, #64	; 0x40
 800e5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5be:	e0c2      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5c0:	2380      	movs	r3, #128	; 0x80
 800e5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5c6:	e0be      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e5c8:	40011400 	.word	0x40011400
 800e5cc:	58024400 	.word	0x58024400
 800e5d0:	40007800 	.word	0x40007800
 800e5d4:	40007c00 	.word	0x40007c00
 800e5d8:	40011800 	.word	0x40011800
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	4aad      	ldr	r2, [pc, #692]	; (800e898 <UART_SetConfig+0x900>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d176      	bne.n	800e6d4 <UART_SetConfig+0x73c>
 800e5e6:	4bad      	ldr	r3, [pc, #692]	; (800e89c <UART_SetConfig+0x904>)
 800e5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5ee:	2b28      	cmp	r3, #40	; 0x28
 800e5f0:	d86c      	bhi.n	800e6cc <UART_SetConfig+0x734>
 800e5f2:	a201      	add	r2, pc, #4	; (adr r2, 800e5f8 <UART_SetConfig+0x660>)
 800e5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f8:	0800e69d 	.word	0x0800e69d
 800e5fc:	0800e6cd 	.word	0x0800e6cd
 800e600:	0800e6cd 	.word	0x0800e6cd
 800e604:	0800e6cd 	.word	0x0800e6cd
 800e608:	0800e6cd 	.word	0x0800e6cd
 800e60c:	0800e6cd 	.word	0x0800e6cd
 800e610:	0800e6cd 	.word	0x0800e6cd
 800e614:	0800e6cd 	.word	0x0800e6cd
 800e618:	0800e6a5 	.word	0x0800e6a5
 800e61c:	0800e6cd 	.word	0x0800e6cd
 800e620:	0800e6cd 	.word	0x0800e6cd
 800e624:	0800e6cd 	.word	0x0800e6cd
 800e628:	0800e6cd 	.word	0x0800e6cd
 800e62c:	0800e6cd 	.word	0x0800e6cd
 800e630:	0800e6cd 	.word	0x0800e6cd
 800e634:	0800e6cd 	.word	0x0800e6cd
 800e638:	0800e6ad 	.word	0x0800e6ad
 800e63c:	0800e6cd 	.word	0x0800e6cd
 800e640:	0800e6cd 	.word	0x0800e6cd
 800e644:	0800e6cd 	.word	0x0800e6cd
 800e648:	0800e6cd 	.word	0x0800e6cd
 800e64c:	0800e6cd 	.word	0x0800e6cd
 800e650:	0800e6cd 	.word	0x0800e6cd
 800e654:	0800e6cd 	.word	0x0800e6cd
 800e658:	0800e6b5 	.word	0x0800e6b5
 800e65c:	0800e6cd 	.word	0x0800e6cd
 800e660:	0800e6cd 	.word	0x0800e6cd
 800e664:	0800e6cd 	.word	0x0800e6cd
 800e668:	0800e6cd 	.word	0x0800e6cd
 800e66c:	0800e6cd 	.word	0x0800e6cd
 800e670:	0800e6cd 	.word	0x0800e6cd
 800e674:	0800e6cd 	.word	0x0800e6cd
 800e678:	0800e6bd 	.word	0x0800e6bd
 800e67c:	0800e6cd 	.word	0x0800e6cd
 800e680:	0800e6cd 	.word	0x0800e6cd
 800e684:	0800e6cd 	.word	0x0800e6cd
 800e688:	0800e6cd 	.word	0x0800e6cd
 800e68c:	0800e6cd 	.word	0x0800e6cd
 800e690:	0800e6cd 	.word	0x0800e6cd
 800e694:	0800e6cd 	.word	0x0800e6cd
 800e698:	0800e6c5 	.word	0x0800e6c5
 800e69c:	2301      	movs	r3, #1
 800e69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6a2:	e050      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6aa:	e04c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6b2:	e048      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e044      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6bc:	2320      	movs	r3, #32
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e040      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6c4:	2340      	movs	r3, #64	; 0x40
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e03c      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6cc:	2380      	movs	r3, #128	; 0x80
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e038      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a71      	ldr	r2, [pc, #452]	; (800e8a0 <UART_SetConfig+0x908>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d130      	bne.n	800e740 <UART_SetConfig+0x7a8>
 800e6de:	4b6f      	ldr	r3, [pc, #444]	; (800e89c <UART_SetConfig+0x904>)
 800e6e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b05      	cmp	r3, #5
 800e6e8:	d826      	bhi.n	800e738 <UART_SetConfig+0x7a0>
 800e6ea:	a201      	add	r2, pc, #4	; (adr r2, 800e6f0 <UART_SetConfig+0x758>)
 800e6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f0:	0800e709 	.word	0x0800e709
 800e6f4:	0800e711 	.word	0x0800e711
 800e6f8:	0800e719 	.word	0x0800e719
 800e6fc:	0800e721 	.word	0x0800e721
 800e700:	0800e729 	.word	0x0800e729
 800e704:	0800e731 	.word	0x0800e731
 800e708:	2302      	movs	r3, #2
 800e70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70e:	e01a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e710:	2304      	movs	r3, #4
 800e712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e716:	e016      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e718:	2308      	movs	r3, #8
 800e71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e71e:	e012      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e720:	2310      	movs	r3, #16
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e00e      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e728:	2320      	movs	r3, #32
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e00a      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e730:	2340      	movs	r3, #64	; 0x40
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e006      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e738:	2380      	movs	r3, #128	; 0x80
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73e:	e002      	b.n	800e746 <UART_SetConfig+0x7ae>
 800e740:	2380      	movs	r3, #128	; 0x80
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a55      	ldr	r2, [pc, #340]	; (800e8a0 <UART_SetConfig+0x908>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	f040 80f8 	bne.w	800e942 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e752:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e756:	2b20      	cmp	r3, #32
 800e758:	dc46      	bgt.n	800e7e8 <UART_SetConfig+0x850>
 800e75a:	2b02      	cmp	r3, #2
 800e75c:	db75      	blt.n	800e84a <UART_SetConfig+0x8b2>
 800e75e:	3b02      	subs	r3, #2
 800e760:	2b1e      	cmp	r3, #30
 800e762:	d872      	bhi.n	800e84a <UART_SetConfig+0x8b2>
 800e764:	a201      	add	r2, pc, #4	; (adr r2, 800e76c <UART_SetConfig+0x7d4>)
 800e766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e76a:	bf00      	nop
 800e76c:	0800e7ef 	.word	0x0800e7ef
 800e770:	0800e84b 	.word	0x0800e84b
 800e774:	0800e7f7 	.word	0x0800e7f7
 800e778:	0800e84b 	.word	0x0800e84b
 800e77c:	0800e84b 	.word	0x0800e84b
 800e780:	0800e84b 	.word	0x0800e84b
 800e784:	0800e807 	.word	0x0800e807
 800e788:	0800e84b 	.word	0x0800e84b
 800e78c:	0800e84b 	.word	0x0800e84b
 800e790:	0800e84b 	.word	0x0800e84b
 800e794:	0800e84b 	.word	0x0800e84b
 800e798:	0800e84b 	.word	0x0800e84b
 800e79c:	0800e84b 	.word	0x0800e84b
 800e7a0:	0800e84b 	.word	0x0800e84b
 800e7a4:	0800e817 	.word	0x0800e817
 800e7a8:	0800e84b 	.word	0x0800e84b
 800e7ac:	0800e84b 	.word	0x0800e84b
 800e7b0:	0800e84b 	.word	0x0800e84b
 800e7b4:	0800e84b 	.word	0x0800e84b
 800e7b8:	0800e84b 	.word	0x0800e84b
 800e7bc:	0800e84b 	.word	0x0800e84b
 800e7c0:	0800e84b 	.word	0x0800e84b
 800e7c4:	0800e84b 	.word	0x0800e84b
 800e7c8:	0800e84b 	.word	0x0800e84b
 800e7cc:	0800e84b 	.word	0x0800e84b
 800e7d0:	0800e84b 	.word	0x0800e84b
 800e7d4:	0800e84b 	.word	0x0800e84b
 800e7d8:	0800e84b 	.word	0x0800e84b
 800e7dc:	0800e84b 	.word	0x0800e84b
 800e7e0:	0800e84b 	.word	0x0800e84b
 800e7e4:	0800e83d 	.word	0x0800e83d
 800e7e8:	2b40      	cmp	r3, #64	; 0x40
 800e7ea:	d02a      	beq.n	800e842 <UART_SetConfig+0x8aa>
 800e7ec:	e02d      	b.n	800e84a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e7ee:	f7fe f879 	bl	800c8e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800e7f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7f4:	e02f      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe f888 	bl	800c910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e804:	e027      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e806:	f107 0318 	add.w	r3, r7, #24
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe f9d4 	bl	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e814:	e01f      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e816:	4b21      	ldr	r3, [pc, #132]	; (800e89c <UART_SetConfig+0x904>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f003 0320 	and.w	r3, r3, #32
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d009      	beq.n	800e836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e822:	4b1e      	ldr	r3, [pc, #120]	; (800e89c <UART_SetConfig+0x904>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	08db      	lsrs	r3, r3, #3
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	4a1d      	ldr	r2, [pc, #116]	; (800e8a4 <UART_SetConfig+0x90c>)
 800e82e:	fa22 f303 	lsr.w	r3, r2, r3
 800e832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e834:	e00f      	b.n	800e856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e836:	4b1b      	ldr	r3, [pc, #108]	; (800e8a4 <UART_SetConfig+0x90c>)
 800e838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e83a:	e00c      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e83c:	4b1a      	ldr	r3, [pc, #104]	; (800e8a8 <UART_SetConfig+0x910>)
 800e83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e840:	e009      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e848:	e005      	b.n	800e856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e84a:	2300      	movs	r3, #0
 800e84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 81ee 	beq.w	800ec3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e862:	4a12      	ldr	r2, [pc, #72]	; (800e8ac <UART_SetConfig+0x914>)
 800e864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e868:	461a      	mov	r2, r3
 800e86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e870:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	4613      	mov	r3, r2
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	4413      	add	r3, r2
 800e87c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e87e:	429a      	cmp	r2, r3
 800e880:	d305      	bcc.n	800e88e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e88a:	429a      	cmp	r2, r3
 800e88c:	d910      	bls.n	800e8b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e88e:	2301      	movs	r3, #1
 800e890:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e894:	e1d1      	b.n	800ec3a <UART_SetConfig+0xca2>
 800e896:	bf00      	nop
 800e898:	40011c00 	.word	0x40011c00
 800e89c:	58024400 	.word	0x58024400
 800e8a0:	58000c00 	.word	0x58000c00
 800e8a4:	03d09000 	.word	0x03d09000
 800e8a8:	003d0900 	.word	0x003d0900
 800e8ac:	08010c9c 	.word	0x08010c9c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	60bb      	str	r3, [r7, #8]
 800e8b6:	60fa      	str	r2, [r7, #12]
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	4ac0      	ldr	r2, [pc, #768]	; (800ebc0 <UART_SetConfig+0xc28>)
 800e8be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e8c2:	b29b      	uxth	r3, r3
 800e8c4:	2200      	movs	r2, #0
 800e8c6:	603b      	str	r3, [r7, #0]
 800e8c8:	607a      	str	r2, [r7, #4]
 800e8ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e8ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e8d2:	f7f1 fd5d 	bl	8000390 <__aeabi_uldivmod>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4610      	mov	r0, r2
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f04f 0200 	mov.w	r2, #0
 800e8e2:	f04f 0300 	mov.w	r3, #0
 800e8e6:	020b      	lsls	r3, r1, #8
 800e8e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e8ec:	0202      	lsls	r2, r0, #8
 800e8ee:	6979      	ldr	r1, [r7, #20]
 800e8f0:	6849      	ldr	r1, [r1, #4]
 800e8f2:	0849      	lsrs	r1, r1, #1
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	4605      	mov	r5, r0
 800e8fa:	eb12 0804 	adds.w	r8, r2, r4
 800e8fe:	eb43 0905 	adc.w	r9, r3, r5
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	2200      	movs	r2, #0
 800e908:	469a      	mov	sl, r3
 800e90a:	4693      	mov	fp, r2
 800e90c:	4652      	mov	r2, sl
 800e90e:	465b      	mov	r3, fp
 800e910:	4640      	mov	r0, r8
 800e912:	4649      	mov	r1, r9
 800e914:	f7f1 fd3c 	bl	8000390 <__aeabi_uldivmod>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	4613      	mov	r3, r2
 800e91e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e926:	d308      	bcc.n	800e93a <UART_SetConfig+0x9a2>
 800e928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e92a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e92e:	d204      	bcs.n	800e93a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e936:	60da      	str	r2, [r3, #12]
 800e938:	e17f      	b.n	800ec3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e940:	e17b      	b.n	800ec3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	69db      	ldr	r3, [r3, #28]
 800e946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e94a:	f040 80bd 	bne.w	800eac8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e94e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e952:	2b20      	cmp	r3, #32
 800e954:	dc48      	bgt.n	800e9e8 <UART_SetConfig+0xa50>
 800e956:	2b00      	cmp	r3, #0
 800e958:	db7b      	blt.n	800ea52 <UART_SetConfig+0xaba>
 800e95a:	2b20      	cmp	r3, #32
 800e95c:	d879      	bhi.n	800ea52 <UART_SetConfig+0xaba>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <UART_SetConfig+0x9cc>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e9ef 	.word	0x0800e9ef
 800e968:	0800e9f7 	.word	0x0800e9f7
 800e96c:	0800ea53 	.word	0x0800ea53
 800e970:	0800ea53 	.word	0x0800ea53
 800e974:	0800e9ff 	.word	0x0800e9ff
 800e978:	0800ea53 	.word	0x0800ea53
 800e97c:	0800ea53 	.word	0x0800ea53
 800e980:	0800ea53 	.word	0x0800ea53
 800e984:	0800ea0f 	.word	0x0800ea0f
 800e988:	0800ea53 	.word	0x0800ea53
 800e98c:	0800ea53 	.word	0x0800ea53
 800e990:	0800ea53 	.word	0x0800ea53
 800e994:	0800ea53 	.word	0x0800ea53
 800e998:	0800ea53 	.word	0x0800ea53
 800e99c:	0800ea53 	.word	0x0800ea53
 800e9a0:	0800ea53 	.word	0x0800ea53
 800e9a4:	0800ea1f 	.word	0x0800ea1f
 800e9a8:	0800ea53 	.word	0x0800ea53
 800e9ac:	0800ea53 	.word	0x0800ea53
 800e9b0:	0800ea53 	.word	0x0800ea53
 800e9b4:	0800ea53 	.word	0x0800ea53
 800e9b8:	0800ea53 	.word	0x0800ea53
 800e9bc:	0800ea53 	.word	0x0800ea53
 800e9c0:	0800ea53 	.word	0x0800ea53
 800e9c4:	0800ea53 	.word	0x0800ea53
 800e9c8:	0800ea53 	.word	0x0800ea53
 800e9cc:	0800ea53 	.word	0x0800ea53
 800e9d0:	0800ea53 	.word	0x0800ea53
 800e9d4:	0800ea53 	.word	0x0800ea53
 800e9d8:	0800ea53 	.word	0x0800ea53
 800e9dc:	0800ea53 	.word	0x0800ea53
 800e9e0:	0800ea53 	.word	0x0800ea53
 800e9e4:	0800ea45 	.word	0x0800ea45
 800e9e8:	2b40      	cmp	r3, #64	; 0x40
 800e9ea:	d02e      	beq.n	800ea4a <UART_SetConfig+0xab2>
 800e9ec:	e031      	b.n	800ea52 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e9ee:	f7fc fd8f 	bl	800b510 <HAL_RCC_GetPCLK1Freq>
 800e9f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9f4:	e033      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e9f6:	f7fc fda1 	bl	800b53c <HAL_RCC_GetPCLK2Freq>
 800e9fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e9fc:	e02f      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fd ff84 	bl	800c910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea0c:	e027      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea0e:	f107 0318 	add.w	r3, r7, #24
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7fe f8d0 	bl	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea1c:	e01f      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea1e:	4b69      	ldr	r3, [pc, #420]	; (800ebc4 <UART_SetConfig+0xc2c>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0320 	and.w	r3, r3, #32
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d009      	beq.n	800ea3e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea2a:	4b66      	ldr	r3, [pc, #408]	; (800ebc4 <UART_SetConfig+0xc2c>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	08db      	lsrs	r3, r3, #3
 800ea30:	f003 0303 	and.w	r3, r3, #3
 800ea34:	4a64      	ldr	r2, [pc, #400]	; (800ebc8 <UART_SetConfig+0xc30>)
 800ea36:	fa22 f303 	lsr.w	r3, r2, r3
 800ea3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ea3c:	e00f      	b.n	800ea5e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ea3e:	4b62      	ldr	r3, [pc, #392]	; (800ebc8 <UART_SetConfig+0xc30>)
 800ea40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea42:	e00c      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ea44:	4b61      	ldr	r3, [pc, #388]	; (800ebcc <UART_SetConfig+0xc34>)
 800ea46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea48:	e009      	b.n	800ea5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ea4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea50:	e005      	b.n	800ea5e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ea52:	2300      	movs	r3, #0
 800ea54:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ea56:	2301      	movs	r3, #1
 800ea58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ea5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ea5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	f000 80ea 	beq.w	800ec3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ea66:	697b      	ldr	r3, [r7, #20]
 800ea68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea6a:	4a55      	ldr	r2, [pc, #340]	; (800ebc0 <UART_SetConfig+0xc28>)
 800ea6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ea70:	461a      	mov	r2, r3
 800ea72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea74:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea78:	005a      	lsls	r2, r3, #1
 800ea7a:	697b      	ldr	r3, [r7, #20]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	085b      	lsrs	r3, r3, #1
 800ea80:	441a      	add	r2, r3
 800ea82:	697b      	ldr	r3, [r7, #20]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	2b0f      	cmp	r3, #15
 800ea90:	d916      	bls.n	800eac0 <UART_SetConfig+0xb28>
 800ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea98:	d212      	bcs.n	800eac0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ea9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	f023 030f 	bic.w	r3, r3, #15
 800eaa2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eaa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa6:	085b      	lsrs	r3, r3, #1
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	f003 0307 	and.w	r3, r3, #7
 800eaae:	b29a      	uxth	r2, r3
 800eab0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eab2:	4313      	orrs	r3, r2
 800eab4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eabc:	60da      	str	r2, [r3, #12]
 800eabe:	e0bc      	b.n	800ec3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eac0:	2301      	movs	r3, #1
 800eac2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eac6:	e0b8      	b.n	800ec3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800eac8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eacc:	2b20      	cmp	r3, #32
 800eace:	dc4b      	bgt.n	800eb68 <UART_SetConfig+0xbd0>
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f2c0 8087 	blt.w	800ebe4 <UART_SetConfig+0xc4c>
 800ead6:	2b20      	cmp	r3, #32
 800ead8:	f200 8084 	bhi.w	800ebe4 <UART_SetConfig+0xc4c>
 800eadc:	a201      	add	r2, pc, #4	; (adr r2, 800eae4 <UART_SetConfig+0xb4c>)
 800eade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae2:	bf00      	nop
 800eae4:	0800eb6f 	.word	0x0800eb6f
 800eae8:	0800eb77 	.word	0x0800eb77
 800eaec:	0800ebe5 	.word	0x0800ebe5
 800eaf0:	0800ebe5 	.word	0x0800ebe5
 800eaf4:	0800eb7f 	.word	0x0800eb7f
 800eaf8:	0800ebe5 	.word	0x0800ebe5
 800eafc:	0800ebe5 	.word	0x0800ebe5
 800eb00:	0800ebe5 	.word	0x0800ebe5
 800eb04:	0800eb8f 	.word	0x0800eb8f
 800eb08:	0800ebe5 	.word	0x0800ebe5
 800eb0c:	0800ebe5 	.word	0x0800ebe5
 800eb10:	0800ebe5 	.word	0x0800ebe5
 800eb14:	0800ebe5 	.word	0x0800ebe5
 800eb18:	0800ebe5 	.word	0x0800ebe5
 800eb1c:	0800ebe5 	.word	0x0800ebe5
 800eb20:	0800ebe5 	.word	0x0800ebe5
 800eb24:	0800eb9f 	.word	0x0800eb9f
 800eb28:	0800ebe5 	.word	0x0800ebe5
 800eb2c:	0800ebe5 	.word	0x0800ebe5
 800eb30:	0800ebe5 	.word	0x0800ebe5
 800eb34:	0800ebe5 	.word	0x0800ebe5
 800eb38:	0800ebe5 	.word	0x0800ebe5
 800eb3c:	0800ebe5 	.word	0x0800ebe5
 800eb40:	0800ebe5 	.word	0x0800ebe5
 800eb44:	0800ebe5 	.word	0x0800ebe5
 800eb48:	0800ebe5 	.word	0x0800ebe5
 800eb4c:	0800ebe5 	.word	0x0800ebe5
 800eb50:	0800ebe5 	.word	0x0800ebe5
 800eb54:	0800ebe5 	.word	0x0800ebe5
 800eb58:	0800ebe5 	.word	0x0800ebe5
 800eb5c:	0800ebe5 	.word	0x0800ebe5
 800eb60:	0800ebe5 	.word	0x0800ebe5
 800eb64:	0800ebd7 	.word	0x0800ebd7
 800eb68:	2b40      	cmp	r3, #64	; 0x40
 800eb6a:	d037      	beq.n	800ebdc <UART_SetConfig+0xc44>
 800eb6c:	e03a      	b.n	800ebe4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eb6e:	f7fc fccf 	bl	800b510 <HAL_RCC_GetPCLK1Freq>
 800eb72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb74:	e03c      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eb76:	f7fc fce1 	bl	800b53c <HAL_RCC_GetPCLK2Freq>
 800eb7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eb7c:	e038      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7fd fec4 	bl	800c910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb8c:	e030      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb8e:	f107 0318 	add.w	r3, r7, #24
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fe f810 	bl	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb9c:	e028      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eb9e:	4b09      	ldr	r3, [pc, #36]	; (800ebc4 <UART_SetConfig+0xc2c>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f003 0320 	and.w	r3, r3, #32
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d012      	beq.n	800ebd0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ebaa:	4b06      	ldr	r3, [pc, #24]	; (800ebc4 <UART_SetConfig+0xc2c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	08db      	lsrs	r3, r3, #3
 800ebb0:	f003 0303 	and.w	r3, r3, #3
 800ebb4:	4a04      	ldr	r2, [pc, #16]	; (800ebc8 <UART_SetConfig+0xc30>)
 800ebb6:	fa22 f303 	lsr.w	r3, r2, r3
 800ebba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ebbc:	e018      	b.n	800ebf0 <UART_SetConfig+0xc58>
 800ebbe:	bf00      	nop
 800ebc0:	08010c9c 	.word	0x08010c9c
 800ebc4:	58024400 	.word	0x58024400
 800ebc8:	03d09000 	.word	0x03d09000
 800ebcc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ebd0:	4b24      	ldr	r3, [pc, #144]	; (800ec64 <UART_SetConfig+0xccc>)
 800ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebd4:	e00c      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ebd6:	4b24      	ldr	r3, [pc, #144]	; (800ec68 <UART_SetConfig+0xcd0>)
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebda:	e009      	b.n	800ebf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ebdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ebe2:	e005      	b.n	800ebf0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ebe4:	2300      	movs	r3, #0
 800ebe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ebe8:	2301      	movs	r3, #1
 800ebea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ebee:	bf00      	nop
    }

    if (pclk != 0U)
 800ebf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d021      	beq.n	800ec3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebfa:	4a1c      	ldr	r2, [pc, #112]	; (800ec6c <UART_SetConfig+0xcd4>)
 800ebfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec00:	461a      	mov	r2, r3
 800ec02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec04:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	085b      	lsrs	r3, r3, #1
 800ec0e:	441a      	add	r2, r3
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec18:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1c:	2b0f      	cmp	r3, #15
 800ec1e:	d909      	bls.n	800ec34 <UART_SetConfig+0xc9c>
 800ec20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec26:	d205      	bcs.n	800ec34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	b29a      	uxth	r2, r3
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	60da      	str	r2, [r3, #12]
 800ec32:	e002      	b.n	800ec3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	2200      	movs	r2, #0
 800ec54:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ec56:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3748      	adds	r7, #72	; 0x48
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec64:	03d09000 	.word	0x03d09000
 800ec68:	003d0900 	.word	0x003d0900
 800ec6c:	08010c9c 	.word	0x08010c9c

0800ec70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7c:	f003 0301 	and.w	r3, r3, #1
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00a      	beq.n	800ec9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	430a      	orrs	r2, r1
 800ec98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9e:	f003 0302 	and.w	r3, r3, #2
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00a      	beq.n	800ecbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	430a      	orrs	r2, r1
 800ecba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc0:	f003 0304 	and.w	r3, r3, #4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d00a      	beq.n	800ecde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece2:	f003 0308 	and.w	r3, r3, #8
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00a      	beq.n	800ed00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	430a      	orrs	r2, r1
 800ecfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed04:	f003 0310 	and.w	r3, r3, #16
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d00a      	beq.n	800ed22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	430a      	orrs	r2, r1
 800ed20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed26:	f003 0320 	and.w	r3, r3, #32
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d00a      	beq.n	800ed44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	689b      	ldr	r3, [r3, #8]
 800ed34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	430a      	orrs	r2, r1
 800ed42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d01a      	beq.n	800ed86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	430a      	orrs	r2, r1
 800ed64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed6e:	d10a      	bne.n	800ed86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	430a      	orrs	r2, r1
 800ed84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00a      	beq.n	800eda8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	430a      	orrs	r2, r1
 800eda6:	605a      	str	r2, [r3, #4]
  }
}
 800eda8:	bf00      	nop
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b098      	sub	sp, #96	; 0x60
 800edb8:	af02      	add	r7, sp, #8
 800edba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800edc4:	f7f5 fb00 	bl	80043c8 <HAL_GetTick>
 800edc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f003 0308 	and.w	r3, r3, #8
 800edd4:	2b08      	cmp	r3, #8
 800edd6:	d12f      	bne.n	800ee38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800edd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eddc:	9300      	str	r3, [sp, #0]
 800edde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ede0:	2200      	movs	r2, #0
 800ede2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f000 f88e 	bl	800ef08 <UART_WaitOnFlagUntilTimeout>
 800edec:	4603      	mov	r3, r0
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d022      	beq.n	800ee38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfa:	e853 3f00 	ldrex	r3, [r3]
 800edfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee06:	653b      	str	r3, [r7, #80]	; 0x50
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee10:	647b      	str	r3, [r7, #68]	; 0x44
 800ee12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee18:	e841 2300 	strex	r3, r2, [r1]
 800ee1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1e6      	bne.n	800edf2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2220      	movs	r2, #32
 800ee28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e063      	b.n	800ef00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f003 0304 	and.w	r3, r3, #4
 800ee42:	2b04      	cmp	r3, #4
 800ee44:	d149      	bne.n	800eeda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee4a:	9300      	str	r3, [sp, #0]
 800ee4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f857 	bl	800ef08 <UART_WaitOnFlagUntilTimeout>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d03c      	beq.n	800eeda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	e853 3f00 	ldrex	r3, [r3]
 800ee6c:	623b      	str	r3, [r7, #32]
   return(result);
 800ee6e:	6a3b      	ldr	r3, [r7, #32]
 800ee70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	461a      	mov	r2, r3
 800ee7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee7e:	633b      	str	r3, [r7, #48]	; 0x30
 800ee80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee86:	e841 2300 	strex	r3, r2, [r1]
 800ee8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d1e6      	bne.n	800ee60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	3308      	adds	r3, #8
 800ee98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee9a:	693b      	ldr	r3, [r7, #16]
 800ee9c:	e853 3f00 	ldrex	r3, [r3]
 800eea0:	60fb      	str	r3, [r7, #12]
   return(result);
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	f023 0301 	bic.w	r3, r3, #1
 800eea8:	64bb      	str	r3, [r7, #72]	; 0x48
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	3308      	adds	r3, #8
 800eeb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eeb2:	61fa      	str	r2, [r7, #28]
 800eeb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeb6:	69b9      	ldr	r1, [r7, #24]
 800eeb8:	69fa      	ldr	r2, [r7, #28]
 800eeba:	e841 2300 	strex	r3, r2, [r1]
 800eebe:	617b      	str	r3, [r7, #20]
   return(result);
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d1e5      	bne.n	800ee92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2220      	movs	r2, #32
 800eeca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eed6:	2303      	movs	r3, #3
 800eed8:	e012      	b.n	800ef00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	2220      	movs	r2, #32
 800eede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2220      	movs	r2, #32
 800eee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2200      	movs	r2, #0
 800eef4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2200      	movs	r2, #0
 800eefa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3758      	adds	r7, #88	; 0x58
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	603b      	str	r3, [r7, #0]
 800ef14:	4613      	mov	r3, r2
 800ef16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef18:	e049      	b.n	800efae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef20:	d045      	beq.n	800efae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ef22:	f7f5 fa51 	bl	80043c8 <HAL_GetTick>
 800ef26:	4602      	mov	r2, r0
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	1ad3      	subs	r3, r2, r3
 800ef2c:	69ba      	ldr	r2, [r7, #24]
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d302      	bcc.n	800ef38 <UART_WaitOnFlagUntilTimeout+0x30>
 800ef32:	69bb      	ldr	r3, [r7, #24]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ef38:	2303      	movs	r3, #3
 800ef3a:	e048      	b.n	800efce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0304 	and.w	r3, r3, #4
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d031      	beq.n	800efae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	f003 0308 	and.w	r3, r3, #8
 800ef54:	2b08      	cmp	r3, #8
 800ef56:	d110      	bne.n	800ef7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2208      	movs	r2, #8
 800ef5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 f839 	bl	800efd8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2208      	movs	r2, #8
 800ef6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	e029      	b.n	800efce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	69db      	ldr	r3, [r3, #28]
 800ef80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef88:	d111      	bne.n	800efae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ef92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef94:	68f8      	ldr	r0, [r7, #12]
 800ef96:	f000 f81f 	bl	800efd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	2220      	movs	r2, #32
 800ef9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	2200      	movs	r2, #0
 800efa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800efaa:	2303      	movs	r3, #3
 800efac:	e00f      	b.n	800efce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	69da      	ldr	r2, [r3, #28]
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	4013      	ands	r3, r2
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	429a      	cmp	r2, r3
 800efbc:	bf0c      	ite	eq
 800efbe:	2301      	moveq	r3, #1
 800efc0:	2300      	movne	r3, #0
 800efc2:	b2db      	uxtb	r3, r3
 800efc4:	461a      	mov	r2, r3
 800efc6:	79fb      	ldrb	r3, [r7, #7]
 800efc8:	429a      	cmp	r2, r3
 800efca:	d0a6      	beq.n	800ef1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800efcc:	2300      	movs	r3, #0
}
 800efce:	4618      	mov	r0, r3
 800efd0:	3710      	adds	r7, #16
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}
	...

0800efd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800efd8:	b480      	push	{r7}
 800efda:	b095      	sub	sp, #84	; 0x54
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe8:	e853 3f00 	ldrex	r3, [r3]
 800efec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800efee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eff4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	461a      	mov	r2, r3
 800effc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800effe:	643b      	str	r3, [r7, #64]	; 0x40
 800f000:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f002:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f004:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f006:	e841 2300 	strex	r3, r2, [r1]
 800f00a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d1e6      	bne.n	800efe0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3308      	adds	r3, #8
 800f018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f01a:	6a3b      	ldr	r3, [r7, #32]
 800f01c:	e853 3f00 	ldrex	r3, [r3]
 800f020:	61fb      	str	r3, [r7, #28]
   return(result);
 800f022:	69fa      	ldr	r2, [r7, #28]
 800f024:	4b1e      	ldr	r3, [pc, #120]	; (800f0a0 <UART_EndRxTransfer+0xc8>)
 800f026:	4013      	ands	r3, r2
 800f028:	64bb      	str	r3, [r7, #72]	; 0x48
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	3308      	adds	r3, #8
 800f030:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f032:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f034:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f036:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f03a:	e841 2300 	strex	r3, r2, [r1]
 800f03e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1e5      	bne.n	800f012 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04a:	2b01      	cmp	r3, #1
 800f04c:	d118      	bne.n	800f080 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	e853 3f00 	ldrex	r3, [r3]
 800f05a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	f023 0310 	bic.w	r3, r3, #16
 800f062:	647b      	str	r3, [r7, #68]	; 0x44
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	461a      	mov	r2, r3
 800f06a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f06c:	61bb      	str	r3, [r7, #24]
 800f06e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f070:	6979      	ldr	r1, [r7, #20]
 800f072:	69ba      	ldr	r2, [r7, #24]
 800f074:	e841 2300 	strex	r3, r2, [r1]
 800f078:	613b      	str	r3, [r7, #16]
   return(result);
 800f07a:	693b      	ldr	r3, [r7, #16]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1e6      	bne.n	800f04e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	2220      	movs	r2, #32
 800f084:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f094:	bf00      	nop
 800f096:	3754      	adds	r7, #84	; 0x54
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr
 800f0a0:	effffffe 	.word	0xeffffffe

0800f0a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	f7fe ff52 	bl	800df6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f0c8:	bf00      	nop
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b088      	sub	sp, #32
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	e853 3f00 	ldrex	r3, [r3]
 800f0e4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ec:	61fb      	str	r3, [r7, #28]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	61bb      	str	r3, [r7, #24]
 800f0f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	6979      	ldr	r1, [r7, #20]
 800f0fc:	69ba      	ldr	r2, [r7, #24]
 800f0fe:	e841 2300 	strex	r3, r2, [r1]
 800f102:	613b      	str	r3, [r7, #16]
   return(result);
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1e6      	bne.n	800f0d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2220      	movs	r2, #32
 800f10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7fe ff1d 	bl	800df58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f11e:	bf00      	nop
 800f120:	3720      	adds	r7, #32
 800f122:	46bd      	mov	sp, r7
 800f124:	bd80      	pop	{r7, pc}

0800f126 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f126:	b480      	push	{r7}
 800f128:	b083      	sub	sp, #12
 800f12a:	af00      	add	r7, sp, #0
 800f12c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f12e:	bf00      	nop
 800f130:	370c      	adds	r7, #12
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f13a:	b480      	push	{r7}
 800f13c:	b083      	sub	sp, #12
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f142:	bf00      	nop
 800f144:	370c      	adds	r7, #12
 800f146:	46bd      	mov	sp, r7
 800f148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14c:	4770      	bx	lr

0800f14e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f14e:	b480      	push	{r7}
 800f150:	b083      	sub	sp, #12
 800f152:	af00      	add	r7, sp, #0
 800f154:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f156:	bf00      	nop
 800f158:	370c      	adds	r7, #12
 800f15a:	46bd      	mov	sp, r7
 800f15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f160:	4770      	bx	lr

0800f162 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f162:	b480      	push	{r7}
 800f164:	b085      	sub	sp, #20
 800f166:	af00      	add	r7, sp, #0
 800f168:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <HAL_UARTEx_DisableFifoMode+0x16>
 800f174:	2302      	movs	r3, #2
 800f176:	e027      	b.n	800f1c8 <HAL_UARTEx_DisableFifoMode+0x66>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2224      	movs	r2, #36	; 0x24
 800f184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	f022 0201 	bic.w	r2, r2, #1
 800f19e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f1a6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2220      	movs	r2, #32
 800f1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1c6:	2300      	movs	r3, #0
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
 800f1dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d101      	bne.n	800f1ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	e02d      	b.n	800f248 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2224      	movs	r2, #36	; 0x24
 800f1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f022 0201 	bic.w	r2, r2, #1
 800f212:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	689b      	ldr	r3, [r3, #8]
 800f21a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	430a      	orrs	r2, r1
 800f226:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f000 f84f 	bl	800f2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2220      	movs	r2, #32
 800f23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2200      	movs	r2, #0
 800f242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3710      	adds	r7, #16
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f260:	2b01      	cmp	r3, #1
 800f262:	d101      	bne.n	800f268 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f264:	2302      	movs	r3, #2
 800f266:	e02d      	b.n	800f2c4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2224      	movs	r2, #36	; 0x24
 800f274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f022 0201 	bic.w	r2, r2, #1
 800f28e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	683a      	ldr	r2, [r7, #0]
 800f2a0:	430a      	orrs	r2, r1
 800f2a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f000 f811 	bl	800f2cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2220      	movs	r2, #32
 800f2b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f2c2:	2300      	movs	r3, #0
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3710      	adds	r7, #16
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}

0800f2cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d108      	bne.n	800f2ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2201      	movs	r2, #1
 800f2e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2ec:	e031      	b.n	800f352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2ee:	2310      	movs	r3, #16
 800f2f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2f2:	2310      	movs	r3, #16
 800f2f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	0e5b      	lsrs	r3, r3, #25
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	f003 0307 	and.w	r3, r3, #7
 800f304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
 800f30c:	0f5b      	lsrs	r3, r3, #29
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	f003 0307 	and.w	r3, r3, #7
 800f314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	7b3a      	ldrb	r2, [r7, #12]
 800f31a:	4911      	ldr	r1, [pc, #68]	; (800f360 <UARTEx_SetNbDataToProcess+0x94>)
 800f31c:	5c8a      	ldrb	r2, [r1, r2]
 800f31e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f322:	7b3a      	ldrb	r2, [r7, #12]
 800f324:	490f      	ldr	r1, [pc, #60]	; (800f364 <UARTEx_SetNbDataToProcess+0x98>)
 800f326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f328:	fb93 f3f2 	sdiv	r3, r3, r2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f334:	7bfb      	ldrb	r3, [r7, #15]
 800f336:	7b7a      	ldrb	r2, [r7, #13]
 800f338:	4909      	ldr	r1, [pc, #36]	; (800f360 <UARTEx_SetNbDataToProcess+0x94>)
 800f33a:	5c8a      	ldrb	r2, [r1, r2]
 800f33c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f340:	7b7a      	ldrb	r2, [r7, #13]
 800f342:	4908      	ldr	r1, [pc, #32]	; (800f364 <UARTEx_SetNbDataToProcess+0x98>)
 800f344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f346:	fb93 f3f2 	sdiv	r3, r3, r2
 800f34a:	b29a      	uxth	r2, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f352:	bf00      	nop
 800f354:	3714      	adds	r7, #20
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	08010cb4 	.word	0x08010cb4
 800f364:	08010cbc 	.word	0x08010cbc

0800f368 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d121      	bne.n	800f3be <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681a      	ldr	r2, [r3, #0]
 800f37e:	4b27      	ldr	r3, [pc, #156]	; (800f41c <FMC_SDRAM_Init+0xb4>)
 800f380:	4013      	ands	r3, r2
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	6851      	ldr	r1, [r2, #4]
 800f386:	683a      	ldr	r2, [r7, #0]
 800f388:	6892      	ldr	r2, [r2, #8]
 800f38a:	4311      	orrs	r1, r2
 800f38c:	683a      	ldr	r2, [r7, #0]
 800f38e:	68d2      	ldr	r2, [r2, #12]
 800f390:	4311      	orrs	r1, r2
 800f392:	683a      	ldr	r2, [r7, #0]
 800f394:	6912      	ldr	r2, [r2, #16]
 800f396:	4311      	orrs	r1, r2
 800f398:	683a      	ldr	r2, [r7, #0]
 800f39a:	6952      	ldr	r2, [r2, #20]
 800f39c:	4311      	orrs	r1, r2
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	6992      	ldr	r2, [r2, #24]
 800f3a2:	4311      	orrs	r1, r2
 800f3a4:	683a      	ldr	r2, [r7, #0]
 800f3a6:	69d2      	ldr	r2, [r2, #28]
 800f3a8:	4311      	orrs	r1, r2
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	6a12      	ldr	r2, [r2, #32]
 800f3ae:	4311      	orrs	r1, r2
 800f3b0:	683a      	ldr	r2, [r7, #0]
 800f3b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800f3b4:	430a      	orrs	r2, r1
 800f3b6:	431a      	orrs	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	e026      	b.n	800f40c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	69d9      	ldr	r1, [r3, #28]
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	6a1b      	ldr	r3, [r3, #32]
 800f3ce:	4319      	orrs	r1, r3
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d4:	430b      	orrs	r3, r1
 800f3d6:	431a      	orrs	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	685a      	ldr	r2, [r3, #4]
 800f3e0:	4b0e      	ldr	r3, [pc, #56]	; (800f41c <FMC_SDRAM_Init+0xb4>)
 800f3e2:	4013      	ands	r3, r2
 800f3e4:	683a      	ldr	r2, [r7, #0]
 800f3e6:	6851      	ldr	r1, [r2, #4]
 800f3e8:	683a      	ldr	r2, [r7, #0]
 800f3ea:	6892      	ldr	r2, [r2, #8]
 800f3ec:	4311      	orrs	r1, r2
 800f3ee:	683a      	ldr	r2, [r7, #0]
 800f3f0:	68d2      	ldr	r2, [r2, #12]
 800f3f2:	4311      	orrs	r1, r2
 800f3f4:	683a      	ldr	r2, [r7, #0]
 800f3f6:	6912      	ldr	r2, [r2, #16]
 800f3f8:	4311      	orrs	r1, r2
 800f3fa:	683a      	ldr	r2, [r7, #0]
 800f3fc:	6952      	ldr	r2, [r2, #20]
 800f3fe:	4311      	orrs	r1, r2
 800f400:	683a      	ldr	r2, [r7, #0]
 800f402:	6992      	ldr	r2, [r2, #24]
 800f404:	430a      	orrs	r2, r1
 800f406:	431a      	orrs	r2, r3
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	370c      	adds	r7, #12
 800f412:	46bd      	mov	sp, r7
 800f414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f418:	4770      	bx	lr
 800f41a:	bf00      	nop
 800f41c:	ffff8000 	.word	0xffff8000

0800f420 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800f420:	b480      	push	{r7}
 800f422:	b085      	sub	sp, #20
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d128      	bne.n	800f484 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	689b      	ldr	r3, [r3, #8]
 800f436:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f43a:	68bb      	ldr	r3, [r7, #8]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	1e59      	subs	r1, r3, #1
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	3b01      	subs	r3, #1
 800f446:	011b      	lsls	r3, r3, #4
 800f448:	4319      	orrs	r1, r3
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	689b      	ldr	r3, [r3, #8]
 800f44e:	3b01      	subs	r3, #1
 800f450:	021b      	lsls	r3, r3, #8
 800f452:	4319      	orrs	r1, r3
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	3b01      	subs	r3, #1
 800f45a:	031b      	lsls	r3, r3, #12
 800f45c:	4319      	orrs	r1, r3
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	691b      	ldr	r3, [r3, #16]
 800f462:	3b01      	subs	r3, #1
 800f464:	041b      	lsls	r3, r3, #16
 800f466:	4319      	orrs	r1, r3
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	695b      	ldr	r3, [r3, #20]
 800f46c:	3b01      	subs	r3, #1
 800f46e:	051b      	lsls	r3, r3, #20
 800f470:	4319      	orrs	r1, r3
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	699b      	ldr	r3, [r3, #24]
 800f476:	3b01      	subs	r3, #1
 800f478:	061b      	lsls	r3, r3, #24
 800f47a:	430b      	orrs	r3, r1
 800f47c:	431a      	orrs	r2, r3
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	609a      	str	r2, [r3, #8]
 800f482:	e02d      	b.n	800f4e0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	689a      	ldr	r2, [r3, #8]
 800f488:	4b19      	ldr	r3, [pc, #100]	; (800f4f0 <FMC_SDRAM_Timing_Init+0xd0>)
 800f48a:	4013      	ands	r3, r2
 800f48c:	68ba      	ldr	r2, [r7, #8]
 800f48e:	68d2      	ldr	r2, [r2, #12]
 800f490:	3a01      	subs	r2, #1
 800f492:	0311      	lsls	r1, r2, #12
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	6952      	ldr	r2, [r2, #20]
 800f498:	3a01      	subs	r2, #1
 800f49a:	0512      	lsls	r2, r2, #20
 800f49c:	430a      	orrs	r2, r1
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	68db      	ldr	r3, [r3, #12]
 800f4a8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	1e59      	subs	r1, r3, #1
 800f4b2:	68bb      	ldr	r3, [r7, #8]
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	3b01      	subs	r3, #1
 800f4b8:	011b      	lsls	r3, r3, #4
 800f4ba:	4319      	orrs	r1, r3
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	021b      	lsls	r3, r3, #8
 800f4c4:	4319      	orrs	r1, r3
 800f4c6:	68bb      	ldr	r3, [r7, #8]
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	3b01      	subs	r3, #1
 800f4cc:	041b      	lsls	r3, r3, #16
 800f4ce:	4319      	orrs	r1, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	3b01      	subs	r3, #1
 800f4d6:	061b      	lsls	r3, r3, #24
 800f4d8:	430b      	orrs	r3, r1
 800f4da:	431a      	orrs	r2, r3
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800f4e0:	2300      	movs	r3, #0
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3714      	adds	r7, #20
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ec:	4770      	bx	lr
 800f4ee:	bf00      	nop
 800f4f0:	ff0f0fff 	.word	0xff0f0fff

0800f4f4 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	60f8      	str	r0, [r7, #12]
 800f4fc:	60b9      	str	r1, [r7, #8]
 800f4fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	691a      	ldr	r2, [r3, #16]
 800f504:	4b0c      	ldr	r3, [pc, #48]	; (800f538 <FMC_SDRAM_SendCommand+0x44>)
 800f506:	4013      	ands	r3, r2
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	6811      	ldr	r1, [r2, #0]
 800f50c:	68ba      	ldr	r2, [r7, #8]
 800f50e:	6852      	ldr	r2, [r2, #4]
 800f510:	4311      	orrs	r1, r2
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	6892      	ldr	r2, [r2, #8]
 800f516:	3a01      	subs	r2, #1
 800f518:	0152      	lsls	r2, r2, #5
 800f51a:	4311      	orrs	r1, r2
 800f51c:	68ba      	ldr	r2, [r7, #8]
 800f51e:	68d2      	ldr	r2, [r2, #12]
 800f520:	0252      	lsls	r2, r2, #9
 800f522:	430a      	orrs	r2, r1
 800f524:	431a      	orrs	r2, r3
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800f52a:	2300      	movs	r3, #0
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3714      	adds	r7, #20
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr
 800f538:	ffc00000 	.word	0xffc00000

0800f53c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800f53c:	b480      	push	{r7}
 800f53e:	b083      	sub	sp, #12
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	695a      	ldr	r2, [r3, #20]
 800f54a:	4b07      	ldr	r3, [pc, #28]	; (800f568 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800f54c:	4013      	ands	r3, r2
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	0052      	lsls	r2, r2, #1
 800f552:	431a      	orrs	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800f558:	2300      	movs	r3, #0
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	370c      	adds	r7, #12
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	ffffc001 	.word	0xffffc001

0800f56c <__errno>:
 800f56c:	4b01      	ldr	r3, [pc, #4]	; (800f574 <__errno+0x8>)
 800f56e:	6818      	ldr	r0, [r3, #0]
 800f570:	4770      	bx	lr
 800f572:	bf00      	nop
 800f574:	24000054 	.word	0x24000054

0800f578 <__libc_init_array>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	4d0d      	ldr	r5, [pc, #52]	; (800f5b0 <__libc_init_array+0x38>)
 800f57c:	4c0d      	ldr	r4, [pc, #52]	; (800f5b4 <__libc_init_array+0x3c>)
 800f57e:	1b64      	subs	r4, r4, r5
 800f580:	10a4      	asrs	r4, r4, #2
 800f582:	2600      	movs	r6, #0
 800f584:	42a6      	cmp	r6, r4
 800f586:	d109      	bne.n	800f59c <__libc_init_array+0x24>
 800f588:	4d0b      	ldr	r5, [pc, #44]	; (800f5b8 <__libc_init_array+0x40>)
 800f58a:	4c0c      	ldr	r4, [pc, #48]	; (800f5bc <__libc_init_array+0x44>)
 800f58c:	f001 f87c 	bl	8010688 <_init>
 800f590:	1b64      	subs	r4, r4, r5
 800f592:	10a4      	asrs	r4, r4, #2
 800f594:	2600      	movs	r6, #0
 800f596:	42a6      	cmp	r6, r4
 800f598:	d105      	bne.n	800f5a6 <__libc_init_array+0x2e>
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5a0:	4798      	blx	r3
 800f5a2:	3601      	adds	r6, #1
 800f5a4:	e7ee      	b.n	800f584 <__libc_init_array+0xc>
 800f5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f5aa:	4798      	blx	r3
 800f5ac:	3601      	adds	r6, #1
 800f5ae:	e7f2      	b.n	800f596 <__libc_init_array+0x1e>
 800f5b0:	08010d64 	.word	0x08010d64
 800f5b4:	08010d64 	.word	0x08010d64
 800f5b8:	08010d64 	.word	0x08010d64
 800f5bc:	08010d68 	.word	0x08010d68

0800f5c0 <memset>:
 800f5c0:	4402      	add	r2, r0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d100      	bne.n	800f5ca <memset+0xa>
 800f5c8:	4770      	bx	lr
 800f5ca:	f803 1b01 	strb.w	r1, [r3], #1
 800f5ce:	e7f9      	b.n	800f5c4 <memset+0x4>

0800f5d0 <iprintf>:
 800f5d0:	b40f      	push	{r0, r1, r2, r3}
 800f5d2:	4b0a      	ldr	r3, [pc, #40]	; (800f5fc <iprintf+0x2c>)
 800f5d4:	b513      	push	{r0, r1, r4, lr}
 800f5d6:	681c      	ldr	r4, [r3, #0]
 800f5d8:	b124      	cbz	r4, 800f5e4 <iprintf+0x14>
 800f5da:	69a3      	ldr	r3, [r4, #24]
 800f5dc:	b913      	cbnz	r3, 800f5e4 <iprintf+0x14>
 800f5de:	4620      	mov	r0, r4
 800f5e0:	f000 f9ee 	bl	800f9c0 <__sinit>
 800f5e4:	ab05      	add	r3, sp, #20
 800f5e6:	9a04      	ldr	r2, [sp, #16]
 800f5e8:	68a1      	ldr	r1, [r4, #8]
 800f5ea:	9301      	str	r3, [sp, #4]
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f000 fbff 	bl	800fdf0 <_vfiprintf_r>
 800f5f2:	b002      	add	sp, #8
 800f5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5f8:	b004      	add	sp, #16
 800f5fa:	4770      	bx	lr
 800f5fc:	24000054 	.word	0x24000054

0800f600 <setvbuf>:
 800f600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f604:	461d      	mov	r5, r3
 800f606:	4b5d      	ldr	r3, [pc, #372]	; (800f77c <setvbuf+0x17c>)
 800f608:	681f      	ldr	r7, [r3, #0]
 800f60a:	4604      	mov	r4, r0
 800f60c:	460e      	mov	r6, r1
 800f60e:	4690      	mov	r8, r2
 800f610:	b127      	cbz	r7, 800f61c <setvbuf+0x1c>
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	b913      	cbnz	r3, 800f61c <setvbuf+0x1c>
 800f616:	4638      	mov	r0, r7
 800f618:	f000 f9d2 	bl	800f9c0 <__sinit>
 800f61c:	4b58      	ldr	r3, [pc, #352]	; (800f780 <setvbuf+0x180>)
 800f61e:	429c      	cmp	r4, r3
 800f620:	d167      	bne.n	800f6f2 <setvbuf+0xf2>
 800f622:	687c      	ldr	r4, [r7, #4]
 800f624:	f1b8 0f02 	cmp.w	r8, #2
 800f628:	d006      	beq.n	800f638 <setvbuf+0x38>
 800f62a:	f1b8 0f01 	cmp.w	r8, #1
 800f62e:	f200 809f 	bhi.w	800f770 <setvbuf+0x170>
 800f632:	2d00      	cmp	r5, #0
 800f634:	f2c0 809c 	blt.w	800f770 <setvbuf+0x170>
 800f638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f63a:	07db      	lsls	r3, r3, #31
 800f63c:	d405      	bmi.n	800f64a <setvbuf+0x4a>
 800f63e:	89a3      	ldrh	r3, [r4, #12]
 800f640:	0598      	lsls	r0, r3, #22
 800f642:	d402      	bmi.n	800f64a <setvbuf+0x4a>
 800f644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f646:	f000 fa59 	bl	800fafc <__retarget_lock_acquire_recursive>
 800f64a:	4621      	mov	r1, r4
 800f64c:	4638      	mov	r0, r7
 800f64e:	f000 f923 	bl	800f898 <_fflush_r>
 800f652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f654:	b141      	cbz	r1, 800f668 <setvbuf+0x68>
 800f656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f65a:	4299      	cmp	r1, r3
 800f65c:	d002      	beq.n	800f664 <setvbuf+0x64>
 800f65e:	4638      	mov	r0, r7
 800f660:	f000 fabc 	bl	800fbdc <_free_r>
 800f664:	2300      	movs	r3, #0
 800f666:	6363      	str	r3, [r4, #52]	; 0x34
 800f668:	2300      	movs	r3, #0
 800f66a:	61a3      	str	r3, [r4, #24]
 800f66c:	6063      	str	r3, [r4, #4]
 800f66e:	89a3      	ldrh	r3, [r4, #12]
 800f670:	0619      	lsls	r1, r3, #24
 800f672:	d503      	bpl.n	800f67c <setvbuf+0x7c>
 800f674:	6921      	ldr	r1, [r4, #16]
 800f676:	4638      	mov	r0, r7
 800f678:	f000 fab0 	bl	800fbdc <_free_r>
 800f67c:	89a3      	ldrh	r3, [r4, #12]
 800f67e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f682:	f023 0303 	bic.w	r3, r3, #3
 800f686:	f1b8 0f02 	cmp.w	r8, #2
 800f68a:	81a3      	strh	r3, [r4, #12]
 800f68c:	d06c      	beq.n	800f768 <setvbuf+0x168>
 800f68e:	ab01      	add	r3, sp, #4
 800f690:	466a      	mov	r2, sp
 800f692:	4621      	mov	r1, r4
 800f694:	4638      	mov	r0, r7
 800f696:	f000 fa33 	bl	800fb00 <__swhatbuf_r>
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	4318      	orrs	r0, r3
 800f69e:	81a0      	strh	r0, [r4, #12]
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	d130      	bne.n	800f706 <setvbuf+0x106>
 800f6a4:	9d00      	ldr	r5, [sp, #0]
 800f6a6:	4628      	mov	r0, r5
 800f6a8:	f000 fa90 	bl	800fbcc <malloc>
 800f6ac:	4606      	mov	r6, r0
 800f6ae:	2800      	cmp	r0, #0
 800f6b0:	d155      	bne.n	800f75e <setvbuf+0x15e>
 800f6b2:	f8dd 9000 	ldr.w	r9, [sp]
 800f6b6:	45a9      	cmp	r9, r5
 800f6b8:	d14a      	bne.n	800f750 <setvbuf+0x150>
 800f6ba:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f6be:	2200      	movs	r2, #0
 800f6c0:	60a2      	str	r2, [r4, #8]
 800f6c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f6c6:	6022      	str	r2, [r4, #0]
 800f6c8:	6122      	str	r2, [r4, #16]
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6d0:	6162      	str	r2, [r4, #20]
 800f6d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6d4:	f043 0302 	orr.w	r3, r3, #2
 800f6d8:	07d2      	lsls	r2, r2, #31
 800f6da:	81a3      	strh	r3, [r4, #12]
 800f6dc:	d405      	bmi.n	800f6ea <setvbuf+0xea>
 800f6de:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f6e2:	d102      	bne.n	800f6ea <setvbuf+0xea>
 800f6e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6e6:	f000 fa0a 	bl	800fafe <__retarget_lock_release_recursive>
 800f6ea:	4628      	mov	r0, r5
 800f6ec:	b003      	add	sp, #12
 800f6ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6f2:	4b24      	ldr	r3, [pc, #144]	; (800f784 <setvbuf+0x184>)
 800f6f4:	429c      	cmp	r4, r3
 800f6f6:	d101      	bne.n	800f6fc <setvbuf+0xfc>
 800f6f8:	68bc      	ldr	r4, [r7, #8]
 800f6fa:	e793      	b.n	800f624 <setvbuf+0x24>
 800f6fc:	4b22      	ldr	r3, [pc, #136]	; (800f788 <setvbuf+0x188>)
 800f6fe:	429c      	cmp	r4, r3
 800f700:	bf08      	it	eq
 800f702:	68fc      	ldreq	r4, [r7, #12]
 800f704:	e78e      	b.n	800f624 <setvbuf+0x24>
 800f706:	2e00      	cmp	r6, #0
 800f708:	d0cd      	beq.n	800f6a6 <setvbuf+0xa6>
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	b913      	cbnz	r3, 800f714 <setvbuf+0x114>
 800f70e:	4638      	mov	r0, r7
 800f710:	f000 f956 	bl	800f9c0 <__sinit>
 800f714:	f1b8 0f01 	cmp.w	r8, #1
 800f718:	bf08      	it	eq
 800f71a:	89a3      	ldrheq	r3, [r4, #12]
 800f71c:	6026      	str	r6, [r4, #0]
 800f71e:	bf04      	itt	eq
 800f720:	f043 0301 	orreq.w	r3, r3, #1
 800f724:	81a3      	strheq	r3, [r4, #12]
 800f726:	89a2      	ldrh	r2, [r4, #12]
 800f728:	f012 0308 	ands.w	r3, r2, #8
 800f72c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f730:	d01c      	beq.n	800f76c <setvbuf+0x16c>
 800f732:	07d3      	lsls	r3, r2, #31
 800f734:	bf41      	itttt	mi
 800f736:	2300      	movmi	r3, #0
 800f738:	426d      	negmi	r5, r5
 800f73a:	60a3      	strmi	r3, [r4, #8]
 800f73c:	61a5      	strmi	r5, [r4, #24]
 800f73e:	bf58      	it	pl
 800f740:	60a5      	strpl	r5, [r4, #8]
 800f742:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f744:	f015 0501 	ands.w	r5, r5, #1
 800f748:	d115      	bne.n	800f776 <setvbuf+0x176>
 800f74a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f74e:	e7c8      	b.n	800f6e2 <setvbuf+0xe2>
 800f750:	4648      	mov	r0, r9
 800f752:	f000 fa3b 	bl	800fbcc <malloc>
 800f756:	4606      	mov	r6, r0
 800f758:	2800      	cmp	r0, #0
 800f75a:	d0ae      	beq.n	800f6ba <setvbuf+0xba>
 800f75c:	464d      	mov	r5, r9
 800f75e:	89a3      	ldrh	r3, [r4, #12]
 800f760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f764:	81a3      	strh	r3, [r4, #12]
 800f766:	e7d0      	b.n	800f70a <setvbuf+0x10a>
 800f768:	2500      	movs	r5, #0
 800f76a:	e7a8      	b.n	800f6be <setvbuf+0xbe>
 800f76c:	60a3      	str	r3, [r4, #8]
 800f76e:	e7e8      	b.n	800f742 <setvbuf+0x142>
 800f770:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f774:	e7b9      	b.n	800f6ea <setvbuf+0xea>
 800f776:	2500      	movs	r5, #0
 800f778:	e7b7      	b.n	800f6ea <setvbuf+0xea>
 800f77a:	bf00      	nop
 800f77c:	24000054 	.word	0x24000054
 800f780:	08010ce8 	.word	0x08010ce8
 800f784:	08010d08 	.word	0x08010d08
 800f788:	08010cc8 	.word	0x08010cc8

0800f78c <__sflush_r>:
 800f78c:	898a      	ldrh	r2, [r1, #12]
 800f78e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f792:	4605      	mov	r5, r0
 800f794:	0710      	lsls	r0, r2, #28
 800f796:	460c      	mov	r4, r1
 800f798:	d458      	bmi.n	800f84c <__sflush_r+0xc0>
 800f79a:	684b      	ldr	r3, [r1, #4]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	dc05      	bgt.n	800f7ac <__sflush_r+0x20>
 800f7a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	dc02      	bgt.n	800f7ac <__sflush_r+0x20>
 800f7a6:	2000      	movs	r0, #0
 800f7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7ae:	2e00      	cmp	r6, #0
 800f7b0:	d0f9      	beq.n	800f7a6 <__sflush_r+0x1a>
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f7b8:	682f      	ldr	r7, [r5, #0]
 800f7ba:	602b      	str	r3, [r5, #0]
 800f7bc:	d032      	beq.n	800f824 <__sflush_r+0x98>
 800f7be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	075a      	lsls	r2, r3, #29
 800f7c4:	d505      	bpl.n	800f7d2 <__sflush_r+0x46>
 800f7c6:	6863      	ldr	r3, [r4, #4]
 800f7c8:	1ac0      	subs	r0, r0, r3
 800f7ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f7cc:	b10b      	cbz	r3, 800f7d2 <__sflush_r+0x46>
 800f7ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7d0:	1ac0      	subs	r0, r0, r3
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f7d8:	6a21      	ldr	r1, [r4, #32]
 800f7da:	4628      	mov	r0, r5
 800f7dc:	47b0      	blx	r6
 800f7de:	1c43      	adds	r3, r0, #1
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	d106      	bne.n	800f7f2 <__sflush_r+0x66>
 800f7e4:	6829      	ldr	r1, [r5, #0]
 800f7e6:	291d      	cmp	r1, #29
 800f7e8:	d82c      	bhi.n	800f844 <__sflush_r+0xb8>
 800f7ea:	4a2a      	ldr	r2, [pc, #168]	; (800f894 <__sflush_r+0x108>)
 800f7ec:	40ca      	lsrs	r2, r1
 800f7ee:	07d6      	lsls	r6, r2, #31
 800f7f0:	d528      	bpl.n	800f844 <__sflush_r+0xb8>
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	6062      	str	r2, [r4, #4]
 800f7f6:	04d9      	lsls	r1, r3, #19
 800f7f8:	6922      	ldr	r2, [r4, #16]
 800f7fa:	6022      	str	r2, [r4, #0]
 800f7fc:	d504      	bpl.n	800f808 <__sflush_r+0x7c>
 800f7fe:	1c42      	adds	r2, r0, #1
 800f800:	d101      	bne.n	800f806 <__sflush_r+0x7a>
 800f802:	682b      	ldr	r3, [r5, #0]
 800f804:	b903      	cbnz	r3, 800f808 <__sflush_r+0x7c>
 800f806:	6560      	str	r0, [r4, #84]	; 0x54
 800f808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f80a:	602f      	str	r7, [r5, #0]
 800f80c:	2900      	cmp	r1, #0
 800f80e:	d0ca      	beq.n	800f7a6 <__sflush_r+0x1a>
 800f810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f814:	4299      	cmp	r1, r3
 800f816:	d002      	beq.n	800f81e <__sflush_r+0x92>
 800f818:	4628      	mov	r0, r5
 800f81a:	f000 f9df 	bl	800fbdc <_free_r>
 800f81e:	2000      	movs	r0, #0
 800f820:	6360      	str	r0, [r4, #52]	; 0x34
 800f822:	e7c1      	b.n	800f7a8 <__sflush_r+0x1c>
 800f824:	6a21      	ldr	r1, [r4, #32]
 800f826:	2301      	movs	r3, #1
 800f828:	4628      	mov	r0, r5
 800f82a:	47b0      	blx	r6
 800f82c:	1c41      	adds	r1, r0, #1
 800f82e:	d1c7      	bne.n	800f7c0 <__sflush_r+0x34>
 800f830:	682b      	ldr	r3, [r5, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d0c4      	beq.n	800f7c0 <__sflush_r+0x34>
 800f836:	2b1d      	cmp	r3, #29
 800f838:	d001      	beq.n	800f83e <__sflush_r+0xb2>
 800f83a:	2b16      	cmp	r3, #22
 800f83c:	d101      	bne.n	800f842 <__sflush_r+0xb6>
 800f83e:	602f      	str	r7, [r5, #0]
 800f840:	e7b1      	b.n	800f7a6 <__sflush_r+0x1a>
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	e7ad      	b.n	800f7a8 <__sflush_r+0x1c>
 800f84c:	690f      	ldr	r7, [r1, #16]
 800f84e:	2f00      	cmp	r7, #0
 800f850:	d0a9      	beq.n	800f7a6 <__sflush_r+0x1a>
 800f852:	0793      	lsls	r3, r2, #30
 800f854:	680e      	ldr	r6, [r1, #0]
 800f856:	bf08      	it	eq
 800f858:	694b      	ldreq	r3, [r1, #20]
 800f85a:	600f      	str	r7, [r1, #0]
 800f85c:	bf18      	it	ne
 800f85e:	2300      	movne	r3, #0
 800f860:	eba6 0807 	sub.w	r8, r6, r7
 800f864:	608b      	str	r3, [r1, #8]
 800f866:	f1b8 0f00 	cmp.w	r8, #0
 800f86a:	dd9c      	ble.n	800f7a6 <__sflush_r+0x1a>
 800f86c:	6a21      	ldr	r1, [r4, #32]
 800f86e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f870:	4643      	mov	r3, r8
 800f872:	463a      	mov	r2, r7
 800f874:	4628      	mov	r0, r5
 800f876:	47b0      	blx	r6
 800f878:	2800      	cmp	r0, #0
 800f87a:	dc06      	bgt.n	800f88a <__sflush_r+0xfe>
 800f87c:	89a3      	ldrh	r3, [r4, #12]
 800f87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f882:	81a3      	strh	r3, [r4, #12]
 800f884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f888:	e78e      	b.n	800f7a8 <__sflush_r+0x1c>
 800f88a:	4407      	add	r7, r0
 800f88c:	eba8 0800 	sub.w	r8, r8, r0
 800f890:	e7e9      	b.n	800f866 <__sflush_r+0xda>
 800f892:	bf00      	nop
 800f894:	20400001 	.word	0x20400001

0800f898 <_fflush_r>:
 800f898:	b538      	push	{r3, r4, r5, lr}
 800f89a:	690b      	ldr	r3, [r1, #16]
 800f89c:	4605      	mov	r5, r0
 800f89e:	460c      	mov	r4, r1
 800f8a0:	b913      	cbnz	r3, 800f8a8 <_fflush_r+0x10>
 800f8a2:	2500      	movs	r5, #0
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	bd38      	pop	{r3, r4, r5, pc}
 800f8a8:	b118      	cbz	r0, 800f8b2 <_fflush_r+0x1a>
 800f8aa:	6983      	ldr	r3, [r0, #24]
 800f8ac:	b90b      	cbnz	r3, 800f8b2 <_fflush_r+0x1a>
 800f8ae:	f000 f887 	bl	800f9c0 <__sinit>
 800f8b2:	4b14      	ldr	r3, [pc, #80]	; (800f904 <_fflush_r+0x6c>)
 800f8b4:	429c      	cmp	r4, r3
 800f8b6:	d11b      	bne.n	800f8f0 <_fflush_r+0x58>
 800f8b8:	686c      	ldr	r4, [r5, #4]
 800f8ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d0ef      	beq.n	800f8a2 <_fflush_r+0xa>
 800f8c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f8c4:	07d0      	lsls	r0, r2, #31
 800f8c6:	d404      	bmi.n	800f8d2 <_fflush_r+0x3a>
 800f8c8:	0599      	lsls	r1, r3, #22
 800f8ca:	d402      	bmi.n	800f8d2 <_fflush_r+0x3a>
 800f8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ce:	f000 f915 	bl	800fafc <__retarget_lock_acquire_recursive>
 800f8d2:	4628      	mov	r0, r5
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	f7ff ff59 	bl	800f78c <__sflush_r>
 800f8da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8dc:	07da      	lsls	r2, r3, #31
 800f8de:	4605      	mov	r5, r0
 800f8e0:	d4e0      	bmi.n	800f8a4 <_fflush_r+0xc>
 800f8e2:	89a3      	ldrh	r3, [r4, #12]
 800f8e4:	059b      	lsls	r3, r3, #22
 800f8e6:	d4dd      	bmi.n	800f8a4 <_fflush_r+0xc>
 800f8e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8ea:	f000 f908 	bl	800fafe <__retarget_lock_release_recursive>
 800f8ee:	e7d9      	b.n	800f8a4 <_fflush_r+0xc>
 800f8f0:	4b05      	ldr	r3, [pc, #20]	; (800f908 <_fflush_r+0x70>)
 800f8f2:	429c      	cmp	r4, r3
 800f8f4:	d101      	bne.n	800f8fa <_fflush_r+0x62>
 800f8f6:	68ac      	ldr	r4, [r5, #8]
 800f8f8:	e7df      	b.n	800f8ba <_fflush_r+0x22>
 800f8fa:	4b04      	ldr	r3, [pc, #16]	; (800f90c <_fflush_r+0x74>)
 800f8fc:	429c      	cmp	r4, r3
 800f8fe:	bf08      	it	eq
 800f900:	68ec      	ldreq	r4, [r5, #12]
 800f902:	e7da      	b.n	800f8ba <_fflush_r+0x22>
 800f904:	08010ce8 	.word	0x08010ce8
 800f908:	08010d08 	.word	0x08010d08
 800f90c:	08010cc8 	.word	0x08010cc8

0800f910 <std>:
 800f910:	2300      	movs	r3, #0
 800f912:	b510      	push	{r4, lr}
 800f914:	4604      	mov	r4, r0
 800f916:	e9c0 3300 	strd	r3, r3, [r0]
 800f91a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f91e:	6083      	str	r3, [r0, #8]
 800f920:	8181      	strh	r1, [r0, #12]
 800f922:	6643      	str	r3, [r0, #100]	; 0x64
 800f924:	81c2      	strh	r2, [r0, #14]
 800f926:	6183      	str	r3, [r0, #24]
 800f928:	4619      	mov	r1, r3
 800f92a:	2208      	movs	r2, #8
 800f92c:	305c      	adds	r0, #92	; 0x5c
 800f92e:	f7ff fe47 	bl	800f5c0 <memset>
 800f932:	4b05      	ldr	r3, [pc, #20]	; (800f948 <std+0x38>)
 800f934:	6263      	str	r3, [r4, #36]	; 0x24
 800f936:	4b05      	ldr	r3, [pc, #20]	; (800f94c <std+0x3c>)
 800f938:	62a3      	str	r3, [r4, #40]	; 0x28
 800f93a:	4b05      	ldr	r3, [pc, #20]	; (800f950 <std+0x40>)
 800f93c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f93e:	4b05      	ldr	r3, [pc, #20]	; (800f954 <std+0x44>)
 800f940:	6224      	str	r4, [r4, #32]
 800f942:	6323      	str	r3, [r4, #48]	; 0x30
 800f944:	bd10      	pop	{r4, pc}
 800f946:	bf00      	nop
 800f948:	08010399 	.word	0x08010399
 800f94c:	080103bb 	.word	0x080103bb
 800f950:	080103f3 	.word	0x080103f3
 800f954:	08010417 	.word	0x08010417

0800f958 <_cleanup_r>:
 800f958:	4901      	ldr	r1, [pc, #4]	; (800f960 <_cleanup_r+0x8>)
 800f95a:	f000 b8af 	b.w	800fabc <_fwalk_reent>
 800f95e:	bf00      	nop
 800f960:	0800f899 	.word	0x0800f899

0800f964 <__sfmoreglue>:
 800f964:	b570      	push	{r4, r5, r6, lr}
 800f966:	2268      	movs	r2, #104	; 0x68
 800f968:	1e4d      	subs	r5, r1, #1
 800f96a:	4355      	muls	r5, r2
 800f96c:	460e      	mov	r6, r1
 800f96e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f972:	f000 f99f 	bl	800fcb4 <_malloc_r>
 800f976:	4604      	mov	r4, r0
 800f978:	b140      	cbz	r0, 800f98c <__sfmoreglue+0x28>
 800f97a:	2100      	movs	r1, #0
 800f97c:	e9c0 1600 	strd	r1, r6, [r0]
 800f980:	300c      	adds	r0, #12
 800f982:	60a0      	str	r0, [r4, #8]
 800f984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f988:	f7ff fe1a 	bl	800f5c0 <memset>
 800f98c:	4620      	mov	r0, r4
 800f98e:	bd70      	pop	{r4, r5, r6, pc}

0800f990 <__sfp_lock_acquire>:
 800f990:	4801      	ldr	r0, [pc, #4]	; (800f998 <__sfp_lock_acquire+0x8>)
 800f992:	f000 b8b3 	b.w	800fafc <__retarget_lock_acquire_recursive>
 800f996:	bf00      	nop
 800f998:	24000e71 	.word	0x24000e71

0800f99c <__sfp_lock_release>:
 800f99c:	4801      	ldr	r0, [pc, #4]	; (800f9a4 <__sfp_lock_release+0x8>)
 800f99e:	f000 b8ae 	b.w	800fafe <__retarget_lock_release_recursive>
 800f9a2:	bf00      	nop
 800f9a4:	24000e71 	.word	0x24000e71

0800f9a8 <__sinit_lock_acquire>:
 800f9a8:	4801      	ldr	r0, [pc, #4]	; (800f9b0 <__sinit_lock_acquire+0x8>)
 800f9aa:	f000 b8a7 	b.w	800fafc <__retarget_lock_acquire_recursive>
 800f9ae:	bf00      	nop
 800f9b0:	24000e72 	.word	0x24000e72

0800f9b4 <__sinit_lock_release>:
 800f9b4:	4801      	ldr	r0, [pc, #4]	; (800f9bc <__sinit_lock_release+0x8>)
 800f9b6:	f000 b8a2 	b.w	800fafe <__retarget_lock_release_recursive>
 800f9ba:	bf00      	nop
 800f9bc:	24000e72 	.word	0x24000e72

0800f9c0 <__sinit>:
 800f9c0:	b510      	push	{r4, lr}
 800f9c2:	4604      	mov	r4, r0
 800f9c4:	f7ff fff0 	bl	800f9a8 <__sinit_lock_acquire>
 800f9c8:	69a3      	ldr	r3, [r4, #24]
 800f9ca:	b11b      	cbz	r3, 800f9d4 <__sinit+0x14>
 800f9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9d0:	f7ff bff0 	b.w	800f9b4 <__sinit_lock_release>
 800f9d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f9d8:	6523      	str	r3, [r4, #80]	; 0x50
 800f9da:	4b13      	ldr	r3, [pc, #76]	; (800fa28 <__sinit+0x68>)
 800f9dc:	4a13      	ldr	r2, [pc, #76]	; (800fa2c <__sinit+0x6c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f9e2:	42a3      	cmp	r3, r4
 800f9e4:	bf04      	itt	eq
 800f9e6:	2301      	moveq	r3, #1
 800f9e8:	61a3      	streq	r3, [r4, #24]
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f000 f820 	bl	800fa30 <__sfp>
 800f9f0:	6060      	str	r0, [r4, #4]
 800f9f2:	4620      	mov	r0, r4
 800f9f4:	f000 f81c 	bl	800fa30 <__sfp>
 800f9f8:	60a0      	str	r0, [r4, #8]
 800f9fa:	4620      	mov	r0, r4
 800f9fc:	f000 f818 	bl	800fa30 <__sfp>
 800fa00:	2200      	movs	r2, #0
 800fa02:	60e0      	str	r0, [r4, #12]
 800fa04:	2104      	movs	r1, #4
 800fa06:	6860      	ldr	r0, [r4, #4]
 800fa08:	f7ff ff82 	bl	800f910 <std>
 800fa0c:	68a0      	ldr	r0, [r4, #8]
 800fa0e:	2201      	movs	r2, #1
 800fa10:	2109      	movs	r1, #9
 800fa12:	f7ff ff7d 	bl	800f910 <std>
 800fa16:	68e0      	ldr	r0, [r4, #12]
 800fa18:	2202      	movs	r2, #2
 800fa1a:	2112      	movs	r1, #18
 800fa1c:	f7ff ff78 	bl	800f910 <std>
 800fa20:	2301      	movs	r3, #1
 800fa22:	61a3      	str	r3, [r4, #24]
 800fa24:	e7d2      	b.n	800f9cc <__sinit+0xc>
 800fa26:	bf00      	nop
 800fa28:	08010cc4 	.word	0x08010cc4
 800fa2c:	0800f959 	.word	0x0800f959

0800fa30 <__sfp>:
 800fa30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa32:	4607      	mov	r7, r0
 800fa34:	f7ff ffac 	bl	800f990 <__sfp_lock_acquire>
 800fa38:	4b1e      	ldr	r3, [pc, #120]	; (800fab4 <__sfp+0x84>)
 800fa3a:	681e      	ldr	r6, [r3, #0]
 800fa3c:	69b3      	ldr	r3, [r6, #24]
 800fa3e:	b913      	cbnz	r3, 800fa46 <__sfp+0x16>
 800fa40:	4630      	mov	r0, r6
 800fa42:	f7ff ffbd 	bl	800f9c0 <__sinit>
 800fa46:	3648      	adds	r6, #72	; 0x48
 800fa48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fa4c:	3b01      	subs	r3, #1
 800fa4e:	d503      	bpl.n	800fa58 <__sfp+0x28>
 800fa50:	6833      	ldr	r3, [r6, #0]
 800fa52:	b30b      	cbz	r3, 800fa98 <__sfp+0x68>
 800fa54:	6836      	ldr	r6, [r6, #0]
 800fa56:	e7f7      	b.n	800fa48 <__sfp+0x18>
 800fa58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fa5c:	b9d5      	cbnz	r5, 800fa94 <__sfp+0x64>
 800fa5e:	4b16      	ldr	r3, [pc, #88]	; (800fab8 <__sfp+0x88>)
 800fa60:	60e3      	str	r3, [r4, #12]
 800fa62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fa66:	6665      	str	r5, [r4, #100]	; 0x64
 800fa68:	f000 f847 	bl	800fafa <__retarget_lock_init_recursive>
 800fa6c:	f7ff ff96 	bl	800f99c <__sfp_lock_release>
 800fa70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fa74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fa78:	6025      	str	r5, [r4, #0]
 800fa7a:	61a5      	str	r5, [r4, #24]
 800fa7c:	2208      	movs	r2, #8
 800fa7e:	4629      	mov	r1, r5
 800fa80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fa84:	f7ff fd9c 	bl	800f5c0 <memset>
 800fa88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fa8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fa90:	4620      	mov	r0, r4
 800fa92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa94:	3468      	adds	r4, #104	; 0x68
 800fa96:	e7d9      	b.n	800fa4c <__sfp+0x1c>
 800fa98:	2104      	movs	r1, #4
 800fa9a:	4638      	mov	r0, r7
 800fa9c:	f7ff ff62 	bl	800f964 <__sfmoreglue>
 800faa0:	4604      	mov	r4, r0
 800faa2:	6030      	str	r0, [r6, #0]
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d1d5      	bne.n	800fa54 <__sfp+0x24>
 800faa8:	f7ff ff78 	bl	800f99c <__sfp_lock_release>
 800faac:	230c      	movs	r3, #12
 800faae:	603b      	str	r3, [r7, #0]
 800fab0:	e7ee      	b.n	800fa90 <__sfp+0x60>
 800fab2:	bf00      	nop
 800fab4:	08010cc4 	.word	0x08010cc4
 800fab8:	ffff0001 	.word	0xffff0001

0800fabc <_fwalk_reent>:
 800fabc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fac0:	4606      	mov	r6, r0
 800fac2:	4688      	mov	r8, r1
 800fac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fac8:	2700      	movs	r7, #0
 800faca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800face:	f1b9 0901 	subs.w	r9, r9, #1
 800fad2:	d505      	bpl.n	800fae0 <_fwalk_reent+0x24>
 800fad4:	6824      	ldr	r4, [r4, #0]
 800fad6:	2c00      	cmp	r4, #0
 800fad8:	d1f7      	bne.n	800faca <_fwalk_reent+0xe>
 800fada:	4638      	mov	r0, r7
 800fadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fae0:	89ab      	ldrh	r3, [r5, #12]
 800fae2:	2b01      	cmp	r3, #1
 800fae4:	d907      	bls.n	800faf6 <_fwalk_reent+0x3a>
 800fae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800faea:	3301      	adds	r3, #1
 800faec:	d003      	beq.n	800faf6 <_fwalk_reent+0x3a>
 800faee:	4629      	mov	r1, r5
 800faf0:	4630      	mov	r0, r6
 800faf2:	47c0      	blx	r8
 800faf4:	4307      	orrs	r7, r0
 800faf6:	3568      	adds	r5, #104	; 0x68
 800faf8:	e7e9      	b.n	800face <_fwalk_reent+0x12>

0800fafa <__retarget_lock_init_recursive>:
 800fafa:	4770      	bx	lr

0800fafc <__retarget_lock_acquire_recursive>:
 800fafc:	4770      	bx	lr

0800fafe <__retarget_lock_release_recursive>:
 800fafe:	4770      	bx	lr

0800fb00 <__swhatbuf_r>:
 800fb00:	b570      	push	{r4, r5, r6, lr}
 800fb02:	460e      	mov	r6, r1
 800fb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb08:	2900      	cmp	r1, #0
 800fb0a:	b096      	sub	sp, #88	; 0x58
 800fb0c:	4614      	mov	r4, r2
 800fb0e:	461d      	mov	r5, r3
 800fb10:	da08      	bge.n	800fb24 <__swhatbuf_r+0x24>
 800fb12:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb16:	2200      	movs	r2, #0
 800fb18:	602a      	str	r2, [r5, #0]
 800fb1a:	061a      	lsls	r2, r3, #24
 800fb1c:	d410      	bmi.n	800fb40 <__swhatbuf_r+0x40>
 800fb1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb22:	e00e      	b.n	800fb42 <__swhatbuf_r+0x42>
 800fb24:	466a      	mov	r2, sp
 800fb26:	f000 fd5d 	bl	80105e4 <_fstat_r>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	dbf1      	blt.n	800fb12 <__swhatbuf_r+0x12>
 800fb2e:	9a01      	ldr	r2, [sp, #4]
 800fb30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb38:	425a      	negs	r2, r3
 800fb3a:	415a      	adcs	r2, r3
 800fb3c:	602a      	str	r2, [r5, #0]
 800fb3e:	e7ee      	b.n	800fb1e <__swhatbuf_r+0x1e>
 800fb40:	2340      	movs	r3, #64	; 0x40
 800fb42:	2000      	movs	r0, #0
 800fb44:	6023      	str	r3, [r4, #0]
 800fb46:	b016      	add	sp, #88	; 0x58
 800fb48:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb4c <__smakebuf_r>:
 800fb4c:	898b      	ldrh	r3, [r1, #12]
 800fb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb50:	079d      	lsls	r5, r3, #30
 800fb52:	4606      	mov	r6, r0
 800fb54:	460c      	mov	r4, r1
 800fb56:	d507      	bpl.n	800fb68 <__smakebuf_r+0x1c>
 800fb58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fb5c:	6023      	str	r3, [r4, #0]
 800fb5e:	6123      	str	r3, [r4, #16]
 800fb60:	2301      	movs	r3, #1
 800fb62:	6163      	str	r3, [r4, #20]
 800fb64:	b002      	add	sp, #8
 800fb66:	bd70      	pop	{r4, r5, r6, pc}
 800fb68:	ab01      	add	r3, sp, #4
 800fb6a:	466a      	mov	r2, sp
 800fb6c:	f7ff ffc8 	bl	800fb00 <__swhatbuf_r>
 800fb70:	9900      	ldr	r1, [sp, #0]
 800fb72:	4605      	mov	r5, r0
 800fb74:	4630      	mov	r0, r6
 800fb76:	f000 f89d 	bl	800fcb4 <_malloc_r>
 800fb7a:	b948      	cbnz	r0, 800fb90 <__smakebuf_r+0x44>
 800fb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb80:	059a      	lsls	r2, r3, #22
 800fb82:	d4ef      	bmi.n	800fb64 <__smakebuf_r+0x18>
 800fb84:	f023 0303 	bic.w	r3, r3, #3
 800fb88:	f043 0302 	orr.w	r3, r3, #2
 800fb8c:	81a3      	strh	r3, [r4, #12]
 800fb8e:	e7e3      	b.n	800fb58 <__smakebuf_r+0xc>
 800fb90:	4b0d      	ldr	r3, [pc, #52]	; (800fbc8 <__smakebuf_r+0x7c>)
 800fb92:	62b3      	str	r3, [r6, #40]	; 0x28
 800fb94:	89a3      	ldrh	r3, [r4, #12]
 800fb96:	6020      	str	r0, [r4, #0]
 800fb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb9c:	81a3      	strh	r3, [r4, #12]
 800fb9e:	9b00      	ldr	r3, [sp, #0]
 800fba0:	6163      	str	r3, [r4, #20]
 800fba2:	9b01      	ldr	r3, [sp, #4]
 800fba4:	6120      	str	r0, [r4, #16]
 800fba6:	b15b      	cbz	r3, 800fbc0 <__smakebuf_r+0x74>
 800fba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbac:	4630      	mov	r0, r6
 800fbae:	f000 fd2b 	bl	8010608 <_isatty_r>
 800fbb2:	b128      	cbz	r0, 800fbc0 <__smakebuf_r+0x74>
 800fbb4:	89a3      	ldrh	r3, [r4, #12]
 800fbb6:	f023 0303 	bic.w	r3, r3, #3
 800fbba:	f043 0301 	orr.w	r3, r3, #1
 800fbbe:	81a3      	strh	r3, [r4, #12]
 800fbc0:	89a0      	ldrh	r0, [r4, #12]
 800fbc2:	4305      	orrs	r5, r0
 800fbc4:	81a5      	strh	r5, [r4, #12]
 800fbc6:	e7cd      	b.n	800fb64 <__smakebuf_r+0x18>
 800fbc8:	0800f959 	.word	0x0800f959

0800fbcc <malloc>:
 800fbcc:	4b02      	ldr	r3, [pc, #8]	; (800fbd8 <malloc+0xc>)
 800fbce:	4601      	mov	r1, r0
 800fbd0:	6818      	ldr	r0, [r3, #0]
 800fbd2:	f000 b86f 	b.w	800fcb4 <_malloc_r>
 800fbd6:	bf00      	nop
 800fbd8:	24000054 	.word	0x24000054

0800fbdc <_free_r>:
 800fbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fbde:	2900      	cmp	r1, #0
 800fbe0:	d044      	beq.n	800fc6c <_free_r+0x90>
 800fbe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbe6:	9001      	str	r0, [sp, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f1a1 0404 	sub.w	r4, r1, #4
 800fbee:	bfb8      	it	lt
 800fbf0:	18e4      	addlt	r4, r4, r3
 800fbf2:	f000 fd2b 	bl	801064c <__malloc_lock>
 800fbf6:	4a1e      	ldr	r2, [pc, #120]	; (800fc70 <_free_r+0x94>)
 800fbf8:	9801      	ldr	r0, [sp, #4]
 800fbfa:	6813      	ldr	r3, [r2, #0]
 800fbfc:	b933      	cbnz	r3, 800fc0c <_free_r+0x30>
 800fbfe:	6063      	str	r3, [r4, #4]
 800fc00:	6014      	str	r4, [r2, #0]
 800fc02:	b003      	add	sp, #12
 800fc04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fc08:	f000 bd26 	b.w	8010658 <__malloc_unlock>
 800fc0c:	42a3      	cmp	r3, r4
 800fc0e:	d908      	bls.n	800fc22 <_free_r+0x46>
 800fc10:	6825      	ldr	r5, [r4, #0]
 800fc12:	1961      	adds	r1, r4, r5
 800fc14:	428b      	cmp	r3, r1
 800fc16:	bf01      	itttt	eq
 800fc18:	6819      	ldreq	r1, [r3, #0]
 800fc1a:	685b      	ldreq	r3, [r3, #4]
 800fc1c:	1949      	addeq	r1, r1, r5
 800fc1e:	6021      	streq	r1, [r4, #0]
 800fc20:	e7ed      	b.n	800fbfe <_free_r+0x22>
 800fc22:	461a      	mov	r2, r3
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	b10b      	cbz	r3, 800fc2c <_free_r+0x50>
 800fc28:	42a3      	cmp	r3, r4
 800fc2a:	d9fa      	bls.n	800fc22 <_free_r+0x46>
 800fc2c:	6811      	ldr	r1, [r2, #0]
 800fc2e:	1855      	adds	r5, r2, r1
 800fc30:	42a5      	cmp	r5, r4
 800fc32:	d10b      	bne.n	800fc4c <_free_r+0x70>
 800fc34:	6824      	ldr	r4, [r4, #0]
 800fc36:	4421      	add	r1, r4
 800fc38:	1854      	adds	r4, r2, r1
 800fc3a:	42a3      	cmp	r3, r4
 800fc3c:	6011      	str	r1, [r2, #0]
 800fc3e:	d1e0      	bne.n	800fc02 <_free_r+0x26>
 800fc40:	681c      	ldr	r4, [r3, #0]
 800fc42:	685b      	ldr	r3, [r3, #4]
 800fc44:	6053      	str	r3, [r2, #4]
 800fc46:	4421      	add	r1, r4
 800fc48:	6011      	str	r1, [r2, #0]
 800fc4a:	e7da      	b.n	800fc02 <_free_r+0x26>
 800fc4c:	d902      	bls.n	800fc54 <_free_r+0x78>
 800fc4e:	230c      	movs	r3, #12
 800fc50:	6003      	str	r3, [r0, #0]
 800fc52:	e7d6      	b.n	800fc02 <_free_r+0x26>
 800fc54:	6825      	ldr	r5, [r4, #0]
 800fc56:	1961      	adds	r1, r4, r5
 800fc58:	428b      	cmp	r3, r1
 800fc5a:	bf04      	itt	eq
 800fc5c:	6819      	ldreq	r1, [r3, #0]
 800fc5e:	685b      	ldreq	r3, [r3, #4]
 800fc60:	6063      	str	r3, [r4, #4]
 800fc62:	bf04      	itt	eq
 800fc64:	1949      	addeq	r1, r1, r5
 800fc66:	6021      	streq	r1, [r4, #0]
 800fc68:	6054      	str	r4, [r2, #4]
 800fc6a:	e7ca      	b.n	800fc02 <_free_r+0x26>
 800fc6c:	b003      	add	sp, #12
 800fc6e:	bd30      	pop	{r4, r5, pc}
 800fc70:	24000e74 	.word	0x24000e74

0800fc74 <sbrk_aligned>:
 800fc74:	b570      	push	{r4, r5, r6, lr}
 800fc76:	4e0e      	ldr	r6, [pc, #56]	; (800fcb0 <sbrk_aligned+0x3c>)
 800fc78:	460c      	mov	r4, r1
 800fc7a:	6831      	ldr	r1, [r6, #0]
 800fc7c:	4605      	mov	r5, r0
 800fc7e:	b911      	cbnz	r1, 800fc86 <sbrk_aligned+0x12>
 800fc80:	f000 fb7a 	bl	8010378 <_sbrk_r>
 800fc84:	6030      	str	r0, [r6, #0]
 800fc86:	4621      	mov	r1, r4
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f000 fb75 	bl	8010378 <_sbrk_r>
 800fc8e:	1c43      	adds	r3, r0, #1
 800fc90:	d00a      	beq.n	800fca8 <sbrk_aligned+0x34>
 800fc92:	1cc4      	adds	r4, r0, #3
 800fc94:	f024 0403 	bic.w	r4, r4, #3
 800fc98:	42a0      	cmp	r0, r4
 800fc9a:	d007      	beq.n	800fcac <sbrk_aligned+0x38>
 800fc9c:	1a21      	subs	r1, r4, r0
 800fc9e:	4628      	mov	r0, r5
 800fca0:	f000 fb6a 	bl	8010378 <_sbrk_r>
 800fca4:	3001      	adds	r0, #1
 800fca6:	d101      	bne.n	800fcac <sbrk_aligned+0x38>
 800fca8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fcac:	4620      	mov	r0, r4
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	24000e78 	.word	0x24000e78

0800fcb4 <_malloc_r>:
 800fcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb8:	1ccd      	adds	r5, r1, #3
 800fcba:	f025 0503 	bic.w	r5, r5, #3
 800fcbe:	3508      	adds	r5, #8
 800fcc0:	2d0c      	cmp	r5, #12
 800fcc2:	bf38      	it	cc
 800fcc4:	250c      	movcc	r5, #12
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	4607      	mov	r7, r0
 800fcca:	db01      	blt.n	800fcd0 <_malloc_r+0x1c>
 800fccc:	42a9      	cmp	r1, r5
 800fcce:	d905      	bls.n	800fcdc <_malloc_r+0x28>
 800fcd0:	230c      	movs	r3, #12
 800fcd2:	603b      	str	r3, [r7, #0]
 800fcd4:	2600      	movs	r6, #0
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcdc:	4e2e      	ldr	r6, [pc, #184]	; (800fd98 <_malloc_r+0xe4>)
 800fcde:	f000 fcb5 	bl	801064c <__malloc_lock>
 800fce2:	6833      	ldr	r3, [r6, #0]
 800fce4:	461c      	mov	r4, r3
 800fce6:	bb34      	cbnz	r4, 800fd36 <_malloc_r+0x82>
 800fce8:	4629      	mov	r1, r5
 800fcea:	4638      	mov	r0, r7
 800fcec:	f7ff ffc2 	bl	800fc74 <sbrk_aligned>
 800fcf0:	1c43      	adds	r3, r0, #1
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	d14d      	bne.n	800fd92 <_malloc_r+0xde>
 800fcf6:	6834      	ldr	r4, [r6, #0]
 800fcf8:	4626      	mov	r6, r4
 800fcfa:	2e00      	cmp	r6, #0
 800fcfc:	d140      	bne.n	800fd80 <_malloc_r+0xcc>
 800fcfe:	6823      	ldr	r3, [r4, #0]
 800fd00:	4631      	mov	r1, r6
 800fd02:	4638      	mov	r0, r7
 800fd04:	eb04 0803 	add.w	r8, r4, r3
 800fd08:	f000 fb36 	bl	8010378 <_sbrk_r>
 800fd0c:	4580      	cmp	r8, r0
 800fd0e:	d13a      	bne.n	800fd86 <_malloc_r+0xd2>
 800fd10:	6821      	ldr	r1, [r4, #0]
 800fd12:	3503      	adds	r5, #3
 800fd14:	1a6d      	subs	r5, r5, r1
 800fd16:	f025 0503 	bic.w	r5, r5, #3
 800fd1a:	3508      	adds	r5, #8
 800fd1c:	2d0c      	cmp	r5, #12
 800fd1e:	bf38      	it	cc
 800fd20:	250c      	movcc	r5, #12
 800fd22:	4629      	mov	r1, r5
 800fd24:	4638      	mov	r0, r7
 800fd26:	f7ff ffa5 	bl	800fc74 <sbrk_aligned>
 800fd2a:	3001      	adds	r0, #1
 800fd2c:	d02b      	beq.n	800fd86 <_malloc_r+0xd2>
 800fd2e:	6823      	ldr	r3, [r4, #0]
 800fd30:	442b      	add	r3, r5
 800fd32:	6023      	str	r3, [r4, #0]
 800fd34:	e00e      	b.n	800fd54 <_malloc_r+0xa0>
 800fd36:	6822      	ldr	r2, [r4, #0]
 800fd38:	1b52      	subs	r2, r2, r5
 800fd3a:	d41e      	bmi.n	800fd7a <_malloc_r+0xc6>
 800fd3c:	2a0b      	cmp	r2, #11
 800fd3e:	d916      	bls.n	800fd6e <_malloc_r+0xba>
 800fd40:	1961      	adds	r1, r4, r5
 800fd42:	42a3      	cmp	r3, r4
 800fd44:	6025      	str	r5, [r4, #0]
 800fd46:	bf18      	it	ne
 800fd48:	6059      	strne	r1, [r3, #4]
 800fd4a:	6863      	ldr	r3, [r4, #4]
 800fd4c:	bf08      	it	eq
 800fd4e:	6031      	streq	r1, [r6, #0]
 800fd50:	5162      	str	r2, [r4, r5]
 800fd52:	604b      	str	r3, [r1, #4]
 800fd54:	4638      	mov	r0, r7
 800fd56:	f104 060b 	add.w	r6, r4, #11
 800fd5a:	f000 fc7d 	bl	8010658 <__malloc_unlock>
 800fd5e:	f026 0607 	bic.w	r6, r6, #7
 800fd62:	1d23      	adds	r3, r4, #4
 800fd64:	1af2      	subs	r2, r6, r3
 800fd66:	d0b6      	beq.n	800fcd6 <_malloc_r+0x22>
 800fd68:	1b9b      	subs	r3, r3, r6
 800fd6a:	50a3      	str	r3, [r4, r2]
 800fd6c:	e7b3      	b.n	800fcd6 <_malloc_r+0x22>
 800fd6e:	6862      	ldr	r2, [r4, #4]
 800fd70:	42a3      	cmp	r3, r4
 800fd72:	bf0c      	ite	eq
 800fd74:	6032      	streq	r2, [r6, #0]
 800fd76:	605a      	strne	r2, [r3, #4]
 800fd78:	e7ec      	b.n	800fd54 <_malloc_r+0xa0>
 800fd7a:	4623      	mov	r3, r4
 800fd7c:	6864      	ldr	r4, [r4, #4]
 800fd7e:	e7b2      	b.n	800fce6 <_malloc_r+0x32>
 800fd80:	4634      	mov	r4, r6
 800fd82:	6876      	ldr	r6, [r6, #4]
 800fd84:	e7b9      	b.n	800fcfa <_malloc_r+0x46>
 800fd86:	230c      	movs	r3, #12
 800fd88:	603b      	str	r3, [r7, #0]
 800fd8a:	4638      	mov	r0, r7
 800fd8c:	f000 fc64 	bl	8010658 <__malloc_unlock>
 800fd90:	e7a1      	b.n	800fcd6 <_malloc_r+0x22>
 800fd92:	6025      	str	r5, [r4, #0]
 800fd94:	e7de      	b.n	800fd54 <_malloc_r+0xa0>
 800fd96:	bf00      	nop
 800fd98:	24000e74 	.word	0x24000e74

0800fd9c <__sfputc_r>:
 800fd9c:	6893      	ldr	r3, [r2, #8]
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	b410      	push	{r4}
 800fda4:	6093      	str	r3, [r2, #8]
 800fda6:	da08      	bge.n	800fdba <__sfputc_r+0x1e>
 800fda8:	6994      	ldr	r4, [r2, #24]
 800fdaa:	42a3      	cmp	r3, r4
 800fdac:	db01      	blt.n	800fdb2 <__sfputc_r+0x16>
 800fdae:	290a      	cmp	r1, #10
 800fdb0:	d103      	bne.n	800fdba <__sfputc_r+0x1e>
 800fdb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdb6:	f000 bb33 	b.w	8010420 <__swbuf_r>
 800fdba:	6813      	ldr	r3, [r2, #0]
 800fdbc:	1c58      	adds	r0, r3, #1
 800fdbe:	6010      	str	r0, [r2, #0]
 800fdc0:	7019      	strb	r1, [r3, #0]
 800fdc2:	4608      	mov	r0, r1
 800fdc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdc8:	4770      	bx	lr

0800fdca <__sfputs_r>:
 800fdca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdcc:	4606      	mov	r6, r0
 800fdce:	460f      	mov	r7, r1
 800fdd0:	4614      	mov	r4, r2
 800fdd2:	18d5      	adds	r5, r2, r3
 800fdd4:	42ac      	cmp	r4, r5
 800fdd6:	d101      	bne.n	800fddc <__sfputs_r+0x12>
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e007      	b.n	800fdec <__sfputs_r+0x22>
 800fddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fde0:	463a      	mov	r2, r7
 800fde2:	4630      	mov	r0, r6
 800fde4:	f7ff ffda 	bl	800fd9c <__sfputc_r>
 800fde8:	1c43      	adds	r3, r0, #1
 800fdea:	d1f3      	bne.n	800fdd4 <__sfputs_r+0xa>
 800fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fdf0 <_vfiprintf_r>:
 800fdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf4:	460d      	mov	r5, r1
 800fdf6:	b09d      	sub	sp, #116	; 0x74
 800fdf8:	4614      	mov	r4, r2
 800fdfa:	4698      	mov	r8, r3
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	b118      	cbz	r0, 800fe08 <_vfiprintf_r+0x18>
 800fe00:	6983      	ldr	r3, [r0, #24]
 800fe02:	b90b      	cbnz	r3, 800fe08 <_vfiprintf_r+0x18>
 800fe04:	f7ff fddc 	bl	800f9c0 <__sinit>
 800fe08:	4b89      	ldr	r3, [pc, #548]	; (8010030 <_vfiprintf_r+0x240>)
 800fe0a:	429d      	cmp	r5, r3
 800fe0c:	d11b      	bne.n	800fe46 <_vfiprintf_r+0x56>
 800fe0e:	6875      	ldr	r5, [r6, #4]
 800fe10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe12:	07d9      	lsls	r1, r3, #31
 800fe14:	d405      	bmi.n	800fe22 <_vfiprintf_r+0x32>
 800fe16:	89ab      	ldrh	r3, [r5, #12]
 800fe18:	059a      	lsls	r2, r3, #22
 800fe1a:	d402      	bmi.n	800fe22 <_vfiprintf_r+0x32>
 800fe1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe1e:	f7ff fe6d 	bl	800fafc <__retarget_lock_acquire_recursive>
 800fe22:	89ab      	ldrh	r3, [r5, #12]
 800fe24:	071b      	lsls	r3, r3, #28
 800fe26:	d501      	bpl.n	800fe2c <_vfiprintf_r+0x3c>
 800fe28:	692b      	ldr	r3, [r5, #16]
 800fe2a:	b9eb      	cbnz	r3, 800fe68 <_vfiprintf_r+0x78>
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	4630      	mov	r0, r6
 800fe30:	f000 fb5a 	bl	80104e8 <__swsetup_r>
 800fe34:	b1c0      	cbz	r0, 800fe68 <_vfiprintf_r+0x78>
 800fe36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fe38:	07dc      	lsls	r4, r3, #31
 800fe3a:	d50e      	bpl.n	800fe5a <_vfiprintf_r+0x6a>
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe40:	b01d      	add	sp, #116	; 0x74
 800fe42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe46:	4b7b      	ldr	r3, [pc, #492]	; (8010034 <_vfiprintf_r+0x244>)
 800fe48:	429d      	cmp	r5, r3
 800fe4a:	d101      	bne.n	800fe50 <_vfiprintf_r+0x60>
 800fe4c:	68b5      	ldr	r5, [r6, #8]
 800fe4e:	e7df      	b.n	800fe10 <_vfiprintf_r+0x20>
 800fe50:	4b79      	ldr	r3, [pc, #484]	; (8010038 <_vfiprintf_r+0x248>)
 800fe52:	429d      	cmp	r5, r3
 800fe54:	bf08      	it	eq
 800fe56:	68f5      	ldreq	r5, [r6, #12]
 800fe58:	e7da      	b.n	800fe10 <_vfiprintf_r+0x20>
 800fe5a:	89ab      	ldrh	r3, [r5, #12]
 800fe5c:	0598      	lsls	r0, r3, #22
 800fe5e:	d4ed      	bmi.n	800fe3c <_vfiprintf_r+0x4c>
 800fe60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fe62:	f7ff fe4c 	bl	800fafe <__retarget_lock_release_recursive>
 800fe66:	e7e9      	b.n	800fe3c <_vfiprintf_r+0x4c>
 800fe68:	2300      	movs	r3, #0
 800fe6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fe6c:	2320      	movs	r3, #32
 800fe6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe72:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe76:	2330      	movs	r3, #48	; 0x30
 800fe78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801003c <_vfiprintf_r+0x24c>
 800fe7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe80:	f04f 0901 	mov.w	r9, #1
 800fe84:	4623      	mov	r3, r4
 800fe86:	469a      	mov	sl, r3
 800fe88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe8c:	b10a      	cbz	r2, 800fe92 <_vfiprintf_r+0xa2>
 800fe8e:	2a25      	cmp	r2, #37	; 0x25
 800fe90:	d1f9      	bne.n	800fe86 <_vfiprintf_r+0x96>
 800fe92:	ebba 0b04 	subs.w	fp, sl, r4
 800fe96:	d00b      	beq.n	800feb0 <_vfiprintf_r+0xc0>
 800fe98:	465b      	mov	r3, fp
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	4629      	mov	r1, r5
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f7ff ff93 	bl	800fdca <__sfputs_r>
 800fea4:	3001      	adds	r0, #1
 800fea6:	f000 80aa 	beq.w	800fffe <_vfiprintf_r+0x20e>
 800feaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feac:	445a      	add	r2, fp
 800feae:	9209      	str	r2, [sp, #36]	; 0x24
 800feb0:	f89a 3000 	ldrb.w	r3, [sl]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 80a2 	beq.w	800fffe <_vfiprintf_r+0x20e>
 800feba:	2300      	movs	r3, #0
 800febc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fec4:	f10a 0a01 	add.w	sl, sl, #1
 800fec8:	9304      	str	r3, [sp, #16]
 800feca:	9307      	str	r3, [sp, #28]
 800fecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fed0:	931a      	str	r3, [sp, #104]	; 0x68
 800fed2:	4654      	mov	r4, sl
 800fed4:	2205      	movs	r2, #5
 800fed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feda:	4858      	ldr	r0, [pc, #352]	; (801003c <_vfiprintf_r+0x24c>)
 800fedc:	f7f0 fa08 	bl	80002f0 <memchr>
 800fee0:	9a04      	ldr	r2, [sp, #16]
 800fee2:	b9d8      	cbnz	r0, 800ff1c <_vfiprintf_r+0x12c>
 800fee4:	06d1      	lsls	r1, r2, #27
 800fee6:	bf44      	itt	mi
 800fee8:	2320      	movmi	r3, #32
 800feea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800feee:	0713      	lsls	r3, r2, #28
 800fef0:	bf44      	itt	mi
 800fef2:	232b      	movmi	r3, #43	; 0x2b
 800fef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fef8:	f89a 3000 	ldrb.w	r3, [sl]
 800fefc:	2b2a      	cmp	r3, #42	; 0x2a
 800fefe:	d015      	beq.n	800ff2c <_vfiprintf_r+0x13c>
 800ff00:	9a07      	ldr	r2, [sp, #28]
 800ff02:	4654      	mov	r4, sl
 800ff04:	2000      	movs	r0, #0
 800ff06:	f04f 0c0a 	mov.w	ip, #10
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff10:	3b30      	subs	r3, #48	; 0x30
 800ff12:	2b09      	cmp	r3, #9
 800ff14:	d94e      	bls.n	800ffb4 <_vfiprintf_r+0x1c4>
 800ff16:	b1b0      	cbz	r0, 800ff46 <_vfiprintf_r+0x156>
 800ff18:	9207      	str	r2, [sp, #28]
 800ff1a:	e014      	b.n	800ff46 <_vfiprintf_r+0x156>
 800ff1c:	eba0 0308 	sub.w	r3, r0, r8
 800ff20:	fa09 f303 	lsl.w	r3, r9, r3
 800ff24:	4313      	orrs	r3, r2
 800ff26:	9304      	str	r3, [sp, #16]
 800ff28:	46a2      	mov	sl, r4
 800ff2a:	e7d2      	b.n	800fed2 <_vfiprintf_r+0xe2>
 800ff2c:	9b03      	ldr	r3, [sp, #12]
 800ff2e:	1d19      	adds	r1, r3, #4
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	9103      	str	r1, [sp, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	bfbb      	ittet	lt
 800ff38:	425b      	neglt	r3, r3
 800ff3a:	f042 0202 	orrlt.w	r2, r2, #2
 800ff3e:	9307      	strge	r3, [sp, #28]
 800ff40:	9307      	strlt	r3, [sp, #28]
 800ff42:	bfb8      	it	lt
 800ff44:	9204      	strlt	r2, [sp, #16]
 800ff46:	7823      	ldrb	r3, [r4, #0]
 800ff48:	2b2e      	cmp	r3, #46	; 0x2e
 800ff4a:	d10c      	bne.n	800ff66 <_vfiprintf_r+0x176>
 800ff4c:	7863      	ldrb	r3, [r4, #1]
 800ff4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff50:	d135      	bne.n	800ffbe <_vfiprintf_r+0x1ce>
 800ff52:	9b03      	ldr	r3, [sp, #12]
 800ff54:	1d1a      	adds	r2, r3, #4
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	9203      	str	r2, [sp, #12]
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	bfb8      	it	lt
 800ff5e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ff62:	3402      	adds	r4, #2
 800ff64:	9305      	str	r3, [sp, #20]
 800ff66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801004c <_vfiprintf_r+0x25c>
 800ff6a:	7821      	ldrb	r1, [r4, #0]
 800ff6c:	2203      	movs	r2, #3
 800ff6e:	4650      	mov	r0, sl
 800ff70:	f7f0 f9be 	bl	80002f0 <memchr>
 800ff74:	b140      	cbz	r0, 800ff88 <_vfiprintf_r+0x198>
 800ff76:	2340      	movs	r3, #64	; 0x40
 800ff78:	eba0 000a 	sub.w	r0, r0, sl
 800ff7c:	fa03 f000 	lsl.w	r0, r3, r0
 800ff80:	9b04      	ldr	r3, [sp, #16]
 800ff82:	4303      	orrs	r3, r0
 800ff84:	3401      	adds	r4, #1
 800ff86:	9304      	str	r3, [sp, #16]
 800ff88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8c:	482c      	ldr	r0, [pc, #176]	; (8010040 <_vfiprintf_r+0x250>)
 800ff8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff92:	2206      	movs	r2, #6
 800ff94:	f7f0 f9ac 	bl	80002f0 <memchr>
 800ff98:	2800      	cmp	r0, #0
 800ff9a:	d03f      	beq.n	801001c <_vfiprintf_r+0x22c>
 800ff9c:	4b29      	ldr	r3, [pc, #164]	; (8010044 <_vfiprintf_r+0x254>)
 800ff9e:	bb1b      	cbnz	r3, 800ffe8 <_vfiprintf_r+0x1f8>
 800ffa0:	9b03      	ldr	r3, [sp, #12]
 800ffa2:	3307      	adds	r3, #7
 800ffa4:	f023 0307 	bic.w	r3, r3, #7
 800ffa8:	3308      	adds	r3, #8
 800ffaa:	9303      	str	r3, [sp, #12]
 800ffac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffae:	443b      	add	r3, r7
 800ffb0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb2:	e767      	b.n	800fe84 <_vfiprintf_r+0x94>
 800ffb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffb8:	460c      	mov	r4, r1
 800ffba:	2001      	movs	r0, #1
 800ffbc:	e7a5      	b.n	800ff0a <_vfiprintf_r+0x11a>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	3401      	adds	r4, #1
 800ffc2:	9305      	str	r3, [sp, #20]
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	f04f 0c0a 	mov.w	ip, #10
 800ffca:	4620      	mov	r0, r4
 800ffcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd0:	3a30      	subs	r2, #48	; 0x30
 800ffd2:	2a09      	cmp	r2, #9
 800ffd4:	d903      	bls.n	800ffde <_vfiprintf_r+0x1ee>
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0c5      	beq.n	800ff66 <_vfiprintf_r+0x176>
 800ffda:	9105      	str	r1, [sp, #20]
 800ffdc:	e7c3      	b.n	800ff66 <_vfiprintf_r+0x176>
 800ffde:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffe2:	4604      	mov	r4, r0
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e7f0      	b.n	800ffca <_vfiprintf_r+0x1da>
 800ffe8:	ab03      	add	r3, sp, #12
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	462a      	mov	r2, r5
 800ffee:	4b16      	ldr	r3, [pc, #88]	; (8010048 <_vfiprintf_r+0x258>)
 800fff0:	a904      	add	r1, sp, #16
 800fff2:	4630      	mov	r0, r6
 800fff4:	f3af 8000 	nop.w
 800fff8:	4607      	mov	r7, r0
 800fffa:	1c78      	adds	r0, r7, #1
 800fffc:	d1d6      	bne.n	800ffac <_vfiprintf_r+0x1bc>
 800fffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010000:	07d9      	lsls	r1, r3, #31
 8010002:	d405      	bmi.n	8010010 <_vfiprintf_r+0x220>
 8010004:	89ab      	ldrh	r3, [r5, #12]
 8010006:	059a      	lsls	r2, r3, #22
 8010008:	d402      	bmi.n	8010010 <_vfiprintf_r+0x220>
 801000a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801000c:	f7ff fd77 	bl	800fafe <__retarget_lock_release_recursive>
 8010010:	89ab      	ldrh	r3, [r5, #12]
 8010012:	065b      	lsls	r3, r3, #25
 8010014:	f53f af12 	bmi.w	800fe3c <_vfiprintf_r+0x4c>
 8010018:	9809      	ldr	r0, [sp, #36]	; 0x24
 801001a:	e711      	b.n	800fe40 <_vfiprintf_r+0x50>
 801001c:	ab03      	add	r3, sp, #12
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	462a      	mov	r2, r5
 8010022:	4b09      	ldr	r3, [pc, #36]	; (8010048 <_vfiprintf_r+0x258>)
 8010024:	a904      	add	r1, sp, #16
 8010026:	4630      	mov	r0, r6
 8010028:	f000 f880 	bl	801012c <_printf_i>
 801002c:	e7e4      	b.n	800fff8 <_vfiprintf_r+0x208>
 801002e:	bf00      	nop
 8010030:	08010ce8 	.word	0x08010ce8
 8010034:	08010d08 	.word	0x08010d08
 8010038:	08010cc8 	.word	0x08010cc8
 801003c:	08010d28 	.word	0x08010d28
 8010040:	08010d32 	.word	0x08010d32
 8010044:	00000000 	.word	0x00000000
 8010048:	0800fdcb 	.word	0x0800fdcb
 801004c:	08010d2e 	.word	0x08010d2e

08010050 <_printf_common>:
 8010050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010054:	4616      	mov	r6, r2
 8010056:	4699      	mov	r9, r3
 8010058:	688a      	ldr	r2, [r1, #8]
 801005a:	690b      	ldr	r3, [r1, #16]
 801005c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010060:	4293      	cmp	r3, r2
 8010062:	bfb8      	it	lt
 8010064:	4613      	movlt	r3, r2
 8010066:	6033      	str	r3, [r6, #0]
 8010068:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801006c:	4607      	mov	r7, r0
 801006e:	460c      	mov	r4, r1
 8010070:	b10a      	cbz	r2, 8010076 <_printf_common+0x26>
 8010072:	3301      	adds	r3, #1
 8010074:	6033      	str	r3, [r6, #0]
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	0699      	lsls	r1, r3, #26
 801007a:	bf42      	ittt	mi
 801007c:	6833      	ldrmi	r3, [r6, #0]
 801007e:	3302      	addmi	r3, #2
 8010080:	6033      	strmi	r3, [r6, #0]
 8010082:	6825      	ldr	r5, [r4, #0]
 8010084:	f015 0506 	ands.w	r5, r5, #6
 8010088:	d106      	bne.n	8010098 <_printf_common+0x48>
 801008a:	f104 0a19 	add.w	sl, r4, #25
 801008e:	68e3      	ldr	r3, [r4, #12]
 8010090:	6832      	ldr	r2, [r6, #0]
 8010092:	1a9b      	subs	r3, r3, r2
 8010094:	42ab      	cmp	r3, r5
 8010096:	dc26      	bgt.n	80100e6 <_printf_common+0x96>
 8010098:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801009c:	1e13      	subs	r3, r2, #0
 801009e:	6822      	ldr	r2, [r4, #0]
 80100a0:	bf18      	it	ne
 80100a2:	2301      	movne	r3, #1
 80100a4:	0692      	lsls	r2, r2, #26
 80100a6:	d42b      	bmi.n	8010100 <_printf_common+0xb0>
 80100a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80100ac:	4649      	mov	r1, r9
 80100ae:	4638      	mov	r0, r7
 80100b0:	47c0      	blx	r8
 80100b2:	3001      	adds	r0, #1
 80100b4:	d01e      	beq.n	80100f4 <_printf_common+0xa4>
 80100b6:	6823      	ldr	r3, [r4, #0]
 80100b8:	68e5      	ldr	r5, [r4, #12]
 80100ba:	6832      	ldr	r2, [r6, #0]
 80100bc:	f003 0306 	and.w	r3, r3, #6
 80100c0:	2b04      	cmp	r3, #4
 80100c2:	bf08      	it	eq
 80100c4:	1aad      	subeq	r5, r5, r2
 80100c6:	68a3      	ldr	r3, [r4, #8]
 80100c8:	6922      	ldr	r2, [r4, #16]
 80100ca:	bf0c      	ite	eq
 80100cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100d0:	2500      	movne	r5, #0
 80100d2:	4293      	cmp	r3, r2
 80100d4:	bfc4      	itt	gt
 80100d6:	1a9b      	subgt	r3, r3, r2
 80100d8:	18ed      	addgt	r5, r5, r3
 80100da:	2600      	movs	r6, #0
 80100dc:	341a      	adds	r4, #26
 80100de:	42b5      	cmp	r5, r6
 80100e0:	d11a      	bne.n	8010118 <_printf_common+0xc8>
 80100e2:	2000      	movs	r0, #0
 80100e4:	e008      	b.n	80100f8 <_printf_common+0xa8>
 80100e6:	2301      	movs	r3, #1
 80100e8:	4652      	mov	r2, sl
 80100ea:	4649      	mov	r1, r9
 80100ec:	4638      	mov	r0, r7
 80100ee:	47c0      	blx	r8
 80100f0:	3001      	adds	r0, #1
 80100f2:	d103      	bne.n	80100fc <_printf_common+0xac>
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fc:	3501      	adds	r5, #1
 80100fe:	e7c6      	b.n	801008e <_printf_common+0x3e>
 8010100:	18e1      	adds	r1, r4, r3
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	2030      	movs	r0, #48	; 0x30
 8010106:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801010a:	4422      	add	r2, r4
 801010c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010110:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010114:	3302      	adds	r3, #2
 8010116:	e7c7      	b.n	80100a8 <_printf_common+0x58>
 8010118:	2301      	movs	r3, #1
 801011a:	4622      	mov	r2, r4
 801011c:	4649      	mov	r1, r9
 801011e:	4638      	mov	r0, r7
 8010120:	47c0      	blx	r8
 8010122:	3001      	adds	r0, #1
 8010124:	d0e6      	beq.n	80100f4 <_printf_common+0xa4>
 8010126:	3601      	adds	r6, #1
 8010128:	e7d9      	b.n	80100de <_printf_common+0x8e>
	...

0801012c <_printf_i>:
 801012c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010130:	7e0f      	ldrb	r7, [r1, #24]
 8010132:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010134:	2f78      	cmp	r7, #120	; 0x78
 8010136:	4691      	mov	r9, r2
 8010138:	4680      	mov	r8, r0
 801013a:	460c      	mov	r4, r1
 801013c:	469a      	mov	sl, r3
 801013e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010142:	d807      	bhi.n	8010154 <_printf_i+0x28>
 8010144:	2f62      	cmp	r7, #98	; 0x62
 8010146:	d80a      	bhi.n	801015e <_printf_i+0x32>
 8010148:	2f00      	cmp	r7, #0
 801014a:	f000 80d8 	beq.w	80102fe <_printf_i+0x1d2>
 801014e:	2f58      	cmp	r7, #88	; 0x58
 8010150:	f000 80a3 	beq.w	801029a <_printf_i+0x16e>
 8010154:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010158:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801015c:	e03a      	b.n	80101d4 <_printf_i+0xa8>
 801015e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010162:	2b15      	cmp	r3, #21
 8010164:	d8f6      	bhi.n	8010154 <_printf_i+0x28>
 8010166:	a101      	add	r1, pc, #4	; (adr r1, 801016c <_printf_i+0x40>)
 8010168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801016c:	080101c5 	.word	0x080101c5
 8010170:	080101d9 	.word	0x080101d9
 8010174:	08010155 	.word	0x08010155
 8010178:	08010155 	.word	0x08010155
 801017c:	08010155 	.word	0x08010155
 8010180:	08010155 	.word	0x08010155
 8010184:	080101d9 	.word	0x080101d9
 8010188:	08010155 	.word	0x08010155
 801018c:	08010155 	.word	0x08010155
 8010190:	08010155 	.word	0x08010155
 8010194:	08010155 	.word	0x08010155
 8010198:	080102e5 	.word	0x080102e5
 801019c:	08010209 	.word	0x08010209
 80101a0:	080102c7 	.word	0x080102c7
 80101a4:	08010155 	.word	0x08010155
 80101a8:	08010155 	.word	0x08010155
 80101ac:	08010307 	.word	0x08010307
 80101b0:	08010155 	.word	0x08010155
 80101b4:	08010209 	.word	0x08010209
 80101b8:	08010155 	.word	0x08010155
 80101bc:	08010155 	.word	0x08010155
 80101c0:	080102cf 	.word	0x080102cf
 80101c4:	682b      	ldr	r3, [r5, #0]
 80101c6:	1d1a      	adds	r2, r3, #4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	602a      	str	r2, [r5, #0]
 80101cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80101d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80101d4:	2301      	movs	r3, #1
 80101d6:	e0a3      	b.n	8010320 <_printf_i+0x1f4>
 80101d8:	6820      	ldr	r0, [r4, #0]
 80101da:	6829      	ldr	r1, [r5, #0]
 80101dc:	0606      	lsls	r6, r0, #24
 80101de:	f101 0304 	add.w	r3, r1, #4
 80101e2:	d50a      	bpl.n	80101fa <_printf_i+0xce>
 80101e4:	680e      	ldr	r6, [r1, #0]
 80101e6:	602b      	str	r3, [r5, #0]
 80101e8:	2e00      	cmp	r6, #0
 80101ea:	da03      	bge.n	80101f4 <_printf_i+0xc8>
 80101ec:	232d      	movs	r3, #45	; 0x2d
 80101ee:	4276      	negs	r6, r6
 80101f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80101f4:	485e      	ldr	r0, [pc, #376]	; (8010370 <_printf_i+0x244>)
 80101f6:	230a      	movs	r3, #10
 80101f8:	e019      	b.n	801022e <_printf_i+0x102>
 80101fa:	680e      	ldr	r6, [r1, #0]
 80101fc:	602b      	str	r3, [r5, #0]
 80101fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010202:	bf18      	it	ne
 8010204:	b236      	sxthne	r6, r6
 8010206:	e7ef      	b.n	80101e8 <_printf_i+0xbc>
 8010208:	682b      	ldr	r3, [r5, #0]
 801020a:	6820      	ldr	r0, [r4, #0]
 801020c:	1d19      	adds	r1, r3, #4
 801020e:	6029      	str	r1, [r5, #0]
 8010210:	0601      	lsls	r1, r0, #24
 8010212:	d501      	bpl.n	8010218 <_printf_i+0xec>
 8010214:	681e      	ldr	r6, [r3, #0]
 8010216:	e002      	b.n	801021e <_printf_i+0xf2>
 8010218:	0646      	lsls	r6, r0, #25
 801021a:	d5fb      	bpl.n	8010214 <_printf_i+0xe8>
 801021c:	881e      	ldrh	r6, [r3, #0]
 801021e:	4854      	ldr	r0, [pc, #336]	; (8010370 <_printf_i+0x244>)
 8010220:	2f6f      	cmp	r7, #111	; 0x6f
 8010222:	bf0c      	ite	eq
 8010224:	2308      	moveq	r3, #8
 8010226:	230a      	movne	r3, #10
 8010228:	2100      	movs	r1, #0
 801022a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801022e:	6865      	ldr	r5, [r4, #4]
 8010230:	60a5      	str	r5, [r4, #8]
 8010232:	2d00      	cmp	r5, #0
 8010234:	bfa2      	ittt	ge
 8010236:	6821      	ldrge	r1, [r4, #0]
 8010238:	f021 0104 	bicge.w	r1, r1, #4
 801023c:	6021      	strge	r1, [r4, #0]
 801023e:	b90e      	cbnz	r6, 8010244 <_printf_i+0x118>
 8010240:	2d00      	cmp	r5, #0
 8010242:	d04d      	beq.n	80102e0 <_printf_i+0x1b4>
 8010244:	4615      	mov	r5, r2
 8010246:	fbb6 f1f3 	udiv	r1, r6, r3
 801024a:	fb03 6711 	mls	r7, r3, r1, r6
 801024e:	5dc7      	ldrb	r7, [r0, r7]
 8010250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010254:	4637      	mov	r7, r6
 8010256:	42bb      	cmp	r3, r7
 8010258:	460e      	mov	r6, r1
 801025a:	d9f4      	bls.n	8010246 <_printf_i+0x11a>
 801025c:	2b08      	cmp	r3, #8
 801025e:	d10b      	bne.n	8010278 <_printf_i+0x14c>
 8010260:	6823      	ldr	r3, [r4, #0]
 8010262:	07de      	lsls	r6, r3, #31
 8010264:	d508      	bpl.n	8010278 <_printf_i+0x14c>
 8010266:	6923      	ldr	r3, [r4, #16]
 8010268:	6861      	ldr	r1, [r4, #4]
 801026a:	4299      	cmp	r1, r3
 801026c:	bfde      	ittt	le
 801026e:	2330      	movle	r3, #48	; 0x30
 8010270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010274:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010278:	1b52      	subs	r2, r2, r5
 801027a:	6122      	str	r2, [r4, #16]
 801027c:	f8cd a000 	str.w	sl, [sp]
 8010280:	464b      	mov	r3, r9
 8010282:	aa03      	add	r2, sp, #12
 8010284:	4621      	mov	r1, r4
 8010286:	4640      	mov	r0, r8
 8010288:	f7ff fee2 	bl	8010050 <_printf_common>
 801028c:	3001      	adds	r0, #1
 801028e:	d14c      	bne.n	801032a <_printf_i+0x1fe>
 8010290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010294:	b004      	add	sp, #16
 8010296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801029a:	4835      	ldr	r0, [pc, #212]	; (8010370 <_printf_i+0x244>)
 801029c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80102a0:	6829      	ldr	r1, [r5, #0]
 80102a2:	6823      	ldr	r3, [r4, #0]
 80102a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80102a8:	6029      	str	r1, [r5, #0]
 80102aa:	061d      	lsls	r5, r3, #24
 80102ac:	d514      	bpl.n	80102d8 <_printf_i+0x1ac>
 80102ae:	07df      	lsls	r7, r3, #31
 80102b0:	bf44      	itt	mi
 80102b2:	f043 0320 	orrmi.w	r3, r3, #32
 80102b6:	6023      	strmi	r3, [r4, #0]
 80102b8:	b91e      	cbnz	r6, 80102c2 <_printf_i+0x196>
 80102ba:	6823      	ldr	r3, [r4, #0]
 80102bc:	f023 0320 	bic.w	r3, r3, #32
 80102c0:	6023      	str	r3, [r4, #0]
 80102c2:	2310      	movs	r3, #16
 80102c4:	e7b0      	b.n	8010228 <_printf_i+0xfc>
 80102c6:	6823      	ldr	r3, [r4, #0]
 80102c8:	f043 0320 	orr.w	r3, r3, #32
 80102cc:	6023      	str	r3, [r4, #0]
 80102ce:	2378      	movs	r3, #120	; 0x78
 80102d0:	4828      	ldr	r0, [pc, #160]	; (8010374 <_printf_i+0x248>)
 80102d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80102d6:	e7e3      	b.n	80102a0 <_printf_i+0x174>
 80102d8:	0659      	lsls	r1, r3, #25
 80102da:	bf48      	it	mi
 80102dc:	b2b6      	uxthmi	r6, r6
 80102de:	e7e6      	b.n	80102ae <_printf_i+0x182>
 80102e0:	4615      	mov	r5, r2
 80102e2:	e7bb      	b.n	801025c <_printf_i+0x130>
 80102e4:	682b      	ldr	r3, [r5, #0]
 80102e6:	6826      	ldr	r6, [r4, #0]
 80102e8:	6961      	ldr	r1, [r4, #20]
 80102ea:	1d18      	adds	r0, r3, #4
 80102ec:	6028      	str	r0, [r5, #0]
 80102ee:	0635      	lsls	r5, r6, #24
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	d501      	bpl.n	80102f8 <_printf_i+0x1cc>
 80102f4:	6019      	str	r1, [r3, #0]
 80102f6:	e002      	b.n	80102fe <_printf_i+0x1d2>
 80102f8:	0670      	lsls	r0, r6, #25
 80102fa:	d5fb      	bpl.n	80102f4 <_printf_i+0x1c8>
 80102fc:	8019      	strh	r1, [r3, #0]
 80102fe:	2300      	movs	r3, #0
 8010300:	6123      	str	r3, [r4, #16]
 8010302:	4615      	mov	r5, r2
 8010304:	e7ba      	b.n	801027c <_printf_i+0x150>
 8010306:	682b      	ldr	r3, [r5, #0]
 8010308:	1d1a      	adds	r2, r3, #4
 801030a:	602a      	str	r2, [r5, #0]
 801030c:	681d      	ldr	r5, [r3, #0]
 801030e:	6862      	ldr	r2, [r4, #4]
 8010310:	2100      	movs	r1, #0
 8010312:	4628      	mov	r0, r5
 8010314:	f7ef ffec 	bl	80002f0 <memchr>
 8010318:	b108      	cbz	r0, 801031e <_printf_i+0x1f2>
 801031a:	1b40      	subs	r0, r0, r5
 801031c:	6060      	str	r0, [r4, #4]
 801031e:	6863      	ldr	r3, [r4, #4]
 8010320:	6123      	str	r3, [r4, #16]
 8010322:	2300      	movs	r3, #0
 8010324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010328:	e7a8      	b.n	801027c <_printf_i+0x150>
 801032a:	6923      	ldr	r3, [r4, #16]
 801032c:	462a      	mov	r2, r5
 801032e:	4649      	mov	r1, r9
 8010330:	4640      	mov	r0, r8
 8010332:	47d0      	blx	sl
 8010334:	3001      	adds	r0, #1
 8010336:	d0ab      	beq.n	8010290 <_printf_i+0x164>
 8010338:	6823      	ldr	r3, [r4, #0]
 801033a:	079b      	lsls	r3, r3, #30
 801033c:	d413      	bmi.n	8010366 <_printf_i+0x23a>
 801033e:	68e0      	ldr	r0, [r4, #12]
 8010340:	9b03      	ldr	r3, [sp, #12]
 8010342:	4298      	cmp	r0, r3
 8010344:	bfb8      	it	lt
 8010346:	4618      	movlt	r0, r3
 8010348:	e7a4      	b.n	8010294 <_printf_i+0x168>
 801034a:	2301      	movs	r3, #1
 801034c:	4632      	mov	r2, r6
 801034e:	4649      	mov	r1, r9
 8010350:	4640      	mov	r0, r8
 8010352:	47d0      	blx	sl
 8010354:	3001      	adds	r0, #1
 8010356:	d09b      	beq.n	8010290 <_printf_i+0x164>
 8010358:	3501      	adds	r5, #1
 801035a:	68e3      	ldr	r3, [r4, #12]
 801035c:	9903      	ldr	r1, [sp, #12]
 801035e:	1a5b      	subs	r3, r3, r1
 8010360:	42ab      	cmp	r3, r5
 8010362:	dcf2      	bgt.n	801034a <_printf_i+0x21e>
 8010364:	e7eb      	b.n	801033e <_printf_i+0x212>
 8010366:	2500      	movs	r5, #0
 8010368:	f104 0619 	add.w	r6, r4, #25
 801036c:	e7f5      	b.n	801035a <_printf_i+0x22e>
 801036e:	bf00      	nop
 8010370:	08010d39 	.word	0x08010d39
 8010374:	08010d4a 	.word	0x08010d4a

08010378 <_sbrk_r>:
 8010378:	b538      	push	{r3, r4, r5, lr}
 801037a:	4d06      	ldr	r5, [pc, #24]	; (8010394 <_sbrk_r+0x1c>)
 801037c:	2300      	movs	r3, #0
 801037e:	4604      	mov	r4, r0
 8010380:	4608      	mov	r0, r1
 8010382:	602b      	str	r3, [r5, #0]
 8010384:	f7f3 fe04 	bl	8003f90 <_sbrk>
 8010388:	1c43      	adds	r3, r0, #1
 801038a:	d102      	bne.n	8010392 <_sbrk_r+0x1a>
 801038c:	682b      	ldr	r3, [r5, #0]
 801038e:	b103      	cbz	r3, 8010392 <_sbrk_r+0x1a>
 8010390:	6023      	str	r3, [r4, #0]
 8010392:	bd38      	pop	{r3, r4, r5, pc}
 8010394:	24000e7c 	.word	0x24000e7c

08010398 <__sread>:
 8010398:	b510      	push	{r4, lr}
 801039a:	460c      	mov	r4, r1
 801039c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103a0:	f000 f960 	bl	8010664 <_read_r>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	bfab      	itete	ge
 80103a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80103aa:	89a3      	ldrhlt	r3, [r4, #12]
 80103ac:	181b      	addge	r3, r3, r0
 80103ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80103b2:	bfac      	ite	ge
 80103b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80103b6:	81a3      	strhlt	r3, [r4, #12]
 80103b8:	bd10      	pop	{r4, pc}

080103ba <__swrite>:
 80103ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103be:	461f      	mov	r7, r3
 80103c0:	898b      	ldrh	r3, [r1, #12]
 80103c2:	05db      	lsls	r3, r3, #23
 80103c4:	4605      	mov	r5, r0
 80103c6:	460c      	mov	r4, r1
 80103c8:	4616      	mov	r6, r2
 80103ca:	d505      	bpl.n	80103d8 <__swrite+0x1e>
 80103cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103d0:	2302      	movs	r3, #2
 80103d2:	2200      	movs	r2, #0
 80103d4:	f000 f928 	bl	8010628 <_lseek_r>
 80103d8:	89a3      	ldrh	r3, [r4, #12]
 80103da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80103e2:	81a3      	strh	r3, [r4, #12]
 80103e4:	4632      	mov	r2, r6
 80103e6:	463b      	mov	r3, r7
 80103e8:	4628      	mov	r0, r5
 80103ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103ee:	f000 b869 	b.w	80104c4 <_write_r>

080103f2 <__sseek>:
 80103f2:	b510      	push	{r4, lr}
 80103f4:	460c      	mov	r4, r1
 80103f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103fa:	f000 f915 	bl	8010628 <_lseek_r>
 80103fe:	1c43      	adds	r3, r0, #1
 8010400:	89a3      	ldrh	r3, [r4, #12]
 8010402:	bf15      	itete	ne
 8010404:	6560      	strne	r0, [r4, #84]	; 0x54
 8010406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801040a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801040e:	81a3      	strheq	r3, [r4, #12]
 8010410:	bf18      	it	ne
 8010412:	81a3      	strhne	r3, [r4, #12]
 8010414:	bd10      	pop	{r4, pc}

08010416 <__sclose>:
 8010416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801041a:	f000 b8d3 	b.w	80105c4 <_close_r>
	...

08010420 <__swbuf_r>:
 8010420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010422:	460e      	mov	r6, r1
 8010424:	4614      	mov	r4, r2
 8010426:	4605      	mov	r5, r0
 8010428:	b118      	cbz	r0, 8010432 <__swbuf_r+0x12>
 801042a:	6983      	ldr	r3, [r0, #24]
 801042c:	b90b      	cbnz	r3, 8010432 <__swbuf_r+0x12>
 801042e:	f7ff fac7 	bl	800f9c0 <__sinit>
 8010432:	4b21      	ldr	r3, [pc, #132]	; (80104b8 <__swbuf_r+0x98>)
 8010434:	429c      	cmp	r4, r3
 8010436:	d12b      	bne.n	8010490 <__swbuf_r+0x70>
 8010438:	686c      	ldr	r4, [r5, #4]
 801043a:	69a3      	ldr	r3, [r4, #24]
 801043c:	60a3      	str	r3, [r4, #8]
 801043e:	89a3      	ldrh	r3, [r4, #12]
 8010440:	071a      	lsls	r2, r3, #28
 8010442:	d52f      	bpl.n	80104a4 <__swbuf_r+0x84>
 8010444:	6923      	ldr	r3, [r4, #16]
 8010446:	b36b      	cbz	r3, 80104a4 <__swbuf_r+0x84>
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	1ac0      	subs	r0, r0, r3
 801044e:	6963      	ldr	r3, [r4, #20]
 8010450:	b2f6      	uxtb	r6, r6
 8010452:	4283      	cmp	r3, r0
 8010454:	4637      	mov	r7, r6
 8010456:	dc04      	bgt.n	8010462 <__swbuf_r+0x42>
 8010458:	4621      	mov	r1, r4
 801045a:	4628      	mov	r0, r5
 801045c:	f7ff fa1c 	bl	800f898 <_fflush_r>
 8010460:	bb30      	cbnz	r0, 80104b0 <__swbuf_r+0x90>
 8010462:	68a3      	ldr	r3, [r4, #8]
 8010464:	3b01      	subs	r3, #1
 8010466:	60a3      	str	r3, [r4, #8]
 8010468:	6823      	ldr	r3, [r4, #0]
 801046a:	1c5a      	adds	r2, r3, #1
 801046c:	6022      	str	r2, [r4, #0]
 801046e:	701e      	strb	r6, [r3, #0]
 8010470:	6963      	ldr	r3, [r4, #20]
 8010472:	3001      	adds	r0, #1
 8010474:	4283      	cmp	r3, r0
 8010476:	d004      	beq.n	8010482 <__swbuf_r+0x62>
 8010478:	89a3      	ldrh	r3, [r4, #12]
 801047a:	07db      	lsls	r3, r3, #31
 801047c:	d506      	bpl.n	801048c <__swbuf_r+0x6c>
 801047e:	2e0a      	cmp	r6, #10
 8010480:	d104      	bne.n	801048c <__swbuf_r+0x6c>
 8010482:	4621      	mov	r1, r4
 8010484:	4628      	mov	r0, r5
 8010486:	f7ff fa07 	bl	800f898 <_fflush_r>
 801048a:	b988      	cbnz	r0, 80104b0 <__swbuf_r+0x90>
 801048c:	4638      	mov	r0, r7
 801048e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010490:	4b0a      	ldr	r3, [pc, #40]	; (80104bc <__swbuf_r+0x9c>)
 8010492:	429c      	cmp	r4, r3
 8010494:	d101      	bne.n	801049a <__swbuf_r+0x7a>
 8010496:	68ac      	ldr	r4, [r5, #8]
 8010498:	e7cf      	b.n	801043a <__swbuf_r+0x1a>
 801049a:	4b09      	ldr	r3, [pc, #36]	; (80104c0 <__swbuf_r+0xa0>)
 801049c:	429c      	cmp	r4, r3
 801049e:	bf08      	it	eq
 80104a0:	68ec      	ldreq	r4, [r5, #12]
 80104a2:	e7ca      	b.n	801043a <__swbuf_r+0x1a>
 80104a4:	4621      	mov	r1, r4
 80104a6:	4628      	mov	r0, r5
 80104a8:	f000 f81e 	bl	80104e8 <__swsetup_r>
 80104ac:	2800      	cmp	r0, #0
 80104ae:	d0cb      	beq.n	8010448 <__swbuf_r+0x28>
 80104b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80104b4:	e7ea      	b.n	801048c <__swbuf_r+0x6c>
 80104b6:	bf00      	nop
 80104b8:	08010ce8 	.word	0x08010ce8
 80104bc:	08010d08 	.word	0x08010d08
 80104c0:	08010cc8 	.word	0x08010cc8

080104c4 <_write_r>:
 80104c4:	b538      	push	{r3, r4, r5, lr}
 80104c6:	4d07      	ldr	r5, [pc, #28]	; (80104e4 <_write_r+0x20>)
 80104c8:	4604      	mov	r4, r0
 80104ca:	4608      	mov	r0, r1
 80104cc:	4611      	mov	r1, r2
 80104ce:	2200      	movs	r2, #0
 80104d0:	602a      	str	r2, [r5, #0]
 80104d2:	461a      	mov	r2, r3
 80104d4:	f7f2 fdc0 	bl	8003058 <_write>
 80104d8:	1c43      	adds	r3, r0, #1
 80104da:	d102      	bne.n	80104e2 <_write_r+0x1e>
 80104dc:	682b      	ldr	r3, [r5, #0]
 80104de:	b103      	cbz	r3, 80104e2 <_write_r+0x1e>
 80104e0:	6023      	str	r3, [r4, #0]
 80104e2:	bd38      	pop	{r3, r4, r5, pc}
 80104e4:	24000e7c 	.word	0x24000e7c

080104e8 <__swsetup_r>:
 80104e8:	4b32      	ldr	r3, [pc, #200]	; (80105b4 <__swsetup_r+0xcc>)
 80104ea:	b570      	push	{r4, r5, r6, lr}
 80104ec:	681d      	ldr	r5, [r3, #0]
 80104ee:	4606      	mov	r6, r0
 80104f0:	460c      	mov	r4, r1
 80104f2:	b125      	cbz	r5, 80104fe <__swsetup_r+0x16>
 80104f4:	69ab      	ldr	r3, [r5, #24]
 80104f6:	b913      	cbnz	r3, 80104fe <__swsetup_r+0x16>
 80104f8:	4628      	mov	r0, r5
 80104fa:	f7ff fa61 	bl	800f9c0 <__sinit>
 80104fe:	4b2e      	ldr	r3, [pc, #184]	; (80105b8 <__swsetup_r+0xd0>)
 8010500:	429c      	cmp	r4, r3
 8010502:	d10f      	bne.n	8010524 <__swsetup_r+0x3c>
 8010504:	686c      	ldr	r4, [r5, #4]
 8010506:	89a3      	ldrh	r3, [r4, #12]
 8010508:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801050c:	0719      	lsls	r1, r3, #28
 801050e:	d42c      	bmi.n	801056a <__swsetup_r+0x82>
 8010510:	06dd      	lsls	r5, r3, #27
 8010512:	d411      	bmi.n	8010538 <__swsetup_r+0x50>
 8010514:	2309      	movs	r3, #9
 8010516:	6033      	str	r3, [r6, #0]
 8010518:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801051c:	81a3      	strh	r3, [r4, #12]
 801051e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010522:	e03e      	b.n	80105a2 <__swsetup_r+0xba>
 8010524:	4b25      	ldr	r3, [pc, #148]	; (80105bc <__swsetup_r+0xd4>)
 8010526:	429c      	cmp	r4, r3
 8010528:	d101      	bne.n	801052e <__swsetup_r+0x46>
 801052a:	68ac      	ldr	r4, [r5, #8]
 801052c:	e7eb      	b.n	8010506 <__swsetup_r+0x1e>
 801052e:	4b24      	ldr	r3, [pc, #144]	; (80105c0 <__swsetup_r+0xd8>)
 8010530:	429c      	cmp	r4, r3
 8010532:	bf08      	it	eq
 8010534:	68ec      	ldreq	r4, [r5, #12]
 8010536:	e7e6      	b.n	8010506 <__swsetup_r+0x1e>
 8010538:	0758      	lsls	r0, r3, #29
 801053a:	d512      	bpl.n	8010562 <__swsetup_r+0x7a>
 801053c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801053e:	b141      	cbz	r1, 8010552 <__swsetup_r+0x6a>
 8010540:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010544:	4299      	cmp	r1, r3
 8010546:	d002      	beq.n	801054e <__swsetup_r+0x66>
 8010548:	4630      	mov	r0, r6
 801054a:	f7ff fb47 	bl	800fbdc <_free_r>
 801054e:	2300      	movs	r3, #0
 8010550:	6363      	str	r3, [r4, #52]	; 0x34
 8010552:	89a3      	ldrh	r3, [r4, #12]
 8010554:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	2300      	movs	r3, #0
 801055c:	6063      	str	r3, [r4, #4]
 801055e:	6923      	ldr	r3, [r4, #16]
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	89a3      	ldrh	r3, [r4, #12]
 8010564:	f043 0308 	orr.w	r3, r3, #8
 8010568:	81a3      	strh	r3, [r4, #12]
 801056a:	6923      	ldr	r3, [r4, #16]
 801056c:	b94b      	cbnz	r3, 8010582 <__swsetup_r+0x9a>
 801056e:	89a3      	ldrh	r3, [r4, #12]
 8010570:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010578:	d003      	beq.n	8010582 <__swsetup_r+0x9a>
 801057a:	4621      	mov	r1, r4
 801057c:	4630      	mov	r0, r6
 801057e:	f7ff fae5 	bl	800fb4c <__smakebuf_r>
 8010582:	89a0      	ldrh	r0, [r4, #12]
 8010584:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010588:	f010 0301 	ands.w	r3, r0, #1
 801058c:	d00a      	beq.n	80105a4 <__swsetup_r+0xbc>
 801058e:	2300      	movs	r3, #0
 8010590:	60a3      	str	r3, [r4, #8]
 8010592:	6963      	ldr	r3, [r4, #20]
 8010594:	425b      	negs	r3, r3
 8010596:	61a3      	str	r3, [r4, #24]
 8010598:	6923      	ldr	r3, [r4, #16]
 801059a:	b943      	cbnz	r3, 80105ae <__swsetup_r+0xc6>
 801059c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80105a0:	d1ba      	bne.n	8010518 <__swsetup_r+0x30>
 80105a2:	bd70      	pop	{r4, r5, r6, pc}
 80105a4:	0781      	lsls	r1, r0, #30
 80105a6:	bf58      	it	pl
 80105a8:	6963      	ldrpl	r3, [r4, #20]
 80105aa:	60a3      	str	r3, [r4, #8]
 80105ac:	e7f4      	b.n	8010598 <__swsetup_r+0xb0>
 80105ae:	2000      	movs	r0, #0
 80105b0:	e7f7      	b.n	80105a2 <__swsetup_r+0xba>
 80105b2:	bf00      	nop
 80105b4:	24000054 	.word	0x24000054
 80105b8:	08010ce8 	.word	0x08010ce8
 80105bc:	08010d08 	.word	0x08010d08
 80105c0:	08010cc8 	.word	0x08010cc8

080105c4 <_close_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d06      	ldr	r5, [pc, #24]	; (80105e0 <_close_r+0x1c>)
 80105c8:	2300      	movs	r3, #0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4608      	mov	r0, r1
 80105ce:	602b      	str	r3, [r5, #0]
 80105d0:	f7f2 fd6e 	bl	80030b0 <_close>
 80105d4:	1c43      	adds	r3, r0, #1
 80105d6:	d102      	bne.n	80105de <_close_r+0x1a>
 80105d8:	682b      	ldr	r3, [r5, #0]
 80105da:	b103      	cbz	r3, 80105de <_close_r+0x1a>
 80105dc:	6023      	str	r3, [r4, #0]
 80105de:	bd38      	pop	{r3, r4, r5, pc}
 80105e0:	24000e7c 	.word	0x24000e7c

080105e4 <_fstat_r>:
 80105e4:	b538      	push	{r3, r4, r5, lr}
 80105e6:	4d07      	ldr	r5, [pc, #28]	; (8010604 <_fstat_r+0x20>)
 80105e8:	2300      	movs	r3, #0
 80105ea:	4604      	mov	r4, r0
 80105ec:	4608      	mov	r0, r1
 80105ee:	4611      	mov	r1, r2
 80105f0:	602b      	str	r3, [r5, #0]
 80105f2:	f7f2 fd9d 	bl	8003130 <_fstat>
 80105f6:	1c43      	adds	r3, r0, #1
 80105f8:	d102      	bne.n	8010600 <_fstat_r+0x1c>
 80105fa:	682b      	ldr	r3, [r5, #0]
 80105fc:	b103      	cbz	r3, 8010600 <_fstat_r+0x1c>
 80105fe:	6023      	str	r3, [r4, #0]
 8010600:	bd38      	pop	{r3, r4, r5, pc}
 8010602:	bf00      	nop
 8010604:	24000e7c 	.word	0x24000e7c

08010608 <_isatty_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4d06      	ldr	r5, [pc, #24]	; (8010624 <_isatty_r+0x1c>)
 801060c:	2300      	movs	r3, #0
 801060e:	4604      	mov	r4, r0
 8010610:	4608      	mov	r0, r1
 8010612:	602b      	str	r3, [r5, #0]
 8010614:	f7f2 fd0a 	bl	800302c <_isatty>
 8010618:	1c43      	adds	r3, r0, #1
 801061a:	d102      	bne.n	8010622 <_isatty_r+0x1a>
 801061c:	682b      	ldr	r3, [r5, #0]
 801061e:	b103      	cbz	r3, 8010622 <_isatty_r+0x1a>
 8010620:	6023      	str	r3, [r4, #0]
 8010622:	bd38      	pop	{r3, r4, r5, pc}
 8010624:	24000e7c 	.word	0x24000e7c

08010628 <_lseek_r>:
 8010628:	b538      	push	{r3, r4, r5, lr}
 801062a:	4d07      	ldr	r5, [pc, #28]	; (8010648 <_lseek_r+0x20>)
 801062c:	4604      	mov	r4, r0
 801062e:	4608      	mov	r0, r1
 8010630:	4611      	mov	r1, r2
 8010632:	2200      	movs	r2, #0
 8010634:	602a      	str	r2, [r5, #0]
 8010636:	461a      	mov	r2, r3
 8010638:	f7f3 fc9c 	bl	8003f74 <_lseek>
 801063c:	1c43      	adds	r3, r0, #1
 801063e:	d102      	bne.n	8010646 <_lseek_r+0x1e>
 8010640:	682b      	ldr	r3, [r5, #0]
 8010642:	b103      	cbz	r3, 8010646 <_lseek_r+0x1e>
 8010644:	6023      	str	r3, [r4, #0]
 8010646:	bd38      	pop	{r3, r4, r5, pc}
 8010648:	24000e7c 	.word	0x24000e7c

0801064c <__malloc_lock>:
 801064c:	4801      	ldr	r0, [pc, #4]	; (8010654 <__malloc_lock+0x8>)
 801064e:	f7ff ba55 	b.w	800fafc <__retarget_lock_acquire_recursive>
 8010652:	bf00      	nop
 8010654:	24000e70 	.word	0x24000e70

08010658 <__malloc_unlock>:
 8010658:	4801      	ldr	r0, [pc, #4]	; (8010660 <__malloc_unlock+0x8>)
 801065a:	f7ff ba50 	b.w	800fafe <__retarget_lock_release_recursive>
 801065e:	bf00      	nop
 8010660:	24000e70 	.word	0x24000e70

08010664 <_read_r>:
 8010664:	b538      	push	{r3, r4, r5, lr}
 8010666:	4d07      	ldr	r5, [pc, #28]	; (8010684 <_read_r+0x20>)
 8010668:	4604      	mov	r4, r0
 801066a:	4608      	mov	r0, r1
 801066c:	4611      	mov	r1, r2
 801066e:	2200      	movs	r2, #0
 8010670:	602a      	str	r2, [r5, #0]
 8010672:	461a      	mov	r2, r3
 8010674:	f7f2 fd34 	bl	80030e0 <_read>
 8010678:	1c43      	adds	r3, r0, #1
 801067a:	d102      	bne.n	8010682 <_read_r+0x1e>
 801067c:	682b      	ldr	r3, [r5, #0]
 801067e:	b103      	cbz	r3, 8010682 <_read_r+0x1e>
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	bd38      	pop	{r3, r4, r5, pc}
 8010684:	24000e7c 	.word	0x24000e7c

08010688 <_init>:
 8010688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801068a:	bf00      	nop
 801068c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801068e:	bc08      	pop	{r3}
 8010690:	469e      	mov	lr, r3
 8010692:	4770      	bx	lr

08010694 <_fini>:
 8010694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010696:	bf00      	nop
 8010698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801069a:	bc08      	pop	{r3}
 801069c:	469e      	mov	lr, r3
 801069e:	4770      	bx	lr
